
STM32F103_simpleRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002864  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a68  08002a68  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002a68  08002a68  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a68  08002a68  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a68  08002a68  00012a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a6c  08002a6c  00012a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000067c  20000070  08002ae0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  08002ae0  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006039  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002173  00000000  00000000  000260d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  00028248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a8  00000000  00000000  00028a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f68  00000000  00000000  000290d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8c0  00000000  00000000  00042038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085738  00000000  00000000  0004c8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2030  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d74  00000000  00000000  000d2080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002958 	.word	0x08002958

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002958 	.word	0x08002958

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b2d      	ldr	r3, [pc, #180]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2c      	ldr	r2, [pc, #176]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b2a      	ldr	r3, [pc, #168]	; (8000218 <MX_GPIO_Init+0xcc>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000178:	4b27      	ldr	r3, [pc, #156]	; (8000218 <MX_GPIO_Init+0xcc>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a26      	ldr	r2, [pc, #152]	; (8000218 <MX_GPIO_Init+0xcc>)
 800017e:	f043 0310 	orr.w	r3, r3, #16
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b24      	ldr	r3, [pc, #144]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0310 	and.w	r3, r3, #16
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b21      	ldr	r3, [pc, #132]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a20      	ldr	r2, [pc, #128]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1e      	ldr	r3, [pc, #120]	; (8000218 <MX_GPIO_Init+0xcc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b1b      	ldr	r3, [pc, #108]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a1a      	ldr	r2, [pc, #104]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b18      	ldr	r3, [pc, #96]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80001c0:	2200      	movs	r2, #0
 80001c2:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80001c6:	4815      	ldr	r0, [pc, #84]	; (800021c <MX_GPIO_Init+0xd0>)
 80001c8:	f001 f87a 	bl	80012c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80001cc:	2201      	movs	r2, #1
 80001ce:	2140      	movs	r1, #64	; 0x40
 80001d0:	4813      	ldr	r0, [pc, #76]	; (8000220 <MX_GPIO_Init+0xd4>)
 80001d2:	f001 f875 	bl	80012c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80001d6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80001da:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001dc:	2301      	movs	r3, #1
 80001de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e0:	2300      	movs	r3, #0
 80001e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e4:	2302      	movs	r3, #2
 80001e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001e8:	f107 0310 	add.w	r3, r7, #16
 80001ec:	4619      	mov	r1, r3
 80001ee:	480b      	ldr	r0, [pc, #44]	; (800021c <MX_GPIO_Init+0xd0>)
 80001f0:	f000 fee2 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80001f4:	2340      	movs	r3, #64	; 0x40
 80001f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f8:	2301      	movs	r3, #1
 80001fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000200:	2302      	movs	r3, #2
 8000202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	4619      	mov	r1, r3
 800020a:	4805      	ldr	r0, [pc, #20]	; (8000220 <MX_GPIO_Init+0xd4>)
 800020c:	f000 fed4 	bl	8000fb8 <HAL_GPIO_Init>

}
 8000210:	bf00      	nop
 8000212:	3720      	adds	r7, #32
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40021000 	.word	0x40021000
 800021c:	40011000 	.word	0x40011000
 8000220:	40010c00 	.word	0x40010c00

08000224 <DispSel>:
static void DispSel(uint8_t sel);
static void DispDataWr(uint8_t data);
static void DispCursorSet(uint8_t row, uint8_t col);

static void DispSel(uint8_t sel)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
	if( sel == DISP_SEL_CMD_REG ){
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d106      	bne.n	8000242 <DispSel+0x1e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000234:	2200      	movs	r2, #0
 8000236:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800023a:	4807      	ldr	r0, [pc, #28]	; (8000258 <DispSel+0x34>)
 800023c:	f001 f840 	bl	80012c0 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8000240:	e005      	b.n	800024e <DispSel+0x2a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000242:	2201      	movs	r2, #1
 8000244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000248:	4803      	ldr	r0, [pc, #12]	; (8000258 <DispSel+0x34>)
 800024a:	f001 f839 	bl	80012c0 <HAL_GPIO_WritePin>
}
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40011000 	.word	0x40011000

0800025c <DispDataWr>:

static void DispDataWr(uint8_t data)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
	if( data & 0x80 ){
 8000266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026a:	2b00      	cmp	r3, #0
 800026c:	da05      	bge.n	800027a <DispDataWr+0x1e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800026e:	2201      	movs	r2, #1
 8000270:	2180      	movs	r1, #128	; 0x80
 8000272:	4847      	ldr	r0, [pc, #284]	; (8000390 <DispDataWr+0x134>)
 8000274:	f001 f824 	bl	80012c0 <HAL_GPIO_WritePin>
 8000278:	e004      	b.n	8000284 <DispDataWr+0x28>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800027a:	2200      	movs	r2, #0
 800027c:	2180      	movs	r1, #128	; 0x80
 800027e:	4844      	ldr	r0, [pc, #272]	; (8000390 <DispDataWr+0x134>)
 8000280:	f001 f81e 	bl	80012c0 <HAL_GPIO_WritePin>
	}
	if( data & 0x40 ){
 8000284:	79fb      	ldrb	r3, [r7, #7]
 8000286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800028a:	2b00      	cmp	r3, #0
 800028c:	d005      	beq.n	800029a <DispDataWr+0x3e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800028e:	2201      	movs	r2, #1
 8000290:	2140      	movs	r1, #64	; 0x40
 8000292:	483f      	ldr	r0, [pc, #252]	; (8000390 <DispDataWr+0x134>)
 8000294:	f001 f814 	bl	80012c0 <HAL_GPIO_WritePin>
 8000298:	e004      	b.n	80002a4 <DispDataWr+0x48>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	2140      	movs	r1, #64	; 0x40
 800029e:	483c      	ldr	r0, [pc, #240]	; (8000390 <DispDataWr+0x134>)
 80002a0:	f001 f80e 	bl	80012c0 <HAL_GPIO_WritePin>
	}
	if( data & 0x20 ){
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	f003 0320 	and.w	r3, r3, #32
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d005      	beq.n	80002ba <DispDataWr+0x5e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80002ae:	2201      	movs	r2, #1
 80002b0:	2120      	movs	r1, #32
 80002b2:	4837      	ldr	r0, [pc, #220]	; (8000390 <DispDataWr+0x134>)
 80002b4:	f001 f804 	bl	80012c0 <HAL_GPIO_WritePin>
 80002b8:	e004      	b.n	80002c4 <DispDataWr+0x68>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80002ba:	2200      	movs	r2, #0
 80002bc:	2120      	movs	r1, #32
 80002be:	4834      	ldr	r0, [pc, #208]	; (8000390 <DispDataWr+0x134>)
 80002c0:	f000 fffe 	bl	80012c0 <HAL_GPIO_WritePin>
	}
	if( data & 0x10 ){
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	f003 0310 	and.w	r3, r3, #16
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d005      	beq.n	80002da <DispDataWr+0x7e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80002ce:	2201      	movs	r2, #1
 80002d0:	2110      	movs	r1, #16
 80002d2:	482f      	ldr	r0, [pc, #188]	; (8000390 <DispDataWr+0x134>)
 80002d4:	f000 fff4 	bl	80012c0 <HAL_GPIO_WritePin>
 80002d8:	e004      	b.n	80002e4 <DispDataWr+0x88>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2110      	movs	r1, #16
 80002de:	482c      	ldr	r0, [pc, #176]	; (8000390 <DispDataWr+0x134>)
 80002e0:	f000 ffee 	bl	80012c0 <HAL_GPIO_WritePin>
	}
	if( data & 0x08 ){
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	f003 0308 	and.w	r3, r3, #8
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d005      	beq.n	80002fa <DispDataWr+0x9e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80002ee:	2201      	movs	r2, #1
 80002f0:	2108      	movs	r1, #8
 80002f2:	4827      	ldr	r0, [pc, #156]	; (8000390 <DispDataWr+0x134>)
 80002f4:	f000 ffe4 	bl	80012c0 <HAL_GPIO_WritePin>
 80002f8:	e004      	b.n	8000304 <DispDataWr+0xa8>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2108      	movs	r1, #8
 80002fe:	4824      	ldr	r0, [pc, #144]	; (8000390 <DispDataWr+0x134>)
 8000300:	f000 ffde 	bl	80012c0 <HAL_GPIO_WritePin>
	}
	if( data & 0x04 ){
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	f003 0304 	and.w	r3, r3, #4
 800030a:	2b00      	cmp	r3, #0
 800030c:	d005      	beq.n	800031a <DispDataWr+0xbe>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800030e:	2201      	movs	r2, #1
 8000310:	2104      	movs	r1, #4
 8000312:	481f      	ldr	r0, [pc, #124]	; (8000390 <DispDataWr+0x134>)
 8000314:	f000 ffd4 	bl	80012c0 <HAL_GPIO_WritePin>
 8000318:	e004      	b.n	8000324 <DispDataWr+0xc8>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	2104      	movs	r1, #4
 800031e:	481c      	ldr	r0, [pc, #112]	; (8000390 <DispDataWr+0x134>)
 8000320:	f000 ffce 	bl	80012c0 <HAL_GPIO_WritePin>
	}
	if( data & 0x02 ){
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	f003 0302 	and.w	r3, r3, #2
 800032a:	2b00      	cmp	r3, #0
 800032c:	d005      	beq.n	800033a <DispDataWr+0xde>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800032e:	2201      	movs	r2, #1
 8000330:	2102      	movs	r1, #2
 8000332:	4817      	ldr	r0, [pc, #92]	; (8000390 <DispDataWr+0x134>)
 8000334:	f000 ffc4 	bl	80012c0 <HAL_GPIO_WritePin>
 8000338:	e004      	b.n	8000344 <DispDataWr+0xe8>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	2102      	movs	r1, #2
 800033e:	4814      	ldr	r0, [pc, #80]	; (8000390 <DispDataWr+0x134>)
 8000340:	f000 ffbe 	bl	80012c0 <HAL_GPIO_WritePin>
	}
	if( data & 0x01 ){
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d005      	beq.n	800035a <DispDataWr+0xfe>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800034e:	2201      	movs	r2, #1
 8000350:	2101      	movs	r1, #1
 8000352:	480f      	ldr	r0, [pc, #60]	; (8000390 <DispDataWr+0x134>)
 8000354:	f000 ffb4 	bl	80012c0 <HAL_GPIO_WritePin>
 8000358:	e004      	b.n	8000364 <DispDataWr+0x108>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2101      	movs	r1, #1
 800035e:	480c      	ldr	r0, [pc, #48]	; (8000390 <DispDataWr+0x134>)
 8000360:	f000 ffae 	bl	80012c0 <HAL_GPIO_WritePin>
	}

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800036a:	4809      	ldr	r0, [pc, #36]	; (8000390 <DispDataWr+0x134>)
 800036c:	f000 ffa8 	bl	80012c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000370:	2201      	movs	r2, #1
 8000372:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000376:	4806      	ldr	r0, [pc, #24]	; (8000390 <DispDataWr+0x134>)
 8000378:	f000 ffa2 	bl	80012c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000382:	4803      	ldr	r0, [pc, #12]	; (8000390 <DispDataWr+0x134>)
 8000384:	f000 ff9c 	bl	80012c0 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40011000 	.word	0x40011000

08000394 <DispInit>:

void DispInit(uint8_t maxrows, uint8_t maxcols)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	460a      	mov	r2, r1
 800039e:	71fb      	strb	r3, [r7, #7]
 80003a0:	4613      	mov	r3, r2
 80003a2:	71bb      	strb	r3, [r7, #6]
	DispMaxRows = maxrows;
 80003a4:	4a19      	ldr	r2, [pc, #100]	; (800040c <DispInit+0x78>)
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	7013      	strb	r3, [r2, #0]
	DispMaxCols = maxcols;
 80003aa:	4a19      	ldr	r2, [pc, #100]	; (8000410 <DispInit+0x7c>)
 80003ac:	79bb      	ldrb	r3, [r7, #6]
 80003ae:	7013      	strb	r3, [r2, #0]

	DispSel(DISP_SEL_CMD_REG);
 80003b0:	2000      	movs	r0, #0
 80003b2:	f7ff ff37 	bl	8000224 <DispSel>
	HAL_Delay(50);
 80003b6:	2032      	movs	r0, #50	; 0x32
 80003b8:	f000 fa22 	bl	8000800 <HAL_Delay>
	DispDataWr(DISP_CMD_FNCT);
 80003bc:	203b      	movs	r0, #59	; 0x3b
 80003be:	f7ff ff4d 	bl	800025c <DispDataWr>
	HAL_Delay(2);
 80003c2:	2002      	movs	r0, #2
 80003c4:	f000 fa1c 	bl	8000800 <HAL_Delay>
	DispDataWr(DISP_CMD_FNCT);
 80003c8:	203b      	movs	r0, #59	; 0x3b
 80003ca:	f7ff ff47 	bl	800025c <DispDataWr>
	HAL_Delay(2);
 80003ce:	2002      	movs	r0, #2
 80003d0:	f000 fa16 	bl	8000800 <HAL_Delay>
	DispDataWr(DISP_CMD_FNCT);
 80003d4:	203b      	movs	r0, #59	; 0x3b
 80003d6:	f7ff ff41 	bl	800025c <DispDataWr>
	HAL_Delay(2);
 80003da:	2002      	movs	r0, #2
 80003dc:	f000 fa10 	bl	8000800 <HAL_Delay>
	DispDataWr(DISP_CMD_FNCT);
 80003e0:	203b      	movs	r0, #59	; 0x3b
 80003e2:	f7ff ff3b 	bl	800025c <DispDataWr>
	HAL_Delay(2);
 80003e6:	2002      	movs	r0, #2
 80003e8:	f000 fa0a 	bl	8000800 <HAL_Delay>

	DispDataWr(DISP_CMD_ON_OFF);
 80003ec:	200c      	movs	r0, #12
 80003ee:	f7ff ff35 	bl	800025c <DispDataWr>
	DispDataWr(DISP_CMD_MODE);
 80003f2:	2006      	movs	r0, #6
 80003f4:	f7ff ff32 	bl	800025c <DispDataWr>
	DispDataWr(DISP_CMD_CLS);
 80003f8:	2001      	movs	r0, #1
 80003fa:	f7ff ff2f 	bl	800025c <DispDataWr>
	HAL_Delay(2);
 80003fe:	2002      	movs	r0, #2
 8000400:	f000 f9fe 	bl	8000800 <HAL_Delay>
}
 8000404:	bf00      	nop
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	2000008d 	.word	0x2000008d
 8000410:	2000008c 	.word	0x2000008c

08000414 <DispCursorSet>:

static void DispCursorSet(uint8_t row, uint8_t col)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	460a      	mov	r2, r1
 800041e:	71fb      	strb	r3, [r7, #7]
 8000420:	4613      	mov	r3, r2
 8000422:	71bb      	strb	r3, [r7, #6]
	DispSel(DISP_SEL_CMD_REG);
 8000424:	2000      	movs	r0, #0
 8000426:	f7ff fefd 	bl	8000224 <DispSel>
	switch( row ){
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d002      	beq.n	8000436 <DispCursorSet+0x22>
 8000430:	2b01      	cmp	r3, #1
 8000432:	d007      	beq.n	8000444 <DispCursorSet+0x30>
		break;
	case 1:
		DispDataWr(0xC0 + col);
		break;
	}
}
 8000434:	e00d      	b.n	8000452 <DispCursorSet+0x3e>
		DispDataWr(0x80 + col);
 8000436:	79bb      	ldrb	r3, [r7, #6]
 8000438:	3b80      	subs	r3, #128	; 0x80
 800043a:	b2db      	uxtb	r3, r3
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff ff0d 	bl	800025c <DispDataWr>
		break;
 8000442:	e006      	b.n	8000452 <DispCursorSet+0x3e>
		DispDataWr(0xC0 + col);
 8000444:	79bb      	ldrb	r3, [r7, #6]
 8000446:	3b40      	subs	r3, #64	; 0x40
 8000448:	b2db      	uxtb	r3, r3
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff ff06 	bl	800025c <DispDataWr>
		break;
 8000450:	bf00      	nop
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
	...

0800045c <DispStr>:

void DispStr(uint8_t row, uint8_t col, char *s)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	603a      	str	r2, [r7, #0]
 8000466:	71fb      	strb	r3, [r7, #7]
 8000468:	460b      	mov	r3, r1
 800046a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if( row<DispMaxRows && col<DispMaxCols ){
 800046c:	4b19      	ldr	r3, [pc, #100]	; (80004d4 <DispStr+0x78>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	79fa      	ldrb	r2, [r7, #7]
 8000472:	429a      	cmp	r2, r3
 8000474:	d229      	bcs.n	80004ca <DispStr+0x6e>
 8000476:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <DispStr+0x7c>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	79ba      	ldrb	r2, [r7, #6]
 800047c:	429a      	cmp	r2, r3
 800047e:	d224      	bcs.n	80004ca <DispStr+0x6e>
		DispCursorSet(row, col);
 8000480:	79ba      	ldrb	r2, [r7, #6]
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	4611      	mov	r1, r2
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ffc4 	bl	8000414 <DispCursorSet>
		HAL_Delay(1);
 800048c:	2001      	movs	r0, #1
 800048e:	f000 f9b7 	bl	8000800 <HAL_Delay>
		DispSel(DISP_SEL_DATA_REG);
 8000492:	2001      	movs	r0, #1
 8000494:	f7ff fec6 	bl	8000224 <DispSel>
		i = col;
 8000498:	79bb      	ldrb	r3, [r7, #6]
 800049a:	73fb      	strb	r3, [r7, #15]
		while( i<DispMaxCols && *s != '\0' ){
 800049c:	e00c      	b.n	80004b8 <DispStr+0x5c>
			DispDataWr(*s++);
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	1c5a      	adds	r2, r3, #1
 80004a2:	603a      	str	r2, [r7, #0]
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff fed8 	bl	800025c <DispDataWr>
			HAL_Delay(1);
 80004ac:	2001      	movs	r0, #1
 80004ae:	f000 f9a7 	bl	8000800 <HAL_Delay>
			i++;
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	3301      	adds	r3, #1
 80004b6:	73fb      	strb	r3, [r7, #15]
		while( i<DispMaxCols && *s != '\0' ){
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <DispStr+0x7c>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	7bfa      	ldrb	r2, [r7, #15]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d203      	bcs.n	80004ca <DispStr+0x6e>
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d1e9      	bne.n	800049e <DispStr+0x42>
		}
	}
}
 80004ca:	bf00      	nop
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	2000008d 	.word	0x2000008d
 80004d8:	2000008c 	.word	0x2000008c

080004dc <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80004dc:	b480      	push	{r7}
 80004de:	b089      	sub	sp, #36	; 0x24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	330c      	adds	r3, #12
 80004e8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	e853 3f00 	ldrex	r3, [r3]
 80004f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	f043 0320 	orr.w	r3, r3, #32
 80004f8:	61fb      	str	r3, [r7, #28]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	330c      	adds	r3, #12
 80004fe:	69fa      	ldr	r2, [r7, #28]
 8000500:	61ba      	str	r2, [r7, #24]
 8000502:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000504:	6979      	ldr	r1, [r7, #20]
 8000506:	69ba      	ldr	r2, [r7, #24]
 8000508:	e841 2300 	strex	r3, r2, [r1]
 800050c:	613b      	str	r3, [r7, #16]
   return(result);
 800050e:	693b      	ldr	r3, [r7, #16]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d1e7      	bne.n	80004e4 <LL_USART_EnableIT_RXNE+0x8>
}
 8000514:	bf00      	nop
 8000516:	bf00      	nop
 8000518:	3724      	adds	r7, #36	; 0x24
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f000 fc02 	bl	8000d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f812 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f7ff fe0e 	bl	800014c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000530:	f000 fb40 	bl	8000bb4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_USART_EnableIT_RXNE(USART1);
 8000534:	4804      	ldr	r0, [pc, #16]	; (8000548 <main+0x28>)
 8000536:	f7ff ffd1 	bl	80004dc <LL_USART_EnableIT_RXNE>
  vPrintString("simpleRTOS starting ... \r\n");
 800053a:	4804      	ldr	r0, [pc, #16]	; (800054c <main+0x2c>)
 800053c:	f000 fbba 	bl	8000cb4 <vPrintString>
  Kernel_init();
 8000540:	f000 f84c 	bl	80005dc <Kernel_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	e7fe      	b.n	8000544 <main+0x24>
 8000546:	bf00      	nop
 8000548:	40013800 	.word	0x40013800
 800054c:	08002970 	.word	0x08002970

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b090      	sub	sp, #64	; 0x40
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0318 	add.w	r3, r7, #24
 800055a:	2228      	movs	r2, #40	; 0x28
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f002 f940 	bl	80027e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000572:	2301      	movs	r3, #1
 8000574:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000584:	2302      	movs	r3, #2
 8000586:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800058e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0318 	add.w	r3, r7, #24
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fec3 	bl	8001324 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005a4:	f000 f952 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2302      	movs	r3, #2
 80005ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2102      	movs	r1, #2
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 f930 	bl	8001828 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ce:	f000 f93d 	bl	800084c <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3740      	adds	r7, #64	; 0x40
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <Kernel_init>:

/* USER CODE BEGIN 4 */
static void Kernel_init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
	uint32_t taskId;

	Kernel_task_init();
 80005e2:	f001 ffe9 	bl	80025b8 <Kernel_task_init>
	Kernel_event_flag_init();
 80005e6:	f001 fda1 	bl	800212c <Kernel_event_flag_init>
	Kernel_msgQ_init();
 80005ea:	f001 feb1 	bl	8002350 <Kernel_msgQ_init>

	taskId = Kernel_task_create(User_task0);
 80005ee:	4813      	ldr	r0, [pc, #76]	; (800063c <Kernel_init+0x60>)
 80005f0:	f002 f82c 	bl	800264c <Kernel_task_create>
 80005f4:	6078      	str	r0, [r7, #4]
	if(NOT_ENOUGH_TASK_NUM == taskId){
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005fc:	d102      	bne.n	8000604 <Kernel_init+0x28>
		vPrintString("Task0 creation fail \r\n");
 80005fe:	4810      	ldr	r0, [pc, #64]	; (8000640 <Kernel_init+0x64>)
 8000600:	f000 fb58 	bl	8000cb4 <vPrintString>
	}

	taskId = Kernel_task_create(User_task1);
 8000604:	480f      	ldr	r0, [pc, #60]	; (8000644 <Kernel_init+0x68>)
 8000606:	f002 f821 	bl	800264c <Kernel_task_create>
 800060a:	6078      	str	r0, [r7, #4]
	if(NOT_ENOUGH_TASK_NUM == taskId){
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000612:	d102      	bne.n	800061a <Kernel_init+0x3e>
		vPrintString("Task1 creation fail \r\n");
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <Kernel_init+0x6c>)
 8000616:	f000 fb4d 	bl	8000cb4 <vPrintString>
	}

	taskId = Kernel_task_create(User_task2);
 800061a:	480c      	ldr	r0, [pc, #48]	; (800064c <Kernel_init+0x70>)
 800061c:	f002 f816 	bl	800264c <Kernel_task_create>
 8000620:	6078      	str	r0, [r7, #4]
	if(NOT_ENOUGH_TASK_NUM == taskId){
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000628:	d102      	bne.n	8000630 <Kernel_init+0x54>
		vPrintString("Task2 creation fail \r\n");
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <Kernel_init+0x74>)
 800062c:	f000 fb42 	bl	8000cb4 <vPrintString>
	}

	Kernel_start();
 8000630:	f001 fdc6 	bl	80021c0 <Kernel_start>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	08000655 	.word	0x08000655
 8000640:	0800298c 	.word	0x0800298c
 8000644:	08000721 	.word	0x08000721
 8000648:	080029a4 	.word	0x080029a4
 800064c:	080007dd 	.word	0x080007dd
 8000650:	080029bc 	.word	0x080029bc

08000654 <User_task0>:

void User_task0(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
	vPrintString("User task #0 \r\n");
 800065a:	4830      	ldr	r0, [pc, #192]	; (800071c <User_task0+0xc8>)
 800065c:	f000 fb2a 	bl	8000cb4 <vPrintString>

	uint8_t cmdBuf[16];
	uint32_t cmdBufIdx = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
	uint8_t uartch= 0;
 8000664:	2300      	movs	r3, #0
 8000666:	71fb      	strb	r3, [r7, #7]

	while(true){
		KernelEventFlag_t handle_event = Kernel_wait_events(KernelEventFlag_UartIn);
 8000668:	2001      	movs	r0, #1
 800066a:	f001 fddf 	bl	800222c <Kernel_wait_events>
 800066e:	4603      	mov	r3, r0
 8000670:	77fb      	strb	r3, [r7, #31]
		switch(handle_event){
 8000672:	7ffb      	ldrb	r3, [r7, #31]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d04b      	beq.n	8000710 <User_task0+0xbc>
 8000678:	2b01      	cmp	r3, #1
 800067a:	d14b      	bne.n	8000714 <User_task0+0xc0>
		case KernelEventFlag_UartIn:
			//vPrintString("\r\nEvent handled \r\n");
			Kernel_recv_msg(KernelMsgQ_Task0, &uartch, 1);
 800067c:	1dfb      	adds	r3, r7, #7
 800067e:	2201      	movs	r2, #1
 8000680:	4619      	mov	r1, r3
 8000682:	2000      	movs	r0, #0
 8000684:	f001 fe3c 	bl	8002300 <Kernel_recv_msg>
			if(uartch == '\n'){
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	2b0a      	cmp	r3, #10
 800068c:	d132      	bne.n	80006f4 <User_task0+0xa0>
				cmdBuf[cmdBufIdx] = '\0';
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	3320      	adds	r3, #32
 8000692:	443b      	add	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	f803 2c14 	strb.w	r2, [r3, #-20]

				//Kernel_send_msg(KernelMsgQ_Task1, &cmdBufIdx, 1);
				//Kernel_send_msg(KernelMsgQ_Task1, cmdBuf, cmdBufIdx);
				//Kernel_send_events(KernelEventFlag_CmdIn);
				while(true){
					Kernel_send_events(KernelEventFlag_CmdIn);
 800069a:	2002      	movs	r0, #2
 800069c:	f001 fd9c 	bl	80021d8 <Kernel_send_events>
					if(false == Kernel_send_msg(KernelMsgQ_Task1, &cmdBufIdx, 1)){
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	2201      	movs	r2, #1
 80006a6:	4619      	mov	r1, r3
 80006a8:	2001      	movs	r0, #1
 80006aa:	f001 fdee 	bl	800228a <Kernel_send_msg>
 80006ae:	4603      	mov	r3, r0
 80006b0:	f083 0301 	eor.w	r3, r3, #1
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d002      	beq.n	80006c0 <User_task0+0x6c>
						Kernel_yield();
 80006ba:	f001 fd87 	bl	80021cc <Kernel_yield>
 80006be:	e7ec      	b.n	800069a <User_task0+0x46>
					}
					else if(false == Kernel_send_msg(KernelMsgQ_Task1, cmdBuf, cmdBufIdx)){
 80006c0:	68ba      	ldr	r2, [r7, #8]
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	4619      	mov	r1, r3
 80006c8:	2001      	movs	r0, #1
 80006ca:	f001 fdde 	bl	800228a <Kernel_send_msg>
 80006ce:	4603      	mov	r3, r0
 80006d0:	f083 0301 	eor.w	r3, r3, #1
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d008      	beq.n	80006ec <User_task0+0x98>
						uint8_t rollback;
						Kernel_recv_msg(KernelMsgQ_Task1, &rollback, 1);
 80006da:	1dbb      	adds	r3, r7, #6
 80006dc:	2201      	movs	r2, #1
 80006de:	4619      	mov	r1, r3
 80006e0:	2001      	movs	r0, #1
 80006e2:	f001 fe0d 	bl	8002300 <Kernel_recv_msg>
						Kernel_yield();
 80006e6:	f001 fd71 	bl	80021cc <Kernel_yield>
					Kernel_send_events(KernelEventFlag_CmdIn);
 80006ea:	e7d6      	b.n	800069a <User_task0+0x46>
					}
					else{
						break;
 80006ec:	bf00      	nop
					}
				}

				cmdBufIdx = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
			else{
				cmdBuf[cmdBufIdx] = uartch;
				cmdBufIdx++;
				cmdBufIdx %= 16;
			}
			break;
 80006f2:	e010      	b.n	8000716 <User_task0+0xc2>
				cmdBuf[cmdBufIdx] = uartch;
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	79fa      	ldrb	r2, [r7, #7]
 80006f8:	3320      	adds	r3, #32
 80006fa:	443b      	add	r3, r7
 80006fc:	f803 2c14 	strb.w	r2, [r3, #-20]
				cmdBufIdx++;
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3301      	adds	r3, #1
 8000704:	60bb      	str	r3, [r7, #8]
				cmdBufIdx %= 16;
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	f003 030f 	and.w	r3, r3, #15
 800070c:	60bb      	str	r3, [r7, #8]
			break;
 800070e:	e002      	b.n	8000716 <User_task0+0xc2>
		case KernelEventFlag_Empty:
			break;
 8000710:	bf00      	nop
 8000712:	e000      	b.n	8000716 <User_task0+0xc2>
		default:
			break;
 8000714:	bf00      	nop
		}
		Kernel_yield();
 8000716:	f001 fd59 	bl	80021cc <Kernel_yield>
	while(true){
 800071a:	e7a5      	b.n	8000668 <User_task0+0x14>
 800071c:	080029d4 	.word	0x080029d4

08000720 <User_task1>:
	}
}

void User_task1(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
	vPrintString("User task #1 \r\n");
 8000726:	4829      	ldr	r0, [pc, #164]	; (80007cc <User_task1+0xac>)
 8000728:	f000 fac4 	bl	8000cb4 <vPrintString>

	DispInit(2, 16);
 800072c:	2110      	movs	r1, #16
 800072e:	2002      	movs	r0, #2
 8000730:	f7ff fe30 	bl	8000394 <DispInit>
	DispStr(0, 0, "simpleRTOS      ");
 8000734:	4a26      	ldr	r2, [pc, #152]	; (80007d0 <User_task1+0xb0>)
 8000736:	2100      	movs	r1, #0
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff fe8f 	bl	800045c <DispStr>
	DispStr(1, 0, "                ");
 800073e:	4a25      	ldr	r2, [pc, #148]	; (80007d4 <User_task1+0xb4>)
 8000740:	2100      	movs	r1, #0
 8000742:	2001      	movs	r0, #1
 8000744:	f7ff fe8a 	bl	800045c <DispStr>

	uint8_t cmdlen = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	75bb      	strb	r3, [r7, #22]
	uint8_t cmd[16] = {0};
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]

	while(true){
		KernelEventFlag_t handle_event = Kernel_wait_events(KernelEventFlag_CmdIn);
 800075c:	2002      	movs	r0, #2
 800075e:	f001 fd65 	bl	800222c <Kernel_wait_events>
 8000762:	4603      	mov	r3, r0
 8000764:	75fb      	strb	r3, [r7, #23]
		switch(handle_event){
 8000766:	7dfb      	ldrb	r3, [r7, #23]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d028      	beq.n	80007be <User_task1+0x9e>
 800076c:	2b02      	cmp	r3, #2
 800076e:	d128      	bne.n	80007c2 <User_task1+0xa2>
		case KernelEventFlag_CmdIn:
			memset(cmd, 0, 16);
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2210      	movs	r2, #16
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f002 f834 	bl	80027e4 <memset>
			Kernel_recv_msg(KernelMsgQ_Task1, &cmdlen, 1);
 800077c:	f107 0316 	add.w	r3, r7, #22
 8000780:	2201      	movs	r2, #1
 8000782:	4619      	mov	r1, r3
 8000784:	2001      	movs	r0, #1
 8000786:	f001 fdbb 	bl	8002300 <Kernel_recv_msg>
			Kernel_recv_msg(KernelMsgQ_Task1, cmd, cmdlen);
 800078a:	7dbb      	ldrb	r3, [r7, #22]
 800078c:	461a      	mov	r2, r3
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	2001      	movs	r0, #1
 8000794:	f001 fdb4 	bl	8002300 <Kernel_recv_msg>
			vPrintString("\r\nRecv Cmd : ");
 8000798:	480f      	ldr	r0, [pc, #60]	; (80007d8 <User_task1+0xb8>)
 800079a:	f000 fa8b 	bl	8000cb4 <vPrintString>
			vPrintString((const char*)cmd);
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 fa87 	bl	8000cb4 <vPrintString>
			DispStr(1, 0, "                ");
 80007a6:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <User_task1+0xb4>)
 80007a8:	2100      	movs	r1, #0
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff fe56 	bl	800045c <DispStr>
			DispStr(1, 0, (char*)cmd);
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	461a      	mov	r2, r3
 80007b4:	2100      	movs	r1, #0
 80007b6:	2001      	movs	r0, #1
 80007b8:	f7ff fe50 	bl	800045c <DispStr>
			break;
 80007bc:	e002      	b.n	80007c4 <User_task1+0xa4>
		case KernelEventFlag_Empty:
			break;
 80007be:	bf00      	nop
 80007c0:	e000      	b.n	80007c4 <User_task1+0xa4>
		default:
			break;
 80007c2:	bf00      	nop
		}
		Kernel_yield();
 80007c4:	f001 fd02 	bl	80021cc <Kernel_yield>
	while(true){
 80007c8:	e7c8      	b.n	800075c <User_task1+0x3c>
 80007ca:	bf00      	nop
 80007cc:	080029e4 	.word	0x080029e4
 80007d0:	080029f4 	.word	0x080029f4
 80007d4:	08002a08 	.word	0x08002a08
 80007d8:	08002a1c 	.word	0x08002a1c

080007dc <User_task2>:
	}
}

void User_task2(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	vPrintString("User task #2 \r\n");
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <User_task2+0x1c>)
 80007e2:	f000 fa67 	bl	8000cb4 <vPrintString>

	while(true){
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 80007e6:	2140      	movs	r1, #64	; 0x40
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <User_task2+0x20>)
 80007ea:	f000 fd81 	bl	80012f0 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80007ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007f2:	f000 f805 	bl	8000800 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 80007f6:	e7f6      	b.n	80007e6 <User_task2+0xa>
 80007f8:	08002a2c 	.word	0x08002a2c
 80007fc:	40010c00 	.word	0x40010c00

08000800 <HAL_Delay>:
		//Kernel_yield();
	}
}

void HAL_Delay(uint32_t Delay)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000808:	f000 fae8 	bl	8000ddc <HAL_GetTick>
 800080c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000818:	d008      	beq.n	800082c <HAL_Delay+0x2c>
  {
    wait += (uint32_t)(uwTickFreq);
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <HAL_Delay+0x48>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	461a      	mov	r2, r3
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4413      	add	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000826:	e001      	b.n	800082c <HAL_Delay+0x2c>
  {
	  Kernel_yield();
 8000828:	f001 fcd0 	bl	80021cc <Kernel_yield>
  while ((HAL_GetTick() - tickstart) < wait)
 800082c:	f000 fad6 	bl	8000ddc <HAL_GetTick>
 8000830:	4602      	mov	r2, r0
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	429a      	cmp	r2, r3
 800083a:	d8f5      	bhi.n	8000828 <HAL_Delay+0x28>
  }
}
 800083c:	bf00      	nop
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000008 	.word	0x20000008

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	e7fe      	b.n	8000854 <Error_Handler+0x8>
	...

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <HAL_MspInit+0x5c>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <HAL_MspInit+0x5c>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6193      	str	r3, [r2, #24]
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_MspInit+0x5c>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <HAL_MspInit+0x5c>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <HAL_MspInit+0x5c>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000880:	61d3      	str	r3, [r2, #28]
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <HAL_MspInit+0x5c>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <HAL_MspInit+0x60>)
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <HAL_MspInit+0x60>)
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40010000 	.word	0x40010000

080008bc <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	b2db      	uxtb	r3, r3
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80008e0:	78fa      	ldrb	r2, [r7, #3]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	605a      	str	r2, [r3, #4]
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr

0800091a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr

08000926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr

08000932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000936:	f000 fa3f 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint8_t ch = LL_USART_ReceiveData8(USART1);
 8000946:	480b      	ldr	r0, [pc, #44]	; (8000974 <USART1_IRQHandler+0x34>)
 8000948:	f7ff ffb8 	bl	80008bc <LL_USART_ReceiveData8>
 800094c:	4603      	mov	r3, r0
 800094e:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART1, ch);
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4619      	mov	r1, r3
 8000954:	4807      	ldr	r0, [pc, #28]	; (8000974 <USART1_IRQHandler+0x34>)
 8000956:	f7ff ffbd 	bl	80008d4 <LL_USART_TransmitData8>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	Kernel_send_msg(KernelMsgQ_Task0, &ch, 1);
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	2201      	movs	r2, #1
 800095e:	4619      	mov	r1, r3
 8000960:	2000      	movs	r0, #0
 8000962:	f001 fc92 	bl	800228a <Kernel_send_msg>
	Kernel_send_events(KernelEventFlag_UartIn);
 8000966:	2001      	movs	r0, #1
 8000968:	f001 fc36 	bl	80021d8 <Kernel_send_events>
  /* USER CODE END USART1_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40013800 	.word	0x40013800

08000978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <_sbrk+0x5c>)
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <_sbrk+0x60>)
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d102      	bne.n	800099a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <_sbrk+0x64>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <_sbrk+0x68>)
 8000998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <_sbrk+0x64>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d207      	bcs.n	80009b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a8:	f001 feea 	bl	8002780 <__errno>
 80009ac:	4603      	mov	r3, r0
 80009ae:	220c      	movs	r2, #12
 80009b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	e009      	b.n	80009cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <_sbrk+0x64>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <_sbrk+0x64>)
 80009c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ca:	68fb      	ldr	r3, [r7, #12]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20005000 	.word	0x20005000
 80009d8:	00000400 	.word	0x00000400
 80009dc:	20000090 	.word	0x20000090
 80009e0:	200006f0 	.word	0x200006f0

080009e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <__NVIC_GetPriorityGrouping+0x18>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	f003 0307 	and.w	r3, r3, #7
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	db0b      	blt.n	8000a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	f003 021f 	and.w	r2, r3, #31
 8000a24:	4906      	ldr	r1, [pc, #24]	; (8000a40 <__NVIC_EnableIRQ+0x34>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	095b      	lsrs	r3, r3, #5
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	e000e100 	.word	0xe000e100

08000a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	db0a      	blt.n	8000a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	490c      	ldr	r1, [pc, #48]	; (8000a90 <__NVIC_SetPriority+0x4c>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	0112      	lsls	r2, r2, #4
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	440b      	add	r3, r1
 8000a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a6c:	e00a      	b.n	8000a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4908      	ldr	r1, [pc, #32]	; (8000a94 <__NVIC_SetPriority+0x50>)
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	0112      	lsls	r2, r2, #4
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	440b      	add	r3, r1
 8000a82:	761a      	strb	r2, [r3, #24]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000e100 	.word	0xe000e100
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	; 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	f1c3 0307 	rsb	r3, r3, #7
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	bf28      	it	cs
 8000ab6:	2304      	movcs	r3, #4
 8000ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3304      	adds	r3, #4
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d902      	bls.n	8000ac8 <NVIC_EncodePriority+0x30>
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3b03      	subs	r3, #3
 8000ac6:	e000      	b.n	8000aca <NVIC_EncodePriority+0x32>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	401a      	ands	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aea:	43d9      	mvns	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	4313      	orrs	r3, r2
         );
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3724      	adds	r7, #36	; 0x24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <LL_USART_Enable>:
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	60da      	str	r2, [r3, #12]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <LL_USART_ConfigAsyncMode>:
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	691b      	ldr	r3, [r3, #16]
 8000b26:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	615a      	str	r2, [r3, #20]
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <LL_USART_IsActiveFlag_TXE>:
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b54:	2b80      	cmp	r3, #128	; 0x80
 8000b56:	bf0c      	ite	eq
 8000b58:	2301      	moveq	r3, #1
 8000b5a:	2300      	movne	r3, #0
 8000b5c:	b2db      	uxtb	r3, r3
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <LL_USART_TransmitData8>:
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000b74:	78fa      	ldrb	r2, [r7, #3]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	605a      	str	r2, [r3, #4]
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b8e:	699a      	ldr	r2, [r3, #24]
 8000b90:	4907      	ldr	r1, [pc, #28]	; (8000bb0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b9a:	699a      	ldr	r2, [r3, #24]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08c      	sub	sp, #48	; 0x30
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]
 8000bca:	615a      	str	r2, [r3, #20]
 8000bcc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	463b      	mov	r3, r7
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000bdc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000be0:	f7ff ffd0 	bl	8000b84 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000be4:	2004      	movs	r0, #4
 8000be6:	f7ff ffcd 	bl	8000b84 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000bea:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <MX_USART1_UART_Init+0xc0>)
 8000bec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000bee:	2309      	movs	r3, #9
 8000bf0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	481e      	ldr	r0, [pc, #120]	; (8000c78 <MX_USART1_UART_Init+0xc4>)
 8000c00:	f001 f826 	bl	8001c50 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000c04:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <MX_USART1_UART_Init+0xc8>)
 8000c06:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4819      	ldr	r0, [pc, #100]	; (8000c78 <MX_USART1_UART_Init+0xc4>)
 8000c12:	f001 f81d 	bl	8001c50 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c16:	f7ff feeb 	bl	80009f0 <__NVIC_GetPriorityGrouping>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff39 	bl	8000a98 <NVIC_EncodePriority>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4619      	mov	r1, r3
 8000c2a:	2025      	movs	r0, #37	; 0x25
 8000c2c:	f7ff ff0a 	bl	8000a44 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000c30:	2025      	movs	r0, #37	; 0x25
 8000c32:	f7ff feeb 	bl	8000a0c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000c36:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000c3a:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000c48:	230c      	movs	r3, #12
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4809      	ldr	r0, [pc, #36]	; (8000c80 <MX_USART1_UART_Init+0xcc>)
 8000c5c:	f001 fa06 	bl	800206c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000c60:	4807      	ldr	r0, [pc, #28]	; (8000c80 <MX_USART1_UART_Init+0xcc>)
 8000c62:	f7ff ff5a 	bl	8000b1a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000c66:	4806      	ldr	r0, [pc, #24]	; (8000c80 <MX_USART1_UART_Init+0xcc>)
 8000c68:	f7ff ff48 	bl	8000afc <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	3730      	adds	r7, #48	; 0x30
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	04020002 	.word	0x04020002
 8000c78:	40010800 	.word	0x40010800
 8000c7c:	04040004 	.word	0x04040004
 8000c80:	40013800 	.word	0x40013800

08000c84 <vPrintChar>:

/* USER CODE BEGIN 1 */
void vPrintChar(const char cCharacter)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
	while( !LL_USART_IsActiveFlag_TXE(USART1) );
 8000c8e:	bf00      	nop
 8000c90:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <vPrintChar+0x2c>)
 8000c92:	f7ff ff57 	bl	8000b44 <LL_USART_IsActiveFlag_TXE>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d0f9      	beq.n	8000c90 <vPrintChar+0xc>
	LL_USART_TransmitData8(USART1, (uint8_t)cCharacter);
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <vPrintChar+0x2c>)
 8000ca2:	f7ff ff61 	bl	8000b68 <LL_USART_TransmitData8>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40013800 	.word	0x40013800

08000cb4 <vPrintString>:

void vPrintString(const char* pcString)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	while( *pcString != '\0' ){
 8000cbc:	e007      	b.n	8000cce <vPrintString+0x1a>
		vPrintChar(*pcString);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ffde 	bl	8000c84 <vPrintChar>
		pcString++;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	607b      	str	r3, [r7, #4]
	while( *pcString != '\0' ){
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1f3      	bne.n	8000cbe <vPrintString+0xa>
	}
}
 8000cd6:	bf00      	nop
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ce0:	f7ff fe80 	bl	80009e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce4:	480b      	ldr	r0, [pc, #44]	; (8000d14 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ce6:	490c      	ldr	r1, [pc, #48]	; (8000d18 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ce8:	4a0c      	ldr	r2, [pc, #48]	; (8000d1c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cfc:	4c09      	ldr	r4, [pc, #36]	; (8000d24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d0a:	f001 fd3f 	bl	800278c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d0e:	f7ff fc07 	bl	8000520 <main>
  bx lr
 8000d12:	4770      	bx	lr
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d1c:	08002a70 	.word	0x08002a70
  ldr r2, =_sbss
 8000d20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d24:	200006ec 	.word	0x200006ec

08000d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC1_2_IRQHandler>
	...

08000d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_Init+0x28>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_Init+0x28>)
 8000d36:	f043 0310 	orr.w	r3, r3, #16
 8000d3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f907 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	200f      	movs	r0, #15
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fd86 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40022000 	.word	0x40022000

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f911 	bl	8000f9e <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f8e7 	bl	8000f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	; (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_IncTick+0x1c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a03      	ldr	r2, [pc, #12]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000094 	.word	0x20000094

08000ddc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b02      	ldr	r3, [pc, #8]	; (8000dec <HAL_GetTick+0x10>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	20000094 	.word	0x20000094

08000df0 <__NVIC_SetPriorityGrouping>:
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_GetPriorityGrouping>:
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_SetPriority>:
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	db0a      	blt.n	8000e7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <__NVIC_SetPriority+0x4c>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	0112      	lsls	r2, r2, #4
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	440b      	add	r3, r1
 8000e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e7c:	e00a      	b.n	8000e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4908      	ldr	r1, [pc, #32]	; (8000ea4 <__NVIC_SetPriority+0x50>)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	3b04      	subs	r3, #4
 8000e8c:	0112      	lsls	r2, r2, #4
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	440b      	add	r3, r1
 8000e92:	761a      	strb	r2, [r3, #24]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <NVIC_EncodePriority>:
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f1c3 0307 	rsb	r3, r3, #7
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	bf28      	it	cs
 8000ec6:	2304      	movcs	r3, #4
 8000ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	2b06      	cmp	r3, #6
 8000ed0:	d902      	bls.n	8000ed8 <NVIC_EncodePriority+0x30>
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3b03      	subs	r3, #3
 8000ed6:	e000      	b.n	8000eda <NVIC_EncodePriority+0x32>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	401a      	ands	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	43d9      	mvns	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	4313      	orrs	r3, r2
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f1c:	d301      	bcc.n	8000f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00f      	b.n	8000f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <SysTick_Config+0x40>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f7ff ff90 	bl	8000e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <SysTick_Config+0x40>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <SysTick_Config+0x40>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff49 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f78:	f7ff ff5e 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	f7ff ff90 	bl	8000ea8 <NVIC_EncodePriority>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff5f 	bl	8000e54 <__NVIC_SetPriority>
}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffb0 	bl	8000f0c <SysTick_Config>
 8000fac:	4603      	mov	r3, r0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b08b      	sub	sp, #44	; 0x2c
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fca:	e169      	b.n	80012a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	f040 8158 	bne.w	800129a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	4a9a      	ldr	r2, [pc, #616]	; (8001258 <HAL_GPIO_Init+0x2a0>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d05e      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
 8000ff4:	4a98      	ldr	r2, [pc, #608]	; (8001258 <HAL_GPIO_Init+0x2a0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d875      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 8000ffa:	4a98      	ldr	r2, [pc, #608]	; (800125c <HAL_GPIO_Init+0x2a4>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d058      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
 8001000:	4a96      	ldr	r2, [pc, #600]	; (800125c <HAL_GPIO_Init+0x2a4>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d86f      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 8001006:	4a96      	ldr	r2, [pc, #600]	; (8001260 <HAL_GPIO_Init+0x2a8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d052      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
 800100c:	4a94      	ldr	r2, [pc, #592]	; (8001260 <HAL_GPIO_Init+0x2a8>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d869      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 8001012:	4a94      	ldr	r2, [pc, #592]	; (8001264 <HAL_GPIO_Init+0x2ac>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d04c      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
 8001018:	4a92      	ldr	r2, [pc, #584]	; (8001264 <HAL_GPIO_Init+0x2ac>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d863      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 800101e:	4a92      	ldr	r2, [pc, #584]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d046      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
 8001024:	4a90      	ldr	r2, [pc, #576]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d85d      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 800102a:	2b12      	cmp	r3, #18
 800102c:	d82a      	bhi.n	8001084 <HAL_GPIO_Init+0xcc>
 800102e:	2b12      	cmp	r3, #18
 8001030:	d859      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 8001032:	a201      	add	r2, pc, #4	; (adr r2, 8001038 <HAL_GPIO_Init+0x80>)
 8001034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001038:	080010b3 	.word	0x080010b3
 800103c:	0800108d 	.word	0x0800108d
 8001040:	0800109f 	.word	0x0800109f
 8001044:	080010e1 	.word	0x080010e1
 8001048:	080010e7 	.word	0x080010e7
 800104c:	080010e7 	.word	0x080010e7
 8001050:	080010e7 	.word	0x080010e7
 8001054:	080010e7 	.word	0x080010e7
 8001058:	080010e7 	.word	0x080010e7
 800105c:	080010e7 	.word	0x080010e7
 8001060:	080010e7 	.word	0x080010e7
 8001064:	080010e7 	.word	0x080010e7
 8001068:	080010e7 	.word	0x080010e7
 800106c:	080010e7 	.word	0x080010e7
 8001070:	080010e7 	.word	0x080010e7
 8001074:	080010e7 	.word	0x080010e7
 8001078:	080010e7 	.word	0x080010e7
 800107c:	08001095 	.word	0x08001095
 8001080:	080010a9 	.word	0x080010a9
 8001084:	4a79      	ldr	r2, [pc, #484]	; (800126c <HAL_GPIO_Init+0x2b4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d013      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800108a:	e02c      	b.n	80010e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	623b      	str	r3, [r7, #32]
          break;
 8001092:	e029      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	3304      	adds	r3, #4
 800109a:	623b      	str	r3, [r7, #32]
          break;
 800109c:	e024      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	3308      	adds	r3, #8
 80010a4:	623b      	str	r3, [r7, #32]
          break;
 80010a6:	e01f      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	330c      	adds	r3, #12
 80010ae:	623b      	str	r3, [r7, #32]
          break;
 80010b0:	e01a      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d102      	bne.n	80010c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010ba:	2304      	movs	r3, #4
 80010bc:	623b      	str	r3, [r7, #32]
          break;
 80010be:	e013      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d105      	bne.n	80010d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010c8:	2308      	movs	r3, #8
 80010ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	611a      	str	r2, [r3, #16]
          break;
 80010d2:	e009      	b.n	80010e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010d4:	2308      	movs	r3, #8
 80010d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69fa      	ldr	r2, [r7, #28]
 80010dc:	615a      	str	r2, [r3, #20]
          break;
 80010de:	e003      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
          break;
 80010e4:	e000      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          break;
 80010e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	2bff      	cmp	r3, #255	; 0xff
 80010ec:	d801      	bhi.n	80010f2 <HAL_GPIO_Init+0x13a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	e001      	b.n	80010f6 <HAL_GPIO_Init+0x13e>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3304      	adds	r3, #4
 80010f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	2bff      	cmp	r3, #255	; 0xff
 80010fc:	d802      	bhi.n	8001104 <HAL_GPIO_Init+0x14c>
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	e002      	b.n	800110a <HAL_GPIO_Init+0x152>
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	3b08      	subs	r3, #8
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	210f      	movs	r1, #15
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	fa01 f303 	lsl.w	r3, r1, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	401a      	ands	r2, r3
 800111c:	6a39      	ldr	r1, [r7, #32]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	fa01 f303 	lsl.w	r3, r1, r3
 8001124:	431a      	orrs	r2, r3
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 80b1 	beq.w	800129a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001138:	4b4d      	ldr	r3, [pc, #308]	; (8001270 <HAL_GPIO_Init+0x2b8>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a4c      	ldr	r2, [pc, #304]	; (8001270 <HAL_GPIO_Init+0x2b8>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b4a      	ldr	r3, [pc, #296]	; (8001270 <HAL_GPIO_Init+0x2b8>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001150:	4a48      	ldr	r2, [pc, #288]	; (8001274 <HAL_GPIO_Init+0x2bc>)
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	4013      	ands	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a40      	ldr	r2, [pc, #256]	; (8001278 <HAL_GPIO_Init+0x2c0>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d013      	beq.n	80011a4 <HAL_GPIO_Init+0x1ec>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a3f      	ldr	r2, [pc, #252]	; (800127c <HAL_GPIO_Init+0x2c4>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d00d      	beq.n	80011a0 <HAL_GPIO_Init+0x1e8>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a3e      	ldr	r2, [pc, #248]	; (8001280 <HAL_GPIO_Init+0x2c8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d007      	beq.n	800119c <HAL_GPIO_Init+0x1e4>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a3d      	ldr	r2, [pc, #244]	; (8001284 <HAL_GPIO_Init+0x2cc>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d101      	bne.n	8001198 <HAL_GPIO_Init+0x1e0>
 8001194:	2303      	movs	r3, #3
 8001196:	e006      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 8001198:	2304      	movs	r3, #4
 800119a:	e004      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 800119c:	2302      	movs	r3, #2
 800119e:	e002      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 80011a4:	2300      	movs	r3, #0
 80011a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011a8:	f002 0203 	and.w	r2, r2, #3
 80011ac:	0092      	lsls	r2, r2, #2
 80011ae:	4093      	lsls	r3, r2
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011b6:	492f      	ldr	r1, [pc, #188]	; (8001274 <HAL_GPIO_Init+0x2bc>)
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011d0:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	492c      	ldr	r1, [pc, #176]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	608b      	str	r3, [r1, #8]
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011de:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	4928      	ldr	r1, [pc, #160]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d006      	beq.n	8001206 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 80011fa:	68da      	ldr	r2, [r3, #12]
 80011fc:	4922      	ldr	r1, [pc, #136]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	60cb      	str	r3, [r1, #12]
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	43db      	mvns	r3, r3
 800120e:	491e      	ldr	r1, [pc, #120]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 8001210:	4013      	ands	r3, r2
 8001212:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	4918      	ldr	r1, [pc, #96]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	604b      	str	r3, [r1, #4]
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	43db      	mvns	r3, r3
 8001236:	4914      	ldr	r1, [pc, #80]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 8001238:	4013      	ands	r3, r2
 800123a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d021      	beq.n	800128c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	490e      	ldr	r1, [pc, #56]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	600b      	str	r3, [r1, #0]
 8001254:	e021      	b.n	800129a <HAL_GPIO_Init+0x2e2>
 8001256:	bf00      	nop
 8001258:	10320000 	.word	0x10320000
 800125c:	10310000 	.word	0x10310000
 8001260:	10220000 	.word	0x10220000
 8001264:	10210000 	.word	0x10210000
 8001268:	10120000 	.word	0x10120000
 800126c:	10110000 	.word	0x10110000
 8001270:	40021000 	.word	0x40021000
 8001274:	40010000 	.word	0x40010000
 8001278:	40010800 	.word	0x40010800
 800127c:	40010c00 	.word	0x40010c00
 8001280:	40011000 	.word	0x40011000
 8001284:	40011400 	.word	0x40011400
 8001288:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_GPIO_Init+0x304>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	43db      	mvns	r3, r3
 8001294:	4909      	ldr	r1, [pc, #36]	; (80012bc <HAL_GPIO_Init+0x304>)
 8001296:	4013      	ands	r3, r2
 8001298:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	3301      	adds	r3, #1
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	fa22 f303 	lsr.w	r3, r2, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f47f ae8e 	bne.w	8000fcc <HAL_GPIO_Init+0x14>
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	372c      	adds	r7, #44	; 0x2c
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	40010400 	.word	0x40010400

080012c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]
 80012cc:	4613      	mov	r3, r2
 80012ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012d0:	787b      	ldrb	r3, [r7, #1]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d6:	887a      	ldrh	r2, [r7, #2]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012dc:	e003      	b.n	80012e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	041a      	lsls	r2, r3, #16
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	611a      	str	r2, [r3, #16]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4013      	ands	r3, r2
 8001308:	041a      	lsls	r2, r3, #16
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43d9      	mvns	r1, r3
 800130e:	887b      	ldrh	r3, [r7, #2]
 8001310:	400b      	ands	r3, r1
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	611a      	str	r2, [r3, #16]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
	...

08001324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e272      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8087 	beq.w	8001452 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001344:	4b92      	ldr	r3, [pc, #584]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	2b04      	cmp	r3, #4
 800134e:	d00c      	beq.n	800136a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001350:	4b8f      	ldr	r3, [pc, #572]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 030c 	and.w	r3, r3, #12
 8001358:	2b08      	cmp	r3, #8
 800135a:	d112      	bne.n	8001382 <HAL_RCC_OscConfig+0x5e>
 800135c:	4b8c      	ldr	r3, [pc, #560]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001368:	d10b      	bne.n	8001382 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136a:	4b89      	ldr	r3, [pc, #548]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d06c      	beq.n	8001450 <HAL_RCC_OscConfig+0x12c>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d168      	bne.n	8001450 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e24c      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138a:	d106      	bne.n	800139a <HAL_RCC_OscConfig+0x76>
 800138c:	4b80      	ldr	r3, [pc, #512]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a7f      	ldr	r2, [pc, #508]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	e02e      	b.n	80013f8 <HAL_RCC_OscConfig+0xd4>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10c      	bne.n	80013bc <HAL_RCC_OscConfig+0x98>
 80013a2:	4b7b      	ldr	r3, [pc, #492]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a7a      	ldr	r2, [pc, #488]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	4b78      	ldr	r3, [pc, #480]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a77      	ldr	r2, [pc, #476]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e01d      	b.n	80013f8 <HAL_RCC_OscConfig+0xd4>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0xbc>
 80013c6:	4b72      	ldr	r3, [pc, #456]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a71      	ldr	r2, [pc, #452]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b6f      	ldr	r3, [pc, #444]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a6e      	ldr	r2, [pc, #440]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e00b      	b.n	80013f8 <HAL_RCC_OscConfig+0xd4>
 80013e0:	4b6b      	ldr	r3, [pc, #428]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a6a      	ldr	r2, [pc, #424]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b68      	ldr	r3, [pc, #416]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a67      	ldr	r2, [pc, #412]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d013      	beq.n	8001428 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fcec 	bl	8000ddc <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fce8 	bl	8000ddc <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	; 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e200      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0xe4>
 8001426:	e014      	b.n	8001452 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fcd8 	bl	8000ddc <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff fcd4 	bl	8000ddc <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b64      	cmp	r3, #100	; 0x64
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e1ec      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001442:	4b53      	ldr	r3, [pc, #332]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x10c>
 800144e:	e000      	b.n	8001452 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d063      	beq.n	8001526 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800145e:	4b4c      	ldr	r3, [pc, #304]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00b      	beq.n	8001482 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800146a:	4b49      	ldr	r3, [pc, #292]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b08      	cmp	r3, #8
 8001474:	d11c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x18c>
 8001476:	4b46      	ldr	r3, [pc, #280]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d116      	bne.n	80014b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001482:	4b43      	ldr	r3, [pc, #268]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <HAL_RCC_OscConfig+0x176>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d001      	beq.n	800149a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e1c0      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149a:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4939      	ldr	r1, [pc, #228]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ae:	e03a      	b.n	8001526 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d020      	beq.n	80014fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b8:	4b36      	ldr	r3, [pc, #216]	; (8001594 <HAL_RCC_OscConfig+0x270>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f7ff fc8d 	bl	8000ddc <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c6:	f7ff fc89 	bl	8000ddc <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e1a1      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d8:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e4:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	4927      	ldr	r1, [pc, #156]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]
 80014f8:	e015      	b.n	8001526 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <HAL_RCC_OscConfig+0x270>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fc6c 	bl	8000ddc <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001508:	f7ff fc68 	bl	8000ddc <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e180      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151a:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d03a      	beq.n	80015a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d019      	beq.n	800156e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <HAL_RCC_OscConfig+0x274>)
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001540:	f7ff fc4c 	bl	8000ddc <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001548:	f7ff fc48 	bl	8000ddc <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e160      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001566:	2001      	movs	r0, #1
 8001568:	f000 fa9c 	bl	8001aa4 <RCC_Delay>
 800156c:	e01c      	b.n	80015a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_RCC_OscConfig+0x274>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001574:	f7ff fc32 	bl	8000ddc <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157a:	e00f      	b.n	800159c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157c:	f7ff fc2e 	bl	8000ddc <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d908      	bls.n	800159c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e146      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	42420000 	.word	0x42420000
 8001598:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159c:	4b92      	ldr	r3, [pc, #584]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1e9      	bne.n	800157c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80a6 	beq.w	8001702 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ba:	4b8b      	ldr	r3, [pc, #556]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10d      	bne.n	80015e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c6:	4b88      	ldr	r3, [pc, #544]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	4a87      	ldr	r2, [pc, #540]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	61d3      	str	r3, [r2, #28]
 80015d2:	4b85      	ldr	r3, [pc, #532]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015de:	2301      	movs	r3, #1
 80015e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e2:	4b82      	ldr	r3, [pc, #520]	; (80017ec <HAL_RCC_OscConfig+0x4c8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d118      	bne.n	8001620 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ee:	4b7f      	ldr	r3, [pc, #508]	; (80017ec <HAL_RCC_OscConfig+0x4c8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a7e      	ldr	r2, [pc, #504]	; (80017ec <HAL_RCC_OscConfig+0x4c8>)
 80015f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fa:	f7ff fbef 	bl	8000ddc <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001602:	f7ff fbeb 	bl	8000ddc <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b64      	cmp	r3, #100	; 0x64
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e103      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	4b75      	ldr	r3, [pc, #468]	; (80017ec <HAL_RCC_OscConfig+0x4c8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d106      	bne.n	8001636 <HAL_RCC_OscConfig+0x312>
 8001628:	4b6f      	ldr	r3, [pc, #444]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a6e      	ldr	r2, [pc, #440]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	e02d      	b.n	8001692 <HAL_RCC_OscConfig+0x36e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x334>
 800163e:	4b6a      	ldr	r3, [pc, #424]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4a69      	ldr	r2, [pc, #420]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	6213      	str	r3, [r2, #32]
 800164a:	4b67      	ldr	r3, [pc, #412]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4a66      	ldr	r2, [pc, #408]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	f023 0304 	bic.w	r3, r3, #4
 8001654:	6213      	str	r3, [r2, #32]
 8001656:	e01c      	b.n	8001692 <HAL_RCC_OscConfig+0x36e>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b05      	cmp	r3, #5
 800165e:	d10c      	bne.n	800167a <HAL_RCC_OscConfig+0x356>
 8001660:	4b61      	ldr	r3, [pc, #388]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	4a60      	ldr	r2, [pc, #384]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	6213      	str	r3, [r2, #32]
 800166c:	4b5e      	ldr	r3, [pc, #376]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4a5d      	ldr	r2, [pc, #372]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6213      	str	r3, [r2, #32]
 8001678:	e00b      	b.n	8001692 <HAL_RCC_OscConfig+0x36e>
 800167a:	4b5b      	ldr	r3, [pc, #364]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4a5a      	ldr	r2, [pc, #360]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	6213      	str	r3, [r2, #32]
 8001686:	4b58      	ldr	r3, [pc, #352]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	4a57      	ldr	r2, [pc, #348]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	f023 0304 	bic.w	r3, r3, #4
 8001690:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d015      	beq.n	80016c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169a:	f7ff fb9f 	bl	8000ddc <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7ff fb9b 	bl	8000ddc <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e0b1      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b8:	4b4b      	ldr	r3, [pc, #300]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0ee      	beq.n	80016a2 <HAL_RCC_OscConfig+0x37e>
 80016c4:	e014      	b.n	80016f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c6:	f7ff fb89 	bl	8000ddc <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016cc:	e00a      	b.n	80016e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f7ff fb85 	bl	8000ddc <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016dc:	4293      	cmp	r3, r2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e09b      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e4:	4b40      	ldr	r3, [pc, #256]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1ee      	bne.n	80016ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d105      	bne.n	8001702 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f6:	4b3c      	ldr	r3, [pc, #240]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a3b      	ldr	r2, [pc, #236]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001700:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8087 	beq.w	800181a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800170c:	4b36      	ldr	r3, [pc, #216]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b08      	cmp	r3, #8
 8001716:	d061      	beq.n	80017dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d146      	bne.n	80017ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001720:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <HAL_RCC_OscConfig+0x4cc>)
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7ff fb59 	bl	8000ddc <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172e:	f7ff fb55 	bl	8000ddc <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e06d      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001740:	4b29      	ldr	r3, [pc, #164]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f0      	bne.n	800172e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001754:	d108      	bne.n	8001768 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001756:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	4921      	ldr	r1, [pc, #132]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a19      	ldr	r1, [r3, #32]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	430b      	orrs	r3, r1
 800177a:	491b      	ldr	r1, [pc, #108]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_RCC_OscConfig+0x4cc>)
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001786:	f7ff fb29 	bl	8000ddc <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178e:	f7ff fb25 	bl	8000ddc <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e03d      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x46a>
 80017ac:	e035      	b.n	800181a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <HAL_RCC_OscConfig+0x4cc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fb12 	bl	8000ddc <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017bc:	f7ff fb0e 	bl	8000ddc <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e026      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x498>
 80017da:	e01e      	b.n	800181a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d107      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e019      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40007000 	.word	0x40007000
 80017f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_RCC_OscConfig+0x500>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	429a      	cmp	r2, r3
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001812:	429a      	cmp	r2, r3
 8001814:	d001      	beq.n	800181a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000

08001828 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0d0      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800183c:	4b6a      	ldr	r3, [pc, #424]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d910      	bls.n	800186c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b67      	ldr	r3, [pc, #412]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 0207 	bic.w	r2, r3, #7
 8001852:	4965      	ldr	r1, [pc, #404]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b63      	ldr	r3, [pc, #396]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0b8      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d020      	beq.n	80018ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001884:	4b59      	ldr	r3, [pc, #356]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	4a58      	ldr	r2, [pc, #352]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800188e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800189c:	4b53      	ldr	r3, [pc, #332]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	4a52      	ldr	r2, [pc, #328]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a8:	4b50      	ldr	r3, [pc, #320]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	494d      	ldr	r1, [pc, #308]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d040      	beq.n	8001948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d107      	bne.n	80018de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	4b47      	ldr	r3, [pc, #284]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d115      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e07f      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e6:	4b41      	ldr	r3, [pc, #260]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e073      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f6:	4b3d      	ldr	r3, [pc, #244]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e06b      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001906:	4b39      	ldr	r3, [pc, #228]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f023 0203 	bic.w	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4936      	ldr	r1, [pc, #216]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001918:	f7ff fa60 	bl	8000ddc <HAL_GetTick>
 800191c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191e:	e00a      	b.n	8001936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001920:	f7ff fa5c 	bl	8000ddc <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	; 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e053      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001936:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 020c 	and.w	r2, r3, #12
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	429a      	cmp	r2, r3
 8001946:	d1eb      	bne.n	8001920 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001948:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d210      	bcs.n	8001978 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 0207 	bic.w	r2, r3, #7
 800195e:	4922      	ldr	r1, [pc, #136]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e032      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4916      	ldr	r1, [pc, #88]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	4313      	orrs	r3, r2
 8001994:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d009      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	490e      	ldr	r1, [pc, #56]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019b6:	f000 f821 	bl	80019fc <HAL_RCC_GetSysClockFreq>
 80019ba:	4602      	mov	r2, r0
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	490a      	ldr	r1, [pc, #40]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80019c8:	5ccb      	ldrb	r3, [r1, r3]
 80019ca:	fa22 f303 	lsr.w	r3, r2, r3
 80019ce:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <HAL_RCC_ClockConfig+0x1cc>)
 80019d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_RCC_ClockConfig+0x1d0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff f9be 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40022000 	.word	0x40022000
 80019ec:	40021000 	.word	0x40021000
 80019f0:	08002a3c 	.word	0x08002a3c
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20000004 	.word	0x20000004

080019fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a16:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d002      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x30>
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d003      	beq.n	8001a32 <HAL_RCC_GetSysClockFreq+0x36>
 8001a2a:	e027      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a2e:	613b      	str	r3, [r7, #16]
      break;
 8001a30:	e027      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	0c9b      	lsrs	r3, r3, #18
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a3c:	5cd3      	ldrb	r3, [r2, r3]
 8001a3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d010      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	0c5b      	lsrs	r3, r3, #17
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	4a11      	ldr	r2, [pc, #68]	; (8001a9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a56:	5cd3      	ldrb	r3, [r2, r3]
 8001a58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a5e:	fb03 f202 	mul.w	r2, r3, r2
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e004      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a0c      	ldr	r2, [pc, #48]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	613b      	str	r3, [r7, #16]
      break;
 8001a7a:	e002      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a7e:	613b      	str	r3, [r7, #16]
      break;
 8001a80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a82:	693b      	ldr	r3, [r7, #16]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	371c      	adds	r7, #28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000
 8001a94:	007a1200 	.word	0x007a1200
 8001a98:	08002a54 	.word	0x08002a54
 8001a9c:	08002a64 	.word	0x08002a64
 8001aa0:	003d0900 	.word	0x003d0900

08001aa4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <RCC_Delay+0x34>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <RCC_Delay+0x38>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	0a5b      	lsrs	r3, r3, #9
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	fb02 f303 	mul.w	r3, r2, r3
 8001abe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ac0:	bf00      	nop
  }
  while (Delay --);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	1e5a      	subs	r2, r3, #1
 8001ac6:	60fa      	str	r2, [r7, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f9      	bne.n	8001ac0 <RCC_Delay+0x1c>
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	10624dd3 	.word	0x10624dd3

08001ae0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001ae0:	b490      	push	{r4, r7}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	461a      	mov	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	0e1b      	lsrs	r3, r3, #24
 8001af4:	4413      	add	r3, r2
 8001af6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001af8:	6822      	ldr	r2, [r4, #0]
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	fa93 f3a3 	rbit	r3, r3
 8001b04:	613b      	str	r3, [r7, #16]
  return result;
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	fab3 f383 	clz	r3, r3
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	210f      	movs	r1, #15
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	401a      	ands	r2, r3
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa93 f3a3 	rbit	r3, r3
 8001b24:	61bb      	str	r3, [r7, #24]
  return result;
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	fab3 f383 	clz	r3, r3
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	4313      	orrs	r3, r2
 8001b38:	6023      	str	r3, [r4, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	3720      	adds	r7, #32
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc90      	pop	{r4, r7}
 8001b42:	4770      	bx	lr

08001b44 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001b44:	b490      	push	{r4, r7}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	461a      	mov	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	0e1b      	lsrs	r3, r3, #24
 8001b58:	4413      	add	r3, r2
 8001b5a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001b5c:	6822      	ldr	r2, [r4, #0]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	fa93 f3a3 	rbit	r3, r3
 8001b68:	613b      	str	r3, [r7, #16]
  return result;
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	fab3 f383 	clz	r3, r3
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	2103      	movs	r1, #3
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	401a      	ands	r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	61bb      	str	r3, [r7, #24]
  return result;
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	fab3 f383 	clz	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8001b9e:	bf00      	nop
 8001ba0:	3720      	adds	r7, #32
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc90      	pop	{r4, r7}
 8001ba6:	4770      	bx	lr

08001ba8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8001ba8:	b490      	push	{r4, r7}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	0e1b      	lsrs	r3, r3, #24
 8001bbc:	4413      	add	r3, r2
 8001bbe:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001bc0:	6822      	ldr	r2, [r4, #0]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	613b      	str	r3, [r7, #16]
  return result;
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	2104      	movs	r1, #4
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	401a      	ands	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa93 f3a3 	rbit	r3, r3
 8001bec:	61bb      	str	r3, [r7, #24]
  return result;
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 8001c02:	bf00      	nop
 8001c04:	3720      	adds	r7, #32
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc90      	pop	{r4, r7}
 8001c0a:	4770      	bx	lr

08001c0c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	0a1b      	lsrs	r3, r3, #8
 8001c20:	43db      	mvns	r3, r3
 8001c22:	401a      	ands	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	0a1b      	lsrs	r3, r3, #8
 8001c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	613b      	str	r3, [r7, #16]
  return result;
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	408b      	lsls	r3, r1
 8001c40:	431a      	orrs	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	60da      	str	r2, [r3, #12]
}
 8001c46:	bf00      	nop
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	fa93 f3a3 	rbit	r3, r3
 8001c6e:	60fb      	str	r3, [r7, #12]
  return result;
 8001c70:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8001c7a:	e044      	b.n	8001d06 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	409a      	lsls	r2, r3
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d03a      	beq.n	8001d00 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	2b07      	cmp	r3, #7
 8001c8e:	d806      	bhi.n	8001c9e <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8001c90:	f240 1201 	movw	r2, #257	; 0x101
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	e008      	b.n	8001cb0 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3b08      	subs	r3, #8
 8001ca2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cae:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d106      	bne.n	8001cc6 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	69b9      	ldr	r1, [r7, #24]
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ffa3 	bl	8001c0c <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	69b9      	ldr	r1, [r7, #24]
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ff06 	bl	8001ae0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d003      	beq.n	8001ce4 <LL_GPIO_Init+0x94>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b09      	cmp	r3, #9
 8001ce2:	d10d      	bne.n	8001d00 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	69b9      	ldr	r1, [r7, #24]
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ff29 	bl	8001b44 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	69b9      	ldr	r1, [r7, #24]
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ff54 	bl	8001ba8 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	3301      	adds	r3, #1
 8001d04:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1b4      	bne.n	8001c7c <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3720      	adds	r7, #32
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <LL_RCC_GetSysClkSource+0x14>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 030c 	and.w	r3, r3, #12
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	40021000 	.word	0x40021000

08001d34 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <LL_RCC_GetAHBPrescaler+0x14>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	40021000 	.word	0x40021000

08001d4c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	40021000 	.word	0x40021000

08001d64 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <LL_RCC_GetAPB2Prescaler+0x14>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	40021000 	.word	0x40021000

08001d7c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <LL_RCC_PLL_GetMainSource+0x14>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	40021000 	.word	0x40021000

08001d94 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr
 8001da8:	40021000 	.word	0x40021000

08001dac <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <LL_RCC_PLL_GetPrediv+0x18>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	0c5b      	lsrs	r3, r3, #17
 8001db6:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000

08001dc8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001dd0:	f000 f820 	bl	8001e14 <RCC_GetSystemClockFreq>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f83e 	bl	8001e60 <RCC_GetHCLKClockFreq>
 8001de4:	4602      	mov	r2, r0
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 f84c 	bl	8001e8c <RCC_GetPCLK1ClockFreq>
 8001df4:	4602      	mov	r2, r0
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 f858 	bl	8001eb4 <RCC_GetPCLK2ClockFreq>
 8001e04:	4602      	mov	r2, r0
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	60da      	str	r2, [r3, #12]
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001e1e:	f7ff ff7d 	bl	8001d1c <LL_RCC_GetSysClkSource>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d00c      	beq.n	8001e42 <RCC_GetSystemClockFreq+0x2e>
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d80e      	bhi.n	8001e4a <RCC_GetSystemClockFreq+0x36>
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <RCC_GetSystemClockFreq+0x22>
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d003      	beq.n	8001e3c <RCC_GetSystemClockFreq+0x28>
 8001e34:	e009      	b.n	8001e4a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <RCC_GetSystemClockFreq+0x48>)
 8001e38:	607b      	str	r3, [r7, #4]
      break;
 8001e3a:	e009      	b.n	8001e50 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <RCC_GetSystemClockFreq+0x48>)
 8001e3e:	607b      	str	r3, [r7, #4]
      break;
 8001e40:	e006      	b.n	8001e50 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001e42:	f000 f84b 	bl	8001edc <RCC_PLL_GetFreqDomain_SYS>
 8001e46:	6078      	str	r0, [r7, #4]
      break;
 8001e48:	e002      	b.n	8001e50 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <RCC_GetSystemClockFreq+0x48>)
 8001e4c:	607b      	str	r3, [r7, #4]
      break;
 8001e4e:	bf00      	nop
  }

  return frequency;
 8001e50:	687b      	ldr	r3, [r7, #4]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	007a1200 	.word	0x007a1200

08001e60 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001e68:	f7ff ff64 	bl	8001d34 <LL_RCC_GetAHBPrescaler>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <RCC_GetHCLKClockFreq+0x28>)
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	40d3      	lsrs	r3, r2
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	08002a3c 	.word	0x08002a3c

08001e8c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001e94:	f7ff ff5a 	bl	8001d4c <LL_RCC_GetAPB1Prescaler>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	0a1b      	lsrs	r3, r3, #8
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <RCC_GetPCLK1ClockFreq+0x24>)
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	40d3      	lsrs	r3, r2
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	08002a4c 	.word	0x08002a4c

08001eb4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001ebc:	f7ff ff52 	bl	8001d64 <LL_RCC_GetAPB2Prescaler>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	0adb      	lsrs	r3, r3, #11
 8001ec4:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <RCC_GetPCLK2ClockFreq+0x24>)
 8001ec6:	5cd3      	ldrb	r3, [r2, r3]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	40d3      	lsrs	r3, r2
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	08002a4c 	.word	0x08002a4c

08001edc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001eea:	f7ff ff47 	bl	8001d7c <LL_RCC_PLL_GetMainSource>
 8001eee:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d004      	beq.n	8001f00 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efc:	d003      	beq.n	8001f06 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001efe:	e00b      	b.n	8001f18 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001f00:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001f02:	607b      	str	r3, [r7, #4]
      break;
 8001f04:	e00b      	b.n	8001f1e <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8001f06:	f7ff ff51 	bl	8001dac <LL_RCC_PLL_GetPrediv>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f14:	607b      	str	r3, [r7, #4]
      break;
 8001f16:	e002      	b.n	8001f1e <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001f1a:	607b      	str	r3, [r7, #4]
      break;
 8001f1c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8001f1e:	f7ff ff39 	bl	8001d94 <LL_RCC_PLL_GetMultiplicator>
 8001f22:	4603      	mov	r3, r0
 8001f24:	0c9b      	lsrs	r3, r3, #18
 8001f26:	3302      	adds	r3, #2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	fb02 f303 	mul.w	r3, r2, r3
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	003d0900 	.word	0x003d0900
 8001f3c:	007a1200 	.word	0x007a1200

08001f40 <LL_USART_IsEnabled>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f54:	bf0c      	ite	eq
 8001f56:	2301      	moveq	r3, #1
 8001f58:	2300      	movne	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <LL_USART_SetStopBitsLength>:
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	611a      	str	r2, [r3, #16]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <LL_USART_SetHWFlowCtrl>:
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	615a      	str	r2, [r3, #20]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
	...

08001fb0 <LL_USART_SetBaudRate>:
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	009a      	lsls	r2, r3, #2
 8001fc6:	441a      	add	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd0:	4a25      	ldr	r2, [pc, #148]	; (8002068 <LL_USART_SetBaudRate+0xb8>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	b299      	uxth	r1, r3
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009a      	lsls	r2, r3, #2
 8001fe8:	441a      	add	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <LL_USART_SetBaudRate+0xb8>)
 8001ff4:	fba3 0302 	umull	r0, r3, r3, r2
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	2064      	movs	r0, #100	; 0x64
 8001ffc:	fb00 f303 	mul.w	r3, r0, r3
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	3332      	adds	r3, #50	; 0x32
 8002006:	4a18      	ldr	r2, [pc, #96]	; (8002068 <LL_USART_SetBaudRate+0xb8>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	095b      	lsrs	r3, r3, #5
 800200e:	b29b      	uxth	r3, r3
 8002010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002014:	b29b      	uxth	r3, r3
 8002016:	440b      	add	r3, r1
 8002018:	b299      	uxth	r1, r3
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	009a      	lsls	r2, r3, #2
 8002024:	441a      	add	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	fbb2 f2f3 	udiv	r2, r2, r3
 800202e:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <LL_USART_SetBaudRate+0xb8>)
 8002030:	fba3 0302 	umull	r0, r3, r3, r2
 8002034:	095b      	lsrs	r3, r3, #5
 8002036:	2064      	movs	r0, #100	; 0x64
 8002038:	fb00 f303 	mul.w	r3, r0, r3
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	3332      	adds	r3, #50	; 0x32
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <LL_USART_SetBaudRate+0xb8>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	095b      	lsrs	r3, r3, #5
 800204a:	b29b      	uxth	r3, r3
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	b29b      	uxth	r3, r3
 8002052:	440b      	add	r3, r1
 8002054:	b29b      	uxth	r3, r3
 8002056:	461a      	mov	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	609a      	str	r2, [r3, #8]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	51eb851f 	.word	0x51eb851f

0800206c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ff5e 	bl	8001f40 <LL_USART_IsEnabled>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d145      	bne.n	8002116 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002092:	f023 030c 	bic.w	r3, r3, #12
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	6851      	ldr	r1, [r2, #4]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	68d2      	ldr	r2, [r2, #12]
 800209e:	4311      	orrs	r1, r2
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	6912      	ldr	r2, [r2, #16]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4619      	mov	r1, r3
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ff57 	bl	8001f66 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	4619      	mov	r1, r3
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ff63 	bl	8001f8a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80020c4:	f107 0308 	add.w	r3, r7, #8
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fe7d 	bl	8001dc8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a13      	ldr	r2, [pc, #76]	; (8002120 <LL_USART_Init+0xb4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d102      	bne.n	80020dc <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	e00c      	b.n	80020f6 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a11      	ldr	r2, [pc, #68]	; (8002124 <LL_USART_Init+0xb8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d102      	bne.n	80020ea <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	61bb      	str	r3, [r7, #24]
 80020e8:	e005      	b.n	80020f6 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <LL_USART_Init+0xbc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d101      	bne.n	80020f6 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00c      	beq.n	8002116 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002104:	2300      	movs	r3, #0
 8002106:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	69b9      	ldr	r1, [r7, #24]
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ff4d 	bl	8001fb0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002116:	7ffb      	ldrb	r3, [r7, #31]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3720      	adds	r7, #32
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40013800 	.word	0x40013800
 8002124:	40004400 	.word	0x40004400
 8002128:	40004800 	.word	0x40004800

0800212c <Kernel_event_flag_init>:
#include "event.h"

static uint32_t sEventFlag;

void Kernel_event_flag_init(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
	sEventFlag = 0;
 8002130:	4b03      	ldr	r3, [pc, #12]	; (8002140 <Kernel_event_flag_init+0x14>)
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000098 	.word	0x20000098

08002144 <Kernel_event_flag_set>:

void Kernel_event_flag_set(KernelEventFlag_t event)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
	sEventFlag |= (uint32_t)event;
 800214e:	79fa      	ldrb	r2, [r7, #7]
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <Kernel_event_flag_set+0x20>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4313      	orrs	r3, r2
 8002156:	4a03      	ldr	r2, [pc, #12]	; (8002164 <Kernel_event_flag_set+0x20>)
 8002158:	6013      	str	r3, [r2, #0]
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	20000098 	.word	0x20000098

08002168 <Kernel_event_flag_clear>:

void Kernel_event_flag_clear(KernelEventFlag_t event)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
	sEventFlag &= ~((uint32_t)event);
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	43da      	mvns	r2, r3
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <Kernel_event_flag_clear+0x24>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4013      	ands	r3, r2
 800217c:	4a03      	ldr	r2, [pc, #12]	; (800218c <Kernel_event_flag_clear+0x24>)
 800217e:	6013      	str	r3, [r2, #0]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000098 	.word	0x20000098

08002190 <Kernel_event_flag_check>:

bool Kernel_event_flag_check(KernelEventFlag_t event)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
	if(sEventFlag & (uint32_t)event){
 800219a:	79fa      	ldrb	r2, [r7, #7]
 800219c:	4b07      	ldr	r3, [pc, #28]	; (80021bc <Kernel_event_flag_check+0x2c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <Kernel_event_flag_check+0x22>
		Kernel_event_flag_clear(event);
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ffdd 	bl	8002168 <Kernel_event_flag_clear>
		return true;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <Kernel_event_flag_check+0x24>
	}

	return false;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000098 	.word	0x20000098

080021c0 <Kernel_start>:
#include "kernel.h"
#include "task.h"
#include "msg.h"

void Kernel_start(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
	Kernel_task_start();
 80021c4:	f000 fac6 	bl	8002754 <Kernel_task_start>
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}

080021cc <Kernel_yield>:

void Kernel_yield(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
	Kernel_task_scheduler();
 80021d0:	f000 fa84 	bl	80026dc <Kernel_task_scheduler>
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <Kernel_send_events>:

void Kernel_send_events(uint32_t event_list)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < 32; i++){
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	e01a      	b.n	800221c <Kernel_send_events+0x44>
		if((event_list >> i) & 1){
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	fa22 f303 	lsr.w	r3, r2, r3
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00f      	beq.n	8002216 <Kernel_send_events+0x3e>
			KernelEventFlag_t sending_event = KernelEventFlag_Empty;
 80021f6:	2300      	movs	r3, #0
 80021f8:	72fb      	strb	r3, [r7, #11]
			//sending_event = (KernelEventFlag_t)SET_BIT(sending_event, i);
			sending_event |= (1 << i);
 80021fa:	2201      	movs	r2, #1
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	b25a      	sxtb	r2, r3
 8002204:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002208:	4313      	orrs	r3, r2
 800220a:	b25b      	sxtb	r3, r3
 800220c:	72fb      	strb	r3, [r7, #11]
			Kernel_event_flag_set(sending_event);
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff97 	bl	8002144 <Kernel_event_flag_set>
	for(uint32_t i = 0; i < 32; i++){
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	3301      	adds	r3, #1
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b1f      	cmp	r3, #31
 8002220:	d9e1      	bls.n	80021e6 <Kernel_send_events+0xe>
		}
	}
}
 8002222:	bf00      	nop
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <Kernel_wait_events>:

KernelEventFlag_t Kernel_wait_events(uint32_t waiting_list)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < 32; i++){
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	e01f      	b.n	800227a <Kernel_wait_events+0x4e>
		if((waiting_list >> i) & 1){
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	fa22 f303 	lsr.w	r3, r2, r3
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d014      	beq.n	8002274 <Kernel_wait_events+0x48>
			KernelEventFlag_t waiting_event = KernelEventFlag_Empty;
 800224a:	2300      	movs	r3, #0
 800224c:	72fb      	strb	r3, [r7, #11]
			//waiting_event = (KernelEventFlag_t)SET_BIT(waiting_event, i);
			waiting_event |= (1 << i);
 800224e:	2201      	movs	r2, #1
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	b25a      	sxtb	r2, r3
 8002258:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800225c:	4313      	orrs	r3, r2
 800225e:	b25b      	sxtb	r3, r3
 8002260:	72fb      	strb	r3, [r7, #11]

			if(Kernel_event_flag_check(waiting_event)){
 8002262:	7afb      	ldrb	r3, [r7, #11]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff93 	bl	8002190 <Kernel_event_flag_check>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <Kernel_wait_events+0x48>
				return waiting_event;
 8002270:	7afb      	ldrb	r3, [r7, #11]
 8002272:	e006      	b.n	8002282 <Kernel_wait_events+0x56>
	for(uint32_t i = 0; i < 32; i++){
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	3301      	adds	r3, #1
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b1f      	cmp	r3, #31
 800227e:	d9dc      	bls.n	800223a <Kernel_wait_events+0xe>
			}
		}
	}

	return KernelEventFlag_Empty;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <Kernel_send_msg>:

bool Kernel_send_msg(KernelMsgQ_t Qname, void* data, uint32_t count)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b088      	sub	sp, #32
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	73fb      	strb	r3, [r7, #15]
	uint8_t* d = (uint8_t*)data;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	61fb      	str	r3, [r7, #28]

	for(uint32_t i = 0; i < count; i++){
 800229c:	2300      	movs	r3, #0
 800229e:	61bb      	str	r3, [r7, #24]
 80022a0:	e025      	b.n	80022ee <Kernel_send_msg+0x64>
		if(false == Kernel_msgQ_enqueue(Qname, *d)){
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	781a      	ldrb	r2, [r3, #0]
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	4611      	mov	r1, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f8d6 	bl	800245c <Kernel_msgQ_enqueue>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f083 0301 	eor.w	r3, r3, #1
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d012      	beq.n	80022e2 <Kernel_send_msg+0x58>
			for(uint32_t j = 0; j < i; j++){
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	e009      	b.n	80022d6 <Kernel_send_msg+0x4c>
				uint8_t rollback;
				Kernel_msgQ_dequeue(Qname, &rollback);
 80022c2:	f107 0213 	add.w	r2, r7, #19
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 f920 	bl	8002510 <Kernel_msgQ_dequeue>
			for(uint32_t j = 0; j < i; j++){
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	3301      	adds	r3, #1
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d3f1      	bcc.n	80022c2 <Kernel_send_msg+0x38>
			}
			return false;
 80022de:	2300      	movs	r3, #0
 80022e0:	e00a      	b.n	80022f8 <Kernel_send_msg+0x6e>
		}
		d++;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3301      	adds	r3, #1
 80022e6:	61fb      	str	r3, [r7, #28]
	for(uint32_t i = 0; i < count; i++){
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	3301      	adds	r3, #1
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d3d5      	bcc.n	80022a2 <Kernel_send_msg+0x18>
	}

	return true;
 80022f6:	2301      	movs	r3, #1
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3720      	adds	r7, #32
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <Kernel_recv_msg>:

uint32_t Kernel_recv_msg(KernelMsgQ_t Qname, void* out_data, uint32_t count)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	73fb      	strb	r3, [r7, #15]
	uint8_t* d = (uint8_t*)out_data;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	617b      	str	r3, [r7, #20]

	for(uint32_t i = 0; i < count; i++){
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	e012      	b.n	800233e <Kernel_recv_msg+0x3e>
		if(false == Kernel_msgQ_dequeue(Qname, d)){
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	6979      	ldr	r1, [r7, #20]
 800231c:	4618      	mov	r0, r3
 800231e:	f000 f8f7 	bl	8002510 <Kernel_msgQ_dequeue>
 8002322:	4603      	mov	r3, r0
 8002324:	f083 0301 	eor.w	r3, r3, #1
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <Kernel_recv_msg+0x32>
			return i;
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	e00a      	b.n	8002348 <Kernel_recv_msg+0x48>
		}
		d++;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	3301      	adds	r3, #1
 8002336:	617b      	str	r3, [r7, #20]
	for(uint32_t i = 0; i < count; i++){
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	3301      	adds	r3, #1
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	429a      	cmp	r2, r3
 8002344:	d3e8      	bcc.n	8002318 <Kernel_recv_msg+0x18>
	}

	return count;
 8002346:	687b      	ldr	r3, [r7, #4]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <Kernel_msgQ_init>:
#include "msg.h"

KernelCirQ_t sMsgQ[KernelMsgQ_Num];

void Kernel_msgQ_init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < KernelMsgQ_Num; i++){
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	e023      	b.n	80023a4 <Kernel_msgQ_init+0x54>
		sMsgQ[i].front = 0;
 800235c:	4915      	ldr	r1, [pc, #84]	; (80023b4 <Kernel_msgQ_init+0x64>)
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	019b      	lsls	r3, r3, #6
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	440b      	add	r3, r1
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
		sMsgQ[i].rear = 0;
 800236e:	4911      	ldr	r1, [pc, #68]	; (80023b4 <Kernel_msgQ_init+0x64>)
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	019b      	lsls	r3, r3, #6
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	440b      	add	r3, r1
 800237c:	3304      	adds	r3, #4
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
		//memclr(sMsgQ[i].Queue, MSG_Q_SIZE_BYTE);
		memset(sMsgQ[i].Queue, 0, MSG_Q_SIZE_BYTE);
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	019b      	lsls	r3, r3, #6
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	3308      	adds	r3, #8
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <Kernel_msgQ_init+0x64>)
 8002390:	4413      	add	r3, r2
 8002392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fa23 	bl	80027e4 <memset>
	for(uint32_t i = 0; i < KernelMsgQ_Num; i++){
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3301      	adds	r3, #1
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d9d8      	bls.n	800235c <Kernel_msgQ_init+0xc>
	}
}
 80023aa:	bf00      	nop
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	2000009c 	.word	0x2000009c

080023b8 <Kernel_msgQ_is_empty>:

bool Kernel_msgQ_is_empty(KernelMsgQ_t Qname)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
	if(Qname >= KernelMsgQ_Num){
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <Kernel_msgQ_is_empty+0x14>
		return false;
 80023c8:	2300      	movs	r3, #0
 80023ca:	e015      	b.n	80023f8 <Kernel_msgQ_is_empty+0x40>
	}

	if(sMsgQ[Qname].front == sMsgQ[Qname].rear){
 80023cc:	79fa      	ldrb	r2, [r7, #7]
 80023ce:	490d      	ldr	r1, [pc, #52]	; (8002404 <Kernel_msgQ_is_empty+0x4c>)
 80023d0:	4613      	mov	r3, r2
 80023d2:	019b      	lsls	r3, r3, #6
 80023d4:	4413      	add	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	440b      	add	r3, r1
 80023da:	6819      	ldr	r1, [r3, #0]
 80023dc:	79fa      	ldrb	r2, [r7, #7]
 80023de:	4809      	ldr	r0, [pc, #36]	; (8002404 <Kernel_msgQ_is_empty+0x4c>)
 80023e0:	4613      	mov	r3, r2
 80023e2:	019b      	lsls	r3, r3, #6
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4403      	add	r3, r0
 80023ea:	3304      	adds	r3, #4
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4299      	cmp	r1, r3
 80023f0:	d101      	bne.n	80023f6 <Kernel_msgQ_is_empty+0x3e>
		return true;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <Kernel_msgQ_is_empty+0x40>
	}

	return false;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	2000009c 	.word	0x2000009c

08002408 <Kernel_msgQ_is_full>:

bool Kernel_msgQ_is_full(KernelMsgQ_t Qname)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
	if(Qname >= KernelMsgQ_Num){
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <Kernel_msgQ_is_full+0x14>
		return false;
 8002418:	2300      	movs	r3, #0
 800241a:	e018      	b.n	800244e <Kernel_msgQ_is_full+0x46>
	}

	if(((sMsgQ[Qname].rear + 1) % MSG_Q_SIZE_BYTE) == sMsgQ[Qname].front){
 800241c:	79fa      	ldrb	r2, [r7, #7]
 800241e:	490e      	ldr	r1, [pc, #56]	; (8002458 <Kernel_msgQ_is_full+0x50>)
 8002420:	4613      	mov	r3, r2
 8002422:	019b      	lsls	r3, r3, #6
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	440b      	add	r3, r1
 800242a:	3304      	adds	r3, #4
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3301      	adds	r3, #1
 8002430:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8002434:	79fa      	ldrb	r2, [r7, #7]
 8002436:	4808      	ldr	r0, [pc, #32]	; (8002458 <Kernel_msgQ_is_full+0x50>)
 8002438:	4613      	mov	r3, r2
 800243a:	019b      	lsls	r3, r3, #6
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4403      	add	r3, r0
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4299      	cmp	r1, r3
 8002446:	d101      	bne.n	800244c <Kernel_msgQ_is_full+0x44>
		return true;
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <Kernel_msgQ_is_full+0x46>
	}

	return false;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	2000009c 	.word	0x2000009c

0800245c <Kernel_msgQ_enqueue>:

bool Kernel_msgQ_enqueue(KernelMsgQ_t Qname, uint8_t data)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	460a      	mov	r2, r1
 8002466:	71fb      	strb	r3, [r7, #7]
 8002468:	4613      	mov	r3, r2
 800246a:	71bb      	strb	r3, [r7, #6]
	if(Qname >= KernelMsgQ_Num){
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <Kernel_msgQ_enqueue+0x1a>
		return false;
 8002472:	2300      	movs	r3, #0
 8002474:	e045      	b.n	8002502 <Kernel_msgQ_enqueue+0xa6>
	}

	if(Kernel_msgQ_is_full(Qname)){
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ffc5 	bl	8002408 <Kernel_msgQ_is_full>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <Kernel_msgQ_enqueue+0x2c>
		return false;
 8002484:	2300      	movs	r3, #0
 8002486:	e03c      	b.n	8002502 <Kernel_msgQ_enqueue+0xa6>
	}

	sMsgQ[Qname].rear++;
 8002488:	79fa      	ldrb	r2, [r7, #7]
 800248a:	4920      	ldr	r1, [pc, #128]	; (800250c <Kernel_msgQ_enqueue+0xb0>)
 800248c:	4613      	mov	r3, r2
 800248e:	019b      	lsls	r3, r3, #6
 8002490:	4413      	add	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	440b      	add	r3, r1
 8002496:	3304      	adds	r3, #4
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	1c59      	adds	r1, r3, #1
 800249c:	481b      	ldr	r0, [pc, #108]	; (800250c <Kernel_msgQ_enqueue+0xb0>)
 800249e:	4613      	mov	r3, r2
 80024a0:	019b      	lsls	r3, r3, #6
 80024a2:	4413      	add	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4403      	add	r3, r0
 80024a8:	3304      	adds	r3, #4
 80024aa:	6019      	str	r1, [r3, #0]
	sMsgQ[Qname].rear %= MSG_Q_SIZE_BYTE;
 80024ac:	79fa      	ldrb	r2, [r7, #7]
 80024ae:	4917      	ldr	r1, [pc, #92]	; (800250c <Kernel_msgQ_enqueue+0xb0>)
 80024b0:	4613      	mov	r3, r2
 80024b2:	019b      	lsls	r3, r3, #6
 80024b4:	4413      	add	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	440b      	add	r3, r1
 80024ba:	3304      	adds	r3, #4
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	79fa      	ldrb	r2, [r7, #7]
 80024c0:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80024c4:	4811      	ldr	r0, [pc, #68]	; (800250c <Kernel_msgQ_enqueue+0xb0>)
 80024c6:	4613      	mov	r3, r2
 80024c8:	019b      	lsls	r3, r3, #6
 80024ca:	4413      	add	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4403      	add	r3, r0
 80024d0:	3304      	adds	r3, #4
 80024d2:	6019      	str	r1, [r3, #0]

	uint32_t idx = sMsgQ[Qname].rear;
 80024d4:	79fa      	ldrb	r2, [r7, #7]
 80024d6:	490d      	ldr	r1, [pc, #52]	; (800250c <Kernel_msgQ_enqueue+0xb0>)
 80024d8:	4613      	mov	r3, r2
 80024da:	019b      	lsls	r3, r3, #6
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	440b      	add	r3, r1
 80024e2:	3304      	adds	r3, #4
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	60fb      	str	r3, [r7, #12]
	sMsgQ[Qname].Queue[idx] = data;
 80024e8:	79fa      	ldrb	r2, [r7, #7]
 80024ea:	4908      	ldr	r1, [pc, #32]	; (800250c <Kernel_msgQ_enqueue+0xb0>)
 80024ec:	4613      	mov	r3, r2
 80024ee:	019b      	lsls	r3, r3, #6
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	18ca      	adds	r2, r1, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4413      	add	r3, r2
 80024fa:	3308      	adds	r3, #8
 80024fc:	79ba      	ldrb	r2, [r7, #6]
 80024fe:	701a      	strb	r2, [r3, #0]

	return true;
 8002500:	2301      	movs	r3, #1
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	2000009c 	.word	0x2000009c

08002510 <Kernel_msgQ_dequeue>:

bool Kernel_msgQ_dequeue(KernelMsgQ_t Qname, uint8_t* out_data)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	6039      	str	r1, [r7, #0]
 800251a:	71fb      	strb	r3, [r7, #7]
	if(Qname >= KernelMsgQ_Num){
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <Kernel_msgQ_dequeue+0x16>
		return false;
 8002522:	2300      	movs	r3, #0
 8002524:	e041      	b.n	80025aa <Kernel_msgQ_dequeue+0x9a>
	}

	if(Kernel_msgQ_is_empty(Qname)){
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff45 	bl	80023b8 <Kernel_msgQ_is_empty>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <Kernel_msgQ_dequeue+0x28>
		return false;
 8002534:	2300      	movs	r3, #0
 8002536:	e038      	b.n	80025aa <Kernel_msgQ_dequeue+0x9a>
	}

	sMsgQ[Qname].front++;
 8002538:	79fa      	ldrb	r2, [r7, #7]
 800253a:	491e      	ldr	r1, [pc, #120]	; (80025b4 <Kernel_msgQ_dequeue+0xa4>)
 800253c:	4613      	mov	r3, r2
 800253e:	019b      	lsls	r3, r3, #6
 8002540:	4413      	add	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	440b      	add	r3, r1
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	1c59      	adds	r1, r3, #1
 800254a:	481a      	ldr	r0, [pc, #104]	; (80025b4 <Kernel_msgQ_dequeue+0xa4>)
 800254c:	4613      	mov	r3, r2
 800254e:	019b      	lsls	r3, r3, #6
 8002550:	4413      	add	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4403      	add	r3, r0
 8002556:	6019      	str	r1, [r3, #0]
	sMsgQ[Qname].front %= MSG_Q_SIZE_BYTE;
 8002558:	79fa      	ldrb	r2, [r7, #7]
 800255a:	4916      	ldr	r1, [pc, #88]	; (80025b4 <Kernel_msgQ_dequeue+0xa4>)
 800255c:	4613      	mov	r3, r2
 800255e:	019b      	lsls	r3, r3, #6
 8002560:	4413      	add	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	440b      	add	r3, r1
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	79fa      	ldrb	r2, [r7, #7]
 800256a:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800256e:	4811      	ldr	r0, [pc, #68]	; (80025b4 <Kernel_msgQ_dequeue+0xa4>)
 8002570:	4613      	mov	r3, r2
 8002572:	019b      	lsls	r3, r3, #6
 8002574:	4413      	add	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4403      	add	r3, r0
 800257a:	6019      	str	r1, [r3, #0]

	uint32_t idx = sMsgQ[Qname].front;
 800257c:	79fa      	ldrb	r2, [r7, #7]
 800257e:	490d      	ldr	r1, [pc, #52]	; (80025b4 <Kernel_msgQ_dequeue+0xa4>)
 8002580:	4613      	mov	r3, r2
 8002582:	019b      	lsls	r3, r3, #6
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	440b      	add	r3, r1
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60fb      	str	r3, [r7, #12]
	*out_data = sMsgQ[Qname].Queue[idx];
 800258e:	79fa      	ldrb	r2, [r7, #7]
 8002590:	4908      	ldr	r1, [pc, #32]	; (80025b4 <Kernel_msgQ_dequeue+0xa4>)
 8002592:	4613      	mov	r3, r2
 8002594:	019b      	lsls	r3, r3, #6
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	18ca      	adds	r2, r1, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	3308      	adds	r3, #8
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	701a      	strb	r2, [r3, #0]

	return true;
 80025a8:	2301      	movs	r3, #1
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	2000009c 	.word	0x2000009c

080025b8 <Kernel_task_init>:
static __attribute__ ((naked)) void Kernel_task_context_switching(void);
static __attribute__ ((naked)) void Save_context(void);
static __attribute__ ((naked)) void Restore_context(void);

void Kernel_task_init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
	sAllocated_tcb_index = 0;
 80025be:	4b20      	ldr	r3, [pc, #128]	; (8002640 <Kernel_task_init+0x88>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
	sCurrent_tcb_index = 0;
 80025c4:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <Kernel_task_init+0x8c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]

	for(uint32_t i = 0; i < MAX_TASK_NUM; i++){
 80025ca:	2300      	movs	r3, #0
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	e02e      	b.n	800262e <Kernel_task_init+0x76>
		sTask_list[i].stack_base = (uint8_t*)malloc(USR_TASK_STACK_SIZE);//(TASK_STACK_START + (i * USR_TASK_STACK_SIZE));
 80025d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025d4:	f000 f8fe 	bl	80027d4 <malloc>
 80025d8:	4603      	mov	r3, r0
 80025da:	4619      	mov	r1, r3
 80025dc:	4a1a      	ldr	r2, [pc, #104]	; (8002648 <Kernel_task_init+0x90>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4413      	add	r3, r2
 80025e4:	6059      	str	r1, [r3, #4]
		sTask_list[i].sp = (uint32_t)sTask_list[i].stack_base + USR_TASK_STACK_SIZE - 4;
 80025e6:	4a18      	ldr	r2, [pc, #96]	; (8002648 <Kernel_task_init+0x90>)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4413      	add	r3, r2
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f503 727f 	add.w	r2, r3, #1020	; 0x3fc
 80025f4:	4914      	ldr	r1, [pc, #80]	; (8002648 <Kernel_task_init+0x90>)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

		sTask_list[i].sp -= sizeof(KernelTaskContext_t);
 80025fc:	4a12      	ldr	r2, [pc, #72]	; (8002648 <Kernel_task_init+0x90>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002604:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 8002608:	490f      	ldr	r1, [pc, #60]	; (8002648 <Kernel_task_init+0x90>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		KernelTaskContext_t* ctx = (KernelTaskContext_t*)sTask_list[i].sp;
 8002610:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <Kernel_task_init+0x90>)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002618:	603b      	str	r3, [r7, #0]
		ctx->pc = 0;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2200      	movs	r2, #0
 800261e:	639a      	str	r2, [r3, #56]	; 0x38
		ctx->psr = 0x01000000;//ARM_MODE_BIT_SYS;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002626:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 0; i < MAX_TASK_NUM; i++){
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3301      	adds	r3, #1
 800262c:	607b      	str	r3, [r7, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d9cd      	bls.n	80025d0 <Kernel_task_init+0x18>
	}
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200006d4 	.word	0x200006d4
 8002644:	200006d8 	.word	0x200006d8
 8002648:	200006b4 	.word	0x200006b4

0800264c <Kernel_task_create>:

uint32_t Kernel_task_create(KernelTaskFunc_t startFunc)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	KernelTcb_t* new_tcb = &sTask_list[sAllocated_tcb_index++];
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <Kernel_task_create+0x44>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	490d      	ldr	r1, [pc, #52]	; (8002690 <Kernel_task_create+0x44>)
 800265c:	600a      	str	r2, [r1, #0]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4a0c      	ldr	r2, [pc, #48]	; (8002694 <Kernel_task_create+0x48>)
 8002662:	4413      	add	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

	if(sAllocated_tcb_index > MAX_TASK_NUM){
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <Kernel_task_create+0x44>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b03      	cmp	r3, #3
 800266c:	d902      	bls.n	8002674 <Kernel_task_create+0x28>
		return NOT_ENOUGH_TASK_NUM;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	e008      	b.n	8002686 <Kernel_task_create+0x3a>
	}

	KernelTaskContext_t* ctx = (KernelTaskContext_t*)new_tcb->sp;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60bb      	str	r3, [r7, #8]
	ctx->pc = (uint32_t)startFunc;
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	639a      	str	r2, [r3, #56]	; 0x38

	return (sAllocated_tcb_index - 1);
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <Kernel_task_create+0x44>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3b01      	subs	r3, #1
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	200006d4 	.word	0x200006d4
 8002694:	200006b4 	.word	0x200006b4

08002698 <Scheduler_round_robin_algorithm>:

static KernelTcb_t* Scheduler_round_robin_algorithm(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
	sCurrent_tcb_index++;
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <Scheduler_round_robin_algorithm+0x38>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3301      	adds	r3, #1
 80026a2:	4a0b      	ldr	r2, [pc, #44]	; (80026d0 <Scheduler_round_robin_algorithm+0x38>)
 80026a4:	6013      	str	r3, [r2, #0]
	sCurrent_tcb_index %= sAllocated_tcb_index;
 80026a6:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <Scheduler_round_robin_algorithm+0x38>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <Scheduler_round_robin_algorithm+0x3c>)
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80026b2:	fb01 f202 	mul.w	r2, r1, r2
 80026b6:	1a9b      	subs	r3, r3, r2
 80026b8:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <Scheduler_round_robin_algorithm+0x38>)
 80026ba:	6013      	str	r3, [r2, #0]

	return &sTask_list[sCurrent_tcb_index];
 80026bc:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <Scheduler_round_robin_algorithm+0x38>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4a05      	ldr	r2, [pc, #20]	; (80026d8 <Scheduler_round_robin_algorithm+0x40>)
 80026c4:	4413      	add	r3, r2
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	200006d8 	.word	0x200006d8
 80026d4:	200006d4 	.word	0x200006d4
 80026d8:	200006b4 	.word	0x200006b4

080026dc <Kernel_task_scheduler>:

void Kernel_task_scheduler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
	sCurrent_tcb = &sTask_list[sCurrent_tcb_index];
 80026e0:	4b07      	ldr	r3, [pc, #28]	; (8002700 <Kernel_task_scheduler+0x24>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4a07      	ldr	r2, [pc, #28]	; (8002704 <Kernel_task_scheduler+0x28>)
 80026e8:	4413      	add	r3, r2
 80026ea:	4a07      	ldr	r2, [pc, #28]	; (8002708 <Kernel_task_scheduler+0x2c>)
 80026ec:	6013      	str	r3, [r2, #0]
	sNext_tcb = Scheduler_round_robin_algorithm();
 80026ee:	f7ff ffd3 	bl	8002698 <Scheduler_round_robin_algorithm>
 80026f2:	4603      	mov	r3, r0
 80026f4:	4a05      	ldr	r2, [pc, #20]	; (800270c <Kernel_task_scheduler+0x30>)
 80026f6:	6013      	str	r3, [r2, #0]

	Kernel_task_context_switching();
 80026f8:	f000 f80a 	bl	8002710 <Kernel_task_context_switching>
}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	200006d8 	.word	0x200006d8
 8002704:	200006b4 	.word	0x200006b4
 8002708:	200006cc 	.word	0x200006cc
 800270c:	200006d0 	.word	0x200006d0

08002710 <Kernel_task_context_switching>:

static __attribute__ ((naked)) void Kernel_task_context_switching(void)
{
	__asm__ ("B Save_context");
 8002710:	f000 b804 	b.w	800271c <Save_context>
	__asm__ ("B Restore_context");
 8002714:	f000 b810 	b.w	8002738 <Restore_context>
}
 8002718:	bf00      	nop
	...

0800271c <Save_context>:

static __attribute__ ((naked)) void Save_context(void)
{
	__asm__ ("PUSH {lr}");
 800271c:	b500      	push	{lr}
	__asm__ ("PUSH {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}");
 800271e:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	__asm__ ("MRS   r0, psr");
 8002722:	f3ef 8003 	mrs	r0, PSR
	__asm__ ("PUSH {r0}");
 8002726:	b401      	push	{r0}
	__asm__ ("LDR   r0, =sCurrent_tcb");
 8002728:	4802      	ldr	r0, [pc, #8]	; (8002734 <Save_context+0x18>)
	__asm__ ("LDR   r0, [r0]");
 800272a:	6800      	ldr	r0, [r0, #0]
	__asm__ ("MRS   r1, msp");
 800272c:	f3ef 8108 	mrs	r1, MSP
	__asm__ ("STR   r1, [r0]");
 8002730:	6001      	str	r1, [r0, #0]
}
 8002732:	bf00      	nop
 8002734:	200006cc 	.word	0x200006cc

08002738 <Restore_context>:

static __attribute__ ((naked)) void Restore_context(void)
{
	__asm__ ("LDR   r0, =sNext_tcb");
 8002738:	4805      	ldr	r0, [pc, #20]	; (8002750 <Restore_context+0x18>)
	__asm__ ("LDR   r0, [r0]");
 800273a:	6800      	ldr	r0, [r0, #0]
	__asm__ ("LDR   r1, [r0]");
 800273c:	6801      	ldr	r1, [r0, #0]
	__asm__ ("MSR   msp, r1");
 800273e:	f381 8808 	msr	MSP, r1
	__asm__ ("POP  {r0}");
 8002742:	bc01      	pop	{r0}
	__asm__ ("MSR   psr, r0");
 8002744:	f380 8803 	msr	PSR, r0
	__asm__ ("POP  {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}");
 8002748:	e8bd 1fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	__asm__ ("POP  {pc}");
 800274c:	bd00      	pop	{pc}
}
 800274e:	bf00      	nop
 8002750:	200006d0 	.word	0x200006d0

08002754 <Kernel_task_start>:

void Kernel_task_start(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
	sNext_tcb = &sTask_list[sCurrent_tcb_index];
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <Kernel_task_start+0x20>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4a06      	ldr	r2, [pc, #24]	; (8002778 <Kernel_task_start+0x24>)
 8002760:	4413      	add	r3, r2
 8002762:	4a06      	ldr	r2, [pc, #24]	; (800277c <Kernel_task_start+0x28>)
 8002764:	6013      	str	r3, [r2, #0]

	__asm__ ("B Restore_context");
 8002766:	f7ff bfe7 	b.w	8002738 <Restore_context>
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	200006d8 	.word	0x200006d8
 8002778:	200006b4 	.word	0x200006b4
 800277c:	200006d0 	.word	0x200006d0

08002780 <__errno>:
 8002780:	4b01      	ldr	r3, [pc, #4]	; (8002788 <__errno+0x8>)
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	2000000c 	.word	0x2000000c

0800278c <__libc_init_array>:
 800278c:	b570      	push	{r4, r5, r6, lr}
 800278e:	2600      	movs	r6, #0
 8002790:	4d0c      	ldr	r5, [pc, #48]	; (80027c4 <__libc_init_array+0x38>)
 8002792:	4c0d      	ldr	r4, [pc, #52]	; (80027c8 <__libc_init_array+0x3c>)
 8002794:	1b64      	subs	r4, r4, r5
 8002796:	10a4      	asrs	r4, r4, #2
 8002798:	42a6      	cmp	r6, r4
 800279a:	d109      	bne.n	80027b0 <__libc_init_array+0x24>
 800279c:	f000 f8dc 	bl	8002958 <_init>
 80027a0:	2600      	movs	r6, #0
 80027a2:	4d0a      	ldr	r5, [pc, #40]	; (80027cc <__libc_init_array+0x40>)
 80027a4:	4c0a      	ldr	r4, [pc, #40]	; (80027d0 <__libc_init_array+0x44>)
 80027a6:	1b64      	subs	r4, r4, r5
 80027a8:	10a4      	asrs	r4, r4, #2
 80027aa:	42a6      	cmp	r6, r4
 80027ac:	d105      	bne.n	80027ba <__libc_init_array+0x2e>
 80027ae:	bd70      	pop	{r4, r5, r6, pc}
 80027b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027b4:	4798      	blx	r3
 80027b6:	3601      	adds	r6, #1
 80027b8:	e7ee      	b.n	8002798 <__libc_init_array+0xc>
 80027ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80027be:	4798      	blx	r3
 80027c0:	3601      	adds	r6, #1
 80027c2:	e7f2      	b.n	80027aa <__libc_init_array+0x1e>
 80027c4:	08002a68 	.word	0x08002a68
 80027c8:	08002a68 	.word	0x08002a68
 80027cc:	08002a68 	.word	0x08002a68
 80027d0:	08002a6c 	.word	0x08002a6c

080027d4 <malloc>:
 80027d4:	4b02      	ldr	r3, [pc, #8]	; (80027e0 <malloc+0xc>)
 80027d6:	4601      	mov	r1, r0
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	f000 b82b 	b.w	8002834 <_malloc_r>
 80027de:	bf00      	nop
 80027e0:	2000000c 	.word	0x2000000c

080027e4 <memset>:
 80027e4:	4603      	mov	r3, r0
 80027e6:	4402      	add	r2, r0
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d100      	bne.n	80027ee <memset+0xa>
 80027ec:	4770      	bx	lr
 80027ee:	f803 1b01 	strb.w	r1, [r3], #1
 80027f2:	e7f9      	b.n	80027e8 <memset+0x4>

080027f4 <sbrk_aligned>:
 80027f4:	b570      	push	{r4, r5, r6, lr}
 80027f6:	4e0e      	ldr	r6, [pc, #56]	; (8002830 <sbrk_aligned+0x3c>)
 80027f8:	460c      	mov	r4, r1
 80027fa:	6831      	ldr	r1, [r6, #0]
 80027fc:	4605      	mov	r5, r0
 80027fe:	b911      	cbnz	r1, 8002806 <sbrk_aligned+0x12>
 8002800:	f000 f88c 	bl	800291c <_sbrk_r>
 8002804:	6030      	str	r0, [r6, #0]
 8002806:	4621      	mov	r1, r4
 8002808:	4628      	mov	r0, r5
 800280a:	f000 f887 	bl	800291c <_sbrk_r>
 800280e:	1c43      	adds	r3, r0, #1
 8002810:	d00a      	beq.n	8002828 <sbrk_aligned+0x34>
 8002812:	1cc4      	adds	r4, r0, #3
 8002814:	f024 0403 	bic.w	r4, r4, #3
 8002818:	42a0      	cmp	r0, r4
 800281a:	d007      	beq.n	800282c <sbrk_aligned+0x38>
 800281c:	1a21      	subs	r1, r4, r0
 800281e:	4628      	mov	r0, r5
 8002820:	f000 f87c 	bl	800291c <_sbrk_r>
 8002824:	3001      	adds	r0, #1
 8002826:	d101      	bne.n	800282c <sbrk_aligned+0x38>
 8002828:	f04f 34ff 	mov.w	r4, #4294967295
 800282c:	4620      	mov	r0, r4
 800282e:	bd70      	pop	{r4, r5, r6, pc}
 8002830:	200006e0 	.word	0x200006e0

08002834 <_malloc_r>:
 8002834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002838:	1ccd      	adds	r5, r1, #3
 800283a:	f025 0503 	bic.w	r5, r5, #3
 800283e:	3508      	adds	r5, #8
 8002840:	2d0c      	cmp	r5, #12
 8002842:	bf38      	it	cc
 8002844:	250c      	movcc	r5, #12
 8002846:	2d00      	cmp	r5, #0
 8002848:	4607      	mov	r7, r0
 800284a:	db01      	blt.n	8002850 <_malloc_r+0x1c>
 800284c:	42a9      	cmp	r1, r5
 800284e:	d905      	bls.n	800285c <_malloc_r+0x28>
 8002850:	230c      	movs	r3, #12
 8002852:	2600      	movs	r6, #0
 8002854:	603b      	str	r3, [r7, #0]
 8002856:	4630      	mov	r0, r6
 8002858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800285c:	4e2e      	ldr	r6, [pc, #184]	; (8002918 <_malloc_r+0xe4>)
 800285e:	f000 f86d 	bl	800293c <__malloc_lock>
 8002862:	6833      	ldr	r3, [r6, #0]
 8002864:	461c      	mov	r4, r3
 8002866:	bb34      	cbnz	r4, 80028b6 <_malloc_r+0x82>
 8002868:	4629      	mov	r1, r5
 800286a:	4638      	mov	r0, r7
 800286c:	f7ff ffc2 	bl	80027f4 <sbrk_aligned>
 8002870:	1c43      	adds	r3, r0, #1
 8002872:	4604      	mov	r4, r0
 8002874:	d14d      	bne.n	8002912 <_malloc_r+0xde>
 8002876:	6834      	ldr	r4, [r6, #0]
 8002878:	4626      	mov	r6, r4
 800287a:	2e00      	cmp	r6, #0
 800287c:	d140      	bne.n	8002900 <_malloc_r+0xcc>
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	4631      	mov	r1, r6
 8002882:	4638      	mov	r0, r7
 8002884:	eb04 0803 	add.w	r8, r4, r3
 8002888:	f000 f848 	bl	800291c <_sbrk_r>
 800288c:	4580      	cmp	r8, r0
 800288e:	d13a      	bne.n	8002906 <_malloc_r+0xd2>
 8002890:	6821      	ldr	r1, [r4, #0]
 8002892:	3503      	adds	r5, #3
 8002894:	1a6d      	subs	r5, r5, r1
 8002896:	f025 0503 	bic.w	r5, r5, #3
 800289a:	3508      	adds	r5, #8
 800289c:	2d0c      	cmp	r5, #12
 800289e:	bf38      	it	cc
 80028a0:	250c      	movcc	r5, #12
 80028a2:	4638      	mov	r0, r7
 80028a4:	4629      	mov	r1, r5
 80028a6:	f7ff ffa5 	bl	80027f4 <sbrk_aligned>
 80028aa:	3001      	adds	r0, #1
 80028ac:	d02b      	beq.n	8002906 <_malloc_r+0xd2>
 80028ae:	6823      	ldr	r3, [r4, #0]
 80028b0:	442b      	add	r3, r5
 80028b2:	6023      	str	r3, [r4, #0]
 80028b4:	e00e      	b.n	80028d4 <_malloc_r+0xa0>
 80028b6:	6822      	ldr	r2, [r4, #0]
 80028b8:	1b52      	subs	r2, r2, r5
 80028ba:	d41e      	bmi.n	80028fa <_malloc_r+0xc6>
 80028bc:	2a0b      	cmp	r2, #11
 80028be:	d916      	bls.n	80028ee <_malloc_r+0xba>
 80028c0:	1961      	adds	r1, r4, r5
 80028c2:	42a3      	cmp	r3, r4
 80028c4:	6025      	str	r5, [r4, #0]
 80028c6:	bf18      	it	ne
 80028c8:	6059      	strne	r1, [r3, #4]
 80028ca:	6863      	ldr	r3, [r4, #4]
 80028cc:	bf08      	it	eq
 80028ce:	6031      	streq	r1, [r6, #0]
 80028d0:	5162      	str	r2, [r4, r5]
 80028d2:	604b      	str	r3, [r1, #4]
 80028d4:	4638      	mov	r0, r7
 80028d6:	f104 060b 	add.w	r6, r4, #11
 80028da:	f000 f835 	bl	8002948 <__malloc_unlock>
 80028de:	f026 0607 	bic.w	r6, r6, #7
 80028e2:	1d23      	adds	r3, r4, #4
 80028e4:	1af2      	subs	r2, r6, r3
 80028e6:	d0b6      	beq.n	8002856 <_malloc_r+0x22>
 80028e8:	1b9b      	subs	r3, r3, r6
 80028ea:	50a3      	str	r3, [r4, r2]
 80028ec:	e7b3      	b.n	8002856 <_malloc_r+0x22>
 80028ee:	6862      	ldr	r2, [r4, #4]
 80028f0:	42a3      	cmp	r3, r4
 80028f2:	bf0c      	ite	eq
 80028f4:	6032      	streq	r2, [r6, #0]
 80028f6:	605a      	strne	r2, [r3, #4]
 80028f8:	e7ec      	b.n	80028d4 <_malloc_r+0xa0>
 80028fa:	4623      	mov	r3, r4
 80028fc:	6864      	ldr	r4, [r4, #4]
 80028fe:	e7b2      	b.n	8002866 <_malloc_r+0x32>
 8002900:	4634      	mov	r4, r6
 8002902:	6876      	ldr	r6, [r6, #4]
 8002904:	e7b9      	b.n	800287a <_malloc_r+0x46>
 8002906:	230c      	movs	r3, #12
 8002908:	4638      	mov	r0, r7
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	f000 f81c 	bl	8002948 <__malloc_unlock>
 8002910:	e7a1      	b.n	8002856 <_malloc_r+0x22>
 8002912:	6025      	str	r5, [r4, #0]
 8002914:	e7de      	b.n	80028d4 <_malloc_r+0xa0>
 8002916:	bf00      	nop
 8002918:	200006dc 	.word	0x200006dc

0800291c <_sbrk_r>:
 800291c:	b538      	push	{r3, r4, r5, lr}
 800291e:	2300      	movs	r3, #0
 8002920:	4d05      	ldr	r5, [pc, #20]	; (8002938 <_sbrk_r+0x1c>)
 8002922:	4604      	mov	r4, r0
 8002924:	4608      	mov	r0, r1
 8002926:	602b      	str	r3, [r5, #0]
 8002928:	f7fe f826 	bl	8000978 <_sbrk>
 800292c:	1c43      	adds	r3, r0, #1
 800292e:	d102      	bne.n	8002936 <_sbrk_r+0x1a>
 8002930:	682b      	ldr	r3, [r5, #0]
 8002932:	b103      	cbz	r3, 8002936 <_sbrk_r+0x1a>
 8002934:	6023      	str	r3, [r4, #0]
 8002936:	bd38      	pop	{r3, r4, r5, pc}
 8002938:	200006e4 	.word	0x200006e4

0800293c <__malloc_lock>:
 800293c:	4801      	ldr	r0, [pc, #4]	; (8002944 <__malloc_lock+0x8>)
 800293e:	f000 b809 	b.w	8002954 <__retarget_lock_acquire_recursive>
 8002942:	bf00      	nop
 8002944:	200006e8 	.word	0x200006e8

08002948 <__malloc_unlock>:
 8002948:	4801      	ldr	r0, [pc, #4]	; (8002950 <__malloc_unlock+0x8>)
 800294a:	f000 b804 	b.w	8002956 <__retarget_lock_release_recursive>
 800294e:	bf00      	nop
 8002950:	200006e8 	.word	0x200006e8

08002954 <__retarget_lock_acquire_recursive>:
 8002954:	4770      	bx	lr

08002956 <__retarget_lock_release_recursive>:
 8002956:	4770      	bx	lr

08002958 <_init>:
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	bf00      	nop
 800295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295e:	bc08      	pop	{r3}
 8002960:	469e      	mov	lr, r3
 8002962:	4770      	bx	lr

08002964 <_fini>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	bf00      	nop
 8002968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	469e      	mov	lr, r3
 800296e:	4770      	bx	lr
