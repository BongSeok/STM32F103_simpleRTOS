
STM32F103_simpleRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002114  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08002220  08002220  00012220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022f0  080022f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080022f0  080022f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022f0  080022f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022f0  080022f0  000122f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022f4  080022f4  000122f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080022f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  20000070  08002368  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e8  08002368  000206e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005425  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d82  00000000  00000000  000254be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  00027240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000628  00000000  00000000  00027980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b48  00000000  00000000  00027fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096ad  00000000  00000000  00040af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008532a  00000000  00000000  0004a19d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf4c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b44  00000000  00000000  000cf518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002208 	.word	0x08002208

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002208 	.word	0x08002208

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b0e      	ldr	r3, [pc, #56]	; (800018c <MX_GPIO_Init+0x40>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a0d      	ldr	r2, [pc, #52]	; (800018c <MX_GPIO_Init+0x40>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b0b      	ldr	r3, [pc, #44]	; (800018c <MX_GPIO_Init+0x40>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b08      	ldr	r3, [pc, #32]	; (800018c <MX_GPIO_Init+0x40>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a07      	ldr	r2, [pc, #28]	; (800018c <MX_GPIO_Init+0x40>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b05      	ldr	r3, [pc, #20]	; (800018c <MX_GPIO_Init+0x40>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	603b      	str	r3, [r7, #0]
 8000180:	683b      	ldr	r3, [r7, #0]

}
 8000182:	bf00      	nop
 8000184:	370c      	adds	r7, #12
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	40021000 	.word	0x40021000

08000190 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000190:	b480      	push	{r7}
 8000192:	b089      	sub	sp, #36	; 0x24
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	330c      	adds	r3, #12
 800019c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	e853 3f00 	ldrex	r3, [r3]
 80001a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80001a6:	68bb      	ldr	r3, [r7, #8]
 80001a8:	f043 0320 	orr.w	r3, r3, #32
 80001ac:	61fb      	str	r3, [r7, #28]
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	330c      	adds	r3, #12
 80001b2:	69fa      	ldr	r2, [r7, #28]
 80001b4:	61ba      	str	r2, [r7, #24]
 80001b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80001b8:	6979      	ldr	r1, [r7, #20]
 80001ba:	69ba      	ldr	r2, [r7, #24]
 80001bc:	e841 2300 	strex	r3, r2, [r1]
 80001c0:	613b      	str	r3, [r7, #16]
   return(result);
 80001c2:	693b      	ldr	r3, [r7, #16]
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d1e7      	bne.n	8000198 <LL_USART_EnableIT_RXNE+0x8>
}
 80001c8:	bf00      	nop
 80001ca:	bf00      	nop
 80001cc:	3724      	adds	r7, #36	; 0x24
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fbb6 	bl	8000948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f812 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f7ff ffb4 	bl	800014c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001e4:	f000 faf4 	bl	80007d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_USART_EnableIT_RXNE(USART1);
 80001e8:	4804      	ldr	r0, [pc, #16]	; (80001fc <main+0x28>)
 80001ea:	f7ff ffd1 	bl	8000190 <LL_USART_EnableIT_RXNE>
  vPrintString("simpleRTOS starting ... \r\n");
 80001ee:	4804      	ldr	r0, [pc, #16]	; (8000200 <main+0x2c>)
 80001f0:	f000 fb6e 	bl	80008d0 <vPrintString>
  Kernel_init();
 80001f4:	f000 f84c 	bl	8000290 <Kernel_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f8:	e7fe      	b.n	80001f8 <main+0x24>
 80001fa:	bf00      	nop
 80001fc:	40013800 	.word	0x40013800
 8000200:	08002220 	.word	0x08002220

08000204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b090      	sub	sp, #64	; 0x40
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0318 	add.w	r3, r7, #24
 800020e:	2228      	movs	r2, #40	; 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f001 ff3e 	bl	8002094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000226:	2301      	movs	r3, #1
 8000228:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800022a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800022e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000234:	2301      	movs	r3, #1
 8000236:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000238:	2302      	movs	r3, #2
 800023a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800023c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000242:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000246:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000248:	f107 0318 	add.w	r3, r7, #24
 800024c:	4618      	mov	r0, r3
 800024e:	f000 fcc1 	bl	8000bd4 <HAL_RCC_OscConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000258:	f000 f906 	bl	8000468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	230f      	movs	r3, #15
 800025e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000260:	2302      	movs	r3, #2
 8000262:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2102      	movs	r1, #2
 8000276:	4618      	mov	r0, r3
 8000278:	f000 ff2e 	bl	80010d8 <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000282:	f000 f8f1 	bl	8000468 <Error_Handler>
  }
}
 8000286:	bf00      	nop
 8000288:	3740      	adds	r7, #64	; 0x40
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <Kernel_init>:

/* USER CODE BEGIN 4 */
static void Kernel_init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
	uint32_t taskId;

	Kernel_task_init();
 8000296:	f001 fde7 	bl	8001e68 <Kernel_task_init>
	Kernel_event_flag_init();
 800029a:	f001 fb9f 	bl	80019dc <Kernel_event_flag_init>
	Kernel_msgQ_init();
 800029e:	f001 fcaf 	bl	8001c00 <Kernel_msgQ_init>

	taskId = Kernel_task_create(User_task0);
 80002a2:	4813      	ldr	r0, [pc, #76]	; (80002f0 <Kernel_init+0x60>)
 80002a4:	f001 fe2a 	bl	8001efc <Kernel_task_create>
 80002a8:	6078      	str	r0, [r7, #4]
	if(NOT_ENOUGH_TASK_NUM == taskId){
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002b0:	d102      	bne.n	80002b8 <Kernel_init+0x28>
		vPrintString("Task0 creation fail \r\n");
 80002b2:	4810      	ldr	r0, [pc, #64]	; (80002f4 <Kernel_init+0x64>)
 80002b4:	f000 fb0c 	bl	80008d0 <vPrintString>
	}

	taskId = Kernel_task_create(User_task1);
 80002b8:	480f      	ldr	r0, [pc, #60]	; (80002f8 <Kernel_init+0x68>)
 80002ba:	f001 fe1f 	bl	8001efc <Kernel_task_create>
 80002be:	6078      	str	r0, [r7, #4]
	if(NOT_ENOUGH_TASK_NUM == taskId){
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002c6:	d102      	bne.n	80002ce <Kernel_init+0x3e>
		vPrintString("Task1 creation fail \r\n");
 80002c8:	480c      	ldr	r0, [pc, #48]	; (80002fc <Kernel_init+0x6c>)
 80002ca:	f000 fb01 	bl	80008d0 <vPrintString>
	}

	taskId = Kernel_task_create(User_task2);
 80002ce:	480c      	ldr	r0, [pc, #48]	; (8000300 <Kernel_init+0x70>)
 80002d0:	f001 fe14 	bl	8001efc <Kernel_task_create>
 80002d4:	6078      	str	r0, [r7, #4]
	if(NOT_ENOUGH_TASK_NUM == taskId){
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002dc:	d102      	bne.n	80002e4 <Kernel_init+0x54>
		vPrintString("Task2 creation fail \r\n");
 80002de:	4809      	ldr	r0, [pc, #36]	; (8000304 <Kernel_init+0x74>)
 80002e0:	f000 faf6 	bl	80008d0 <vPrintString>
	}

	Kernel_start();
 80002e4:	f001 fbc4 	bl	8001a70 <Kernel_start>
}
 80002e8:	bf00      	nop
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	08000309 	.word	0x08000309
 80002f4:	0800223c 	.word	0x0800223c
 80002f8:	080003d5 	.word	0x080003d5
 80002fc:	08002254 	.word	0x08002254
 8000300:	08000455 	.word	0x08000455
 8000304:	0800226c 	.word	0x0800226c

08000308 <User_task0>:

void User_task0(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af00      	add	r7, sp, #0
	vPrintString("User task #0 \r\n");
 800030e:	4830      	ldr	r0, [pc, #192]	; (80003d0 <User_task0+0xc8>)
 8000310:	f000 fade 	bl	80008d0 <vPrintString>

	uint8_t cmdBuf[16];
	uint32_t cmdBufIdx = 0;
 8000314:	2300      	movs	r3, #0
 8000316:	60bb      	str	r3, [r7, #8]
	uint8_t uartch= 0;
 8000318:	2300      	movs	r3, #0
 800031a:	71fb      	strb	r3, [r7, #7]

	while(true){
		KernelEventFlag_t handle_event = Kernel_wait_events(KernelEventFlag_UartIn);
 800031c:	2001      	movs	r0, #1
 800031e:	f001 fbdd 	bl	8001adc <Kernel_wait_events>
 8000322:	4603      	mov	r3, r0
 8000324:	77fb      	strb	r3, [r7, #31]
		switch(handle_event){
 8000326:	7ffb      	ldrb	r3, [r7, #31]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d04b      	beq.n	80003c4 <User_task0+0xbc>
 800032c:	2b01      	cmp	r3, #1
 800032e:	d14b      	bne.n	80003c8 <User_task0+0xc0>
		case KernelEventFlag_UartIn:
			//vPrintString("\r\nEvent handled \r\n");
			Kernel_recv_msg(KernelMsgQ_Task0, &uartch, 1);
 8000330:	1dfb      	adds	r3, r7, #7
 8000332:	2201      	movs	r2, #1
 8000334:	4619      	mov	r1, r3
 8000336:	2000      	movs	r0, #0
 8000338:	f001 fc3a 	bl	8001bb0 <Kernel_recv_msg>
			if(uartch == '\n'){
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	2b0a      	cmp	r3, #10
 8000340:	d132      	bne.n	80003a8 <User_task0+0xa0>
				cmdBuf[cmdBufIdx] = '\0';
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	3320      	adds	r3, #32
 8000346:	443b      	add	r3, r7
 8000348:	2200      	movs	r2, #0
 800034a:	f803 2c14 	strb.w	r2, [r3, #-20]

				//Kernel_send_msg(KernelMsgQ_Task1, &cmdBufIdx, 1);
				//Kernel_send_msg(KernelMsgQ_Task1, cmdBuf, cmdBufIdx);
				//Kernel_send_events(KernelEventFlag_CmdIn);
				while(true){
					Kernel_send_events(KernelEventFlag_CmdIn);
 800034e:	2002      	movs	r0, #2
 8000350:	f001 fb9a 	bl	8001a88 <Kernel_send_events>
					if(false == Kernel_send_msg(KernelMsgQ_Task1, &cmdBufIdx, 1)){
 8000354:	f107 0308 	add.w	r3, r7, #8
 8000358:	2201      	movs	r2, #1
 800035a:	4619      	mov	r1, r3
 800035c:	2001      	movs	r0, #1
 800035e:	f001 fbec 	bl	8001b3a <Kernel_send_msg>
 8000362:	4603      	mov	r3, r0
 8000364:	f083 0301 	eor.w	r3, r3, #1
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2b00      	cmp	r3, #0
 800036c:	d002      	beq.n	8000374 <User_task0+0x6c>
						Kernel_yield();
 800036e:	f001 fb85 	bl	8001a7c <Kernel_yield>
 8000372:	e7ec      	b.n	800034e <User_task0+0x46>
					}
					else if(false == Kernel_send_msg(KernelMsgQ_Task1, cmdBuf, cmdBufIdx)){
 8000374:	68ba      	ldr	r2, [r7, #8]
 8000376:	f107 030c 	add.w	r3, r7, #12
 800037a:	4619      	mov	r1, r3
 800037c:	2001      	movs	r0, #1
 800037e:	f001 fbdc 	bl	8001b3a <Kernel_send_msg>
 8000382:	4603      	mov	r3, r0
 8000384:	f083 0301 	eor.w	r3, r3, #1
 8000388:	b2db      	uxtb	r3, r3
 800038a:	2b00      	cmp	r3, #0
 800038c:	d008      	beq.n	80003a0 <User_task0+0x98>
						uint8_t rollback;
						Kernel_recv_msg(KernelMsgQ_Task1, &rollback, 1);
 800038e:	1dbb      	adds	r3, r7, #6
 8000390:	2201      	movs	r2, #1
 8000392:	4619      	mov	r1, r3
 8000394:	2001      	movs	r0, #1
 8000396:	f001 fc0b 	bl	8001bb0 <Kernel_recv_msg>
						Kernel_yield();
 800039a:	f001 fb6f 	bl	8001a7c <Kernel_yield>
					Kernel_send_events(KernelEventFlag_CmdIn);
 800039e:	e7d6      	b.n	800034e <User_task0+0x46>
					}
					else{
						break;
 80003a0:	bf00      	nop
					}
				}

				cmdBufIdx = 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	60bb      	str	r3, [r7, #8]
			else{
				cmdBuf[cmdBufIdx] = uartch;
				cmdBufIdx++;
				cmdBufIdx %= 16;
			}
			break;
 80003a6:	e010      	b.n	80003ca <User_task0+0xc2>
				cmdBuf[cmdBufIdx] = uartch;
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	79fa      	ldrb	r2, [r7, #7]
 80003ac:	3320      	adds	r3, #32
 80003ae:	443b      	add	r3, r7
 80003b0:	f803 2c14 	strb.w	r2, [r3, #-20]
				cmdBufIdx++;
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	3301      	adds	r3, #1
 80003b8:	60bb      	str	r3, [r7, #8]
				cmdBufIdx %= 16;
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	f003 030f 	and.w	r3, r3, #15
 80003c0:	60bb      	str	r3, [r7, #8]
			break;
 80003c2:	e002      	b.n	80003ca <User_task0+0xc2>
		case KernelEventFlag_Empty:
			break;
 80003c4:	bf00      	nop
 80003c6:	e000      	b.n	80003ca <User_task0+0xc2>
		default:
			break;
 80003c8:	bf00      	nop
		}
		Kernel_yield();
 80003ca:	f001 fb57 	bl	8001a7c <Kernel_yield>
	while(true){
 80003ce:	e7a5      	b.n	800031c <User_task0+0x14>
 80003d0:	08002284 	.word	0x08002284

080003d4 <User_task1>:
	}
}

void User_task1(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
	vPrintString("User task #1 \r\n");
 80003da:	481c      	ldr	r0, [pc, #112]	; (800044c <User_task1+0x78>)
 80003dc:	f000 fa78 	bl	80008d0 <vPrintString>

	uint8_t cmdlen = 0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	75bb      	strb	r3, [r7, #22]
	uint8_t cmd[16] = {0};
 80003e4:	2300      	movs	r3, #0
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	f107 0308 	add.w	r3, r7, #8
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]

	while(true){
		KernelEventFlag_t handle_event = Kernel_wait_events(KernelEventFlag_CmdIn);
 80003f4:	2002      	movs	r0, #2
 80003f6:	f001 fb71 	bl	8001adc <Kernel_wait_events>
 80003fa:	4603      	mov	r3, r0
 80003fc:	75fb      	strb	r3, [r7, #23]
		switch(handle_event){
 80003fe:	7dfb      	ldrb	r3, [r7, #23]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d01d      	beq.n	8000440 <User_task1+0x6c>
 8000404:	2b02      	cmp	r3, #2
 8000406:	d11d      	bne.n	8000444 <User_task1+0x70>
		case KernelEventFlag_CmdIn:
			memset(cmd, 0, 16);
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2210      	movs	r2, #16
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f001 fe40 	bl	8002094 <memset>
			Kernel_recv_msg(KernelMsgQ_Task1, &cmdlen, 1);
 8000414:	f107 0316 	add.w	r3, r7, #22
 8000418:	2201      	movs	r2, #1
 800041a:	4619      	mov	r1, r3
 800041c:	2001      	movs	r0, #1
 800041e:	f001 fbc7 	bl	8001bb0 <Kernel_recv_msg>
			Kernel_recv_msg(KernelMsgQ_Task1, cmd, cmdlen);
 8000422:	7dbb      	ldrb	r3, [r7, #22]
 8000424:	461a      	mov	r2, r3
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	4619      	mov	r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	f001 fbc0 	bl	8001bb0 <Kernel_recv_msg>
			vPrintString("\r\nRecv Cmd : ");
 8000430:	4807      	ldr	r0, [pc, #28]	; (8000450 <User_task1+0x7c>)
 8000432:	f000 fa4d 	bl	80008d0 <vPrintString>
			vPrintString((const char*)cmd);
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	4618      	mov	r0, r3
 800043a:	f000 fa49 	bl	80008d0 <vPrintString>
			break;
 800043e:	e002      	b.n	8000446 <User_task1+0x72>
		case KernelEventFlag_Empty:
			break;
 8000440:	bf00      	nop
 8000442:	e000      	b.n	8000446 <User_task1+0x72>
		default:
			break;
 8000444:	bf00      	nop
		}
		Kernel_yield();
 8000446:	f001 fb19 	bl	8001a7c <Kernel_yield>
	while(true){
 800044a:	e7d3      	b.n	80003f4 <User_task1+0x20>
 800044c:	08002294 	.word	0x08002294
 8000450:	080022a4 	.word	0x080022a4

08000454 <User_task2>:
	}
}

void User_task2(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	vPrintString("User task #2 \r\n");
 8000458:	4802      	ldr	r0, [pc, #8]	; (8000464 <User_task2+0x10>)
 800045a:	f000 fa39 	bl	80008d0 <vPrintString>

	while(true){
		Kernel_yield();
 800045e:	f001 fb0d 	bl	8001a7c <Kernel_yield>
 8000462:	e7fc      	b.n	800045e <User_task2+0xa>
 8000464:	080022b4 	.word	0x080022b4

08000468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800046c:	b672      	cpsid	i
}
 800046e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000470:	e7fe      	b.n	8000470 <Error_Handler+0x8>
	...

08000474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800047a:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <HAL_MspInit+0x5c>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	4a14      	ldr	r2, [pc, #80]	; (80004d0 <HAL_MspInit+0x5c>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	6193      	str	r3, [r2, #24]
 8000486:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <HAL_MspInit+0x5c>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <HAL_MspInit+0x5c>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <HAL_MspInit+0x5c>)
 8000498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800049c:	61d3      	str	r3, [r2, #28]
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <HAL_MspInit+0x5c>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <HAL_MspInit+0x60>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	4a04      	ldr	r2, [pc, #16]	; (80004d4 <HAL_MspInit+0x60>)
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c6:	bf00      	nop
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010000 	.word	0x40010000

080004d8 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	b2db      	uxtb	r3, r3
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	460b      	mov	r3, r1
 80004fa:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80004fc:	78fa      	ldrb	r2, [r7, #3]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	605a      	str	r2, [r3, #4]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <NMI_Handler+0x4>

08000512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <HardFault_Handler+0x4>

08000518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <MemManage_Handler+0x4>

0800051e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <BusFault_Handler+0x4>

08000524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <UsageFault_Handler+0x4>

0800052a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr

08000536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr

08000542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000552:	f000 fa3f 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint8_t ch = LL_USART_ReceiveData8(USART1);
 8000562:	480b      	ldr	r0, [pc, #44]	; (8000590 <USART1_IRQHandler+0x34>)
 8000564:	f7ff ffb8 	bl	80004d8 <LL_USART_ReceiveData8>
 8000568:	4603      	mov	r3, r0
 800056a:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART1, ch);
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	4619      	mov	r1, r3
 8000570:	4807      	ldr	r0, [pc, #28]	; (8000590 <USART1_IRQHandler+0x34>)
 8000572:	f7ff ffbd 	bl	80004f0 <LL_USART_TransmitData8>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	Kernel_send_msg(KernelMsgQ_Task0, &ch, 1);
 8000576:	1dfb      	adds	r3, r7, #7
 8000578:	2201      	movs	r2, #1
 800057a:	4619      	mov	r1, r3
 800057c:	2000      	movs	r0, #0
 800057e:	f001 fadc 	bl	8001b3a <Kernel_send_msg>
	Kernel_send_events(KernelEventFlag_UartIn);
 8000582:	2001      	movs	r0, #1
 8000584:	f001 fa80 	bl	8001a88 <Kernel_send_events>
  /* USER CODE END USART1_IRQn 1 */
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40013800 	.word	0x40013800

08000594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800059c:	4a14      	ldr	r2, [pc, #80]	; (80005f0 <_sbrk+0x5c>)
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <_sbrk+0x60>)
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005a8:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <_sbrk+0x64>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d102      	bne.n	80005b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005b0:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <_sbrk+0x64>)
 80005b2:	4a12      	ldr	r2, [pc, #72]	; (80005fc <_sbrk+0x68>)
 80005b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <_sbrk+0x64>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4413      	add	r3, r2
 80005be:	693a      	ldr	r2, [r7, #16]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d207      	bcs.n	80005d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005c4:	f001 fd34 	bl	8002030 <__errno>
 80005c8:	4603      	mov	r3, r0
 80005ca:	220c      	movs	r2, #12
 80005cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	e009      	b.n	80005e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <_sbrk+0x64>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005da:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <_sbrk+0x64>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <_sbrk+0x64>)
 80005e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005e6:	68fb      	ldr	r3, [r7, #12]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3718      	adds	r7, #24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20005000 	.word	0x20005000
 80005f4:	00000400 	.word	0x00000400
 80005f8:	2000008c 	.word	0x2000008c
 80005fc:	200006e8 	.word	0x200006e8

08000600 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <__NVIC_GetPriorityGrouping+0x18>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	0a1b      	lsrs	r3, r3, #8
 8000616:	f003 0307 	and.w	r3, r3, #7
}
 800061a:	4618      	mov	r0, r3
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000636:	2b00      	cmp	r3, #0
 8000638:	db0b      	blt.n	8000652 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	f003 021f 	and.w	r2, r3, #31
 8000640:	4906      	ldr	r1, [pc, #24]	; (800065c <__NVIC_EnableIRQ+0x34>)
 8000642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000646:	095b      	lsrs	r3, r3, #5
 8000648:	2001      	movs	r0, #1
 800064a:	fa00 f202 	lsl.w	r2, r0, r2
 800064e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	e000e100 	.word	0xe000e100

08000660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	db0a      	blt.n	800068a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	b2da      	uxtb	r2, r3
 8000678:	490c      	ldr	r1, [pc, #48]	; (80006ac <__NVIC_SetPriority+0x4c>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	0112      	lsls	r2, r2, #4
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	440b      	add	r3, r1
 8000684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000688:	e00a      	b.n	80006a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4908      	ldr	r1, [pc, #32]	; (80006b0 <__NVIC_SetPriority+0x50>)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	f003 030f 	and.w	r3, r3, #15
 8000696:	3b04      	subs	r3, #4
 8000698:	0112      	lsls	r2, r2, #4
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	440b      	add	r3, r1
 800069e:	761a      	strb	r2, [r3, #24]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000e100 	.word	0xe000e100
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b089      	sub	sp, #36	; 0x24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	f1c3 0307 	rsb	r3, r3, #7
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	bf28      	it	cs
 80006d2:	2304      	movcs	r3, #4
 80006d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3304      	adds	r3, #4
 80006da:	2b06      	cmp	r3, #6
 80006dc:	d902      	bls.n	80006e4 <NVIC_EncodePriority+0x30>
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3b03      	subs	r3, #3
 80006e2:	e000      	b.n	80006e6 <NVIC_EncodePriority+0x32>
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e8:	f04f 32ff 	mov.w	r2, #4294967295
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	fa02 f303 	lsl.w	r3, r2, r3
 80006f2:	43da      	mvns	r2, r3
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	401a      	ands	r2, r3
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	fa01 f303 	lsl.w	r3, r1, r3
 8000706:	43d9      	mvns	r1, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	4313      	orrs	r3, r2
         );
}
 800070e:	4618      	mov	r0, r3
 8000710:	3724      	adds	r7, #36	; 0x24
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <LL_USART_Enable>:
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	60da      	str	r2, [r3, #12]
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <LL_USART_ConfigAsyncMode>:
{
 8000736:	b480      	push	{r7}
 8000738:	b083      	sub	sp, #12
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	691b      	ldr	r3, [r3, #16]
 8000742:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	615a      	str	r2, [r3, #20]
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <LL_USART_IsActiveFlag_TXE>:
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000770:	2b80      	cmp	r3, #128	; 0x80
 8000772:	bf0c      	ite	eq
 8000774:	2301      	moveq	r3, #1
 8000776:	2300      	movne	r3, #0
 8000778:	b2db      	uxtb	r3, r3
}
 800077a:	4618      	mov	r0, r3
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <LL_USART_TransmitData8>:
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000790:	78fa      	ldrb	r2, [r7, #3]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	605a      	str	r2, [r3, #4]
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80007aa:	699a      	ldr	r2, [r3, #24]
 80007ac:	4907      	ldr	r1, [pc, #28]	; (80007cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80007b6:	699a      	ldr	r2, [r3, #24]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4013      	ands	r3, r2
 80007bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007be:	68fb      	ldr	r3, [r7, #12]
}
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000

080007d0 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
 80007e6:	615a      	str	r2, [r3, #20]
 80007e8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	463b      	mov	r3, r7
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80007f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80007fc:	f7ff ffd0 	bl	80007a0 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000800:	2004      	movs	r0, #4
 8000802:	f7ff ffcd 	bl	80007a0 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <MX_USART1_UART_Init+0xc0>)
 8000808:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800080a:	2309      	movs	r3, #9
 800080c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	463b      	mov	r3, r7
 8000818:	4619      	mov	r1, r3
 800081a:	481e      	ldr	r0, [pc, #120]	; (8000894 <MX_USART1_UART_Init+0xc4>)
 800081c:	f000 fe70 	bl	8001500 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_USART1_UART_Init+0xc8>)
 8000822:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000824:	2304      	movs	r3, #4
 8000826:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	463b      	mov	r3, r7
 800082a:	4619      	mov	r1, r3
 800082c:	4819      	ldr	r0, [pc, #100]	; (8000894 <MX_USART1_UART_Init+0xc4>)
 800082e:	f000 fe67 	bl	8001500 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000832:	f7ff feeb 	bl	800060c <__NVIC_GetPriorityGrouping>
 8000836:	4603      	mov	r3, r0
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff39 	bl	80006b4 <NVIC_EncodePriority>
 8000842:	4603      	mov	r3, r0
 8000844:	4619      	mov	r1, r3
 8000846:	2025      	movs	r0, #37	; 0x25
 8000848:	f7ff ff0a 	bl	8000660 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800084c:	2025      	movs	r0, #37	; 0x25
 800084e:	f7ff feeb 	bl	8000628 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000852:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000856:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000864:	230c      	movs	r3, #12
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800086c:	2300      	movs	r3, #0
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	4809      	ldr	r0, [pc, #36]	; (800089c <MX_USART1_UART_Init+0xcc>)
 8000878:	f001 f850 	bl	800191c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800087c:	4807      	ldr	r0, [pc, #28]	; (800089c <MX_USART1_UART_Init+0xcc>)
 800087e:	f7ff ff5a 	bl	8000736 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000882:	4806      	ldr	r0, [pc, #24]	; (800089c <MX_USART1_UART_Init+0xcc>)
 8000884:	f7ff ff48 	bl	8000718 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3730      	adds	r7, #48	; 0x30
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	04020002 	.word	0x04020002
 8000894:	40010800 	.word	0x40010800
 8000898:	04040004 	.word	0x04040004
 800089c:	40013800 	.word	0x40013800

080008a0 <vPrintChar>:

/* USER CODE BEGIN 1 */
void vPrintChar(const char cCharacter)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
	while( !LL_USART_IsActiveFlag_TXE(USART1) );
 80008aa:	bf00      	nop
 80008ac:	4807      	ldr	r0, [pc, #28]	; (80008cc <vPrintChar+0x2c>)
 80008ae:	f7ff ff57 	bl	8000760 <LL_USART_IsActiveFlag_TXE>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d0f9      	beq.n	80008ac <vPrintChar+0xc>
	LL_USART_TransmitData8(USART1, (uint8_t)cCharacter);
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	4619      	mov	r1, r3
 80008bc:	4803      	ldr	r0, [pc, #12]	; (80008cc <vPrintChar+0x2c>)
 80008be:	f7ff ff61 	bl	8000784 <LL_USART_TransmitData8>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40013800 	.word	0x40013800

080008d0 <vPrintString>:

void vPrintString(const char* pcString)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	while( *pcString != '\0' ){
 80008d8:	e007      	b.n	80008ea <vPrintString+0x1a>
		vPrintChar(*pcString);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ffde 	bl	80008a0 <vPrintChar>
		pcString++;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3301      	adds	r3, #1
 80008e8:	607b      	str	r3, [r7, #4]
	while( *pcString != '\0' ){
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1f3      	bne.n	80008da <vPrintString+0xa>
	}
}
 80008f2:	bf00      	nop
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008fc:	f7ff fe80 	bl	8000600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480b      	ldr	r0, [pc, #44]	; (8000930 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000902:	490c      	ldr	r1, [pc, #48]	; (8000934 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000904:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000918:	4c09      	ldr	r4, [pc, #36]	; (8000940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000926:	f001 fb89 	bl	800203c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092a:	f7ff fc53 	bl	80001d4 <main>
  bx lr
 800092e:	4770      	bx	lr
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000938:	080022f8 	.word	0x080022f8
  ldr r2, =_sbss
 800093c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000940:	200006e8 	.word	0x200006e8

08000944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_2_IRQHandler>
	...

08000948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_Init+0x28>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_Init+0x28>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f907 	bl	8000b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	200f      	movs	r0, #15
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff fd86 	bl	8000474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40022000 	.word	0x40022000

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f911 	bl	8000bba <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 f8e7 	bl	8000b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_IncTick+0x1c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x20>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a03      	ldr	r2, [pc, #12]	; (80009f4 <HAL_IncTick+0x20>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000090 	.word	0x20000090

080009f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <HAL_GetTick+0x10>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	20000090 	.word	0x20000090

08000a0c <__NVIC_SetPriorityGrouping>:
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3e:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	60d3      	str	r3, [r2, #12]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_GetPriorityGrouping>:
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <__NVIC_GetPriorityGrouping+0x18>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	f003 0307 	and.w	r3, r3, #7
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_SetPriority>:
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db0a      	blt.n	8000a9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	490c      	ldr	r1, [pc, #48]	; (8000abc <__NVIC_SetPriority+0x4c>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	440b      	add	r3, r1
 8000a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a98:	e00a      	b.n	8000ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4908      	ldr	r1, [pc, #32]	; (8000ac0 <__NVIC_SetPriority+0x50>)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	0112      	lsls	r2, r2, #4
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	761a      	strb	r2, [r3, #24]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000e100 	.word	0xe000e100
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <NVIC_EncodePriority>:
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	; 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	f1c3 0307 	rsb	r3, r3, #7
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	bf28      	it	cs
 8000ae2:	2304      	movcs	r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d902      	bls.n	8000af4 <NVIC_EncodePriority+0x30>
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3b03      	subs	r3, #3
 8000af2:	e000      	b.n	8000af6 <NVIC_EncodePriority+0x32>
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43da      	mvns	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	401a      	ands	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	4313      	orrs	r3, r2
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3724      	adds	r7, #36	; 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b38:	d301      	bcc.n	8000b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00f      	b.n	8000b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <SysTick_Config+0x40>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b46:	210f      	movs	r1, #15
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f7ff ff90 	bl	8000a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <SysTick_Config+0x40>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <SysTick_Config+0x40>)
 8000b58:	2207      	movs	r2, #7
 8000b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	e000e010 	.word	0xe000e010

08000b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff ff49 	bl	8000a0c <__NVIC_SetPriorityGrouping>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b94:	f7ff ff5e 	bl	8000a54 <__NVIC_GetPriorityGrouping>
 8000b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f7ff ff90 	bl	8000ac4 <NVIC_EncodePriority>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff5f 	bl	8000a70 <__NVIC_SetPriority>
}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ffb0 	bl	8000b28 <SysTick_Config>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d101      	bne.n	8000be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e272      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 8087 	beq.w	8000d02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bf4:	4b92      	ldr	r3, [pc, #584]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 030c 	and.w	r3, r3, #12
 8000bfc:	2b04      	cmp	r3, #4
 8000bfe:	d00c      	beq.n	8000c1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c00:	4b8f      	ldr	r3, [pc, #572]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f003 030c 	and.w	r3, r3, #12
 8000c08:	2b08      	cmp	r3, #8
 8000c0a:	d112      	bne.n	8000c32 <HAL_RCC_OscConfig+0x5e>
 8000c0c:	4b8c      	ldr	r3, [pc, #560]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c18:	d10b      	bne.n	8000c32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c1a:	4b89      	ldr	r3, [pc, #548]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d06c      	beq.n	8000d00 <HAL_RCC_OscConfig+0x12c>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d168      	bne.n	8000d00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e24c      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c3a:	d106      	bne.n	8000c4a <HAL_RCC_OscConfig+0x76>
 8000c3c:	4b80      	ldr	r3, [pc, #512]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a7f      	ldr	r2, [pc, #508]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	e02e      	b.n	8000ca8 <HAL_RCC_OscConfig+0xd4>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d10c      	bne.n	8000c6c <HAL_RCC_OscConfig+0x98>
 8000c52:	4b7b      	ldr	r3, [pc, #492]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a7a      	ldr	r2, [pc, #488]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c5c:	6013      	str	r3, [r2, #0]
 8000c5e:	4b78      	ldr	r3, [pc, #480]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a77      	ldr	r2, [pc, #476]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	e01d      	b.n	8000ca8 <HAL_RCC_OscConfig+0xd4>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c74:	d10c      	bne.n	8000c90 <HAL_RCC_OscConfig+0xbc>
 8000c76:	4b72      	ldr	r3, [pc, #456]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a71      	ldr	r2, [pc, #452]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	4b6f      	ldr	r3, [pc, #444]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a6e      	ldr	r2, [pc, #440]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	e00b      	b.n	8000ca8 <HAL_RCC_OscConfig+0xd4>
 8000c90:	4b6b      	ldr	r3, [pc, #428]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a6a      	ldr	r2, [pc, #424]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	4b68      	ldr	r3, [pc, #416]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a67      	ldr	r2, [pc, #412]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d013      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb0:	f7ff fea2 	bl	80009f8 <HAL_GetTick>
 8000cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb6:	e008      	b.n	8000cca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cb8:	f7ff fe9e 	bl	80009f8 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b64      	cmp	r3, #100	; 0x64
 8000cc4:	d901      	bls.n	8000cca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e200      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cca:	4b5d      	ldr	r3, [pc, #372]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d0f0      	beq.n	8000cb8 <HAL_RCC_OscConfig+0xe4>
 8000cd6:	e014      	b.n	8000d02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd8:	f7ff fe8e 	bl	80009f8 <HAL_GetTick>
 8000cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cde:	e008      	b.n	8000cf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ce0:	f7ff fe8a 	bl	80009f8 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b64      	cmp	r3, #100	; 0x64
 8000cec:	d901      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e1ec      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cf2:	4b53      	ldr	r3, [pc, #332]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f0      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x10c>
 8000cfe:	e000      	b.n	8000d02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d063      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d0e:	4b4c      	ldr	r3, [pc, #304]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 030c 	and.w	r3, r3, #12
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d00b      	beq.n	8000d32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d1a:	4b49      	ldr	r3, [pc, #292]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 030c 	and.w	r3, r3, #12
 8000d22:	2b08      	cmp	r3, #8
 8000d24:	d11c      	bne.n	8000d60 <HAL_RCC_OscConfig+0x18c>
 8000d26:	4b46      	ldr	r3, [pc, #280]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d116      	bne.n	8000d60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d32:	4b43      	ldr	r3, [pc, #268]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d005      	beq.n	8000d4a <HAL_RCC_OscConfig+0x176>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d001      	beq.n	8000d4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e1c0      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d4a:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	4939      	ldr	r1, [pc, #228]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d5e:	e03a      	b.n	8000dd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d020      	beq.n	8000daa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d68:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <HAL_RCC_OscConfig+0x270>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6e:	f7ff fe43 	bl	80009f8 <HAL_GetTick>
 8000d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d74:	e008      	b.n	8000d88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d76:	f7ff fe3f 	bl	80009f8 <HAL_GetTick>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d901      	bls.n	8000d88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	e1a1      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d88:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d0f0      	beq.n	8000d76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d94:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	4927      	ldr	r1, [pc, #156]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	4313      	orrs	r3, r2
 8000da6:	600b      	str	r3, [r1, #0]
 8000da8:	e015      	b.n	8000dd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000daa:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <HAL_RCC_OscConfig+0x270>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fe22 	bl	80009f8 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000db8:	f7ff fe1e 	bl	80009f8 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e180      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1f0      	bne.n	8000db8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0308 	and.w	r3, r3, #8
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d03a      	beq.n	8000e58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d019      	beq.n	8000e1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <HAL_RCC_OscConfig+0x274>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df0:	f7ff fe02 	bl	80009f8 <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000df8:	f7ff fdfe 	bl	80009f8 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e160      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0f0      	beq.n	8000df8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f000 fa9c 	bl	8001354 <RCC_Delay>
 8000e1c:	e01c      	b.n	8000e58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_RCC_OscConfig+0x274>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e24:	f7ff fde8 	bl	80009f8 <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e2a:	e00f      	b.n	8000e4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e2c:	f7ff fde4 	bl	80009f8 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d908      	bls.n	8000e4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e146      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
 8000e3e:	bf00      	nop
 8000e40:	40021000 	.word	0x40021000
 8000e44:	42420000 	.word	0x42420000
 8000e48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e4c:	4b92      	ldr	r3, [pc, #584]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1e9      	bne.n	8000e2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0304 	and.w	r3, r3, #4
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 80a6 	beq.w	8000fb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e6a:	4b8b      	ldr	r3, [pc, #556]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10d      	bne.n	8000e92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	4b88      	ldr	r3, [pc, #544]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	4a87      	ldr	r2, [pc, #540]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e80:	61d3      	str	r3, [r2, #28]
 8000e82:	4b85      	ldr	r3, [pc, #532]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e92:	4b82      	ldr	r3, [pc, #520]	; (800109c <HAL_RCC_OscConfig+0x4c8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d118      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e9e:	4b7f      	ldr	r3, [pc, #508]	; (800109c <HAL_RCC_OscConfig+0x4c8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a7e      	ldr	r2, [pc, #504]	; (800109c <HAL_RCC_OscConfig+0x4c8>)
 8000ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eaa:	f7ff fda5 	bl	80009f8 <HAL_GetTick>
 8000eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb0:	e008      	b.n	8000ec4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eb2:	f7ff fda1 	bl	80009f8 <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b64      	cmp	r3, #100	; 0x64
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e103      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec4:	4b75      	ldr	r3, [pc, #468]	; (800109c <HAL_RCC_OscConfig+0x4c8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0f0      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d106      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x312>
 8000ed8:	4b6f      	ldr	r3, [pc, #444]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	4a6e      	ldr	r2, [pc, #440]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6213      	str	r3, [r2, #32]
 8000ee4:	e02d      	b.n	8000f42 <HAL_RCC_OscConfig+0x36e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10c      	bne.n	8000f08 <HAL_RCC_OscConfig+0x334>
 8000eee:	4b6a      	ldr	r3, [pc, #424]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	4a69      	ldr	r2, [pc, #420]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000ef4:	f023 0301 	bic.w	r3, r3, #1
 8000ef8:	6213      	str	r3, [r2, #32]
 8000efa:	4b67      	ldr	r3, [pc, #412]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000efc:	6a1b      	ldr	r3, [r3, #32]
 8000efe:	4a66      	ldr	r2, [pc, #408]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f00:	f023 0304 	bic.w	r3, r3, #4
 8000f04:	6213      	str	r3, [r2, #32]
 8000f06:	e01c      	b.n	8000f42 <HAL_RCC_OscConfig+0x36e>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	2b05      	cmp	r3, #5
 8000f0e:	d10c      	bne.n	8000f2a <HAL_RCC_OscConfig+0x356>
 8000f10:	4b61      	ldr	r3, [pc, #388]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	4a60      	ldr	r2, [pc, #384]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f16:	f043 0304 	orr.w	r3, r3, #4
 8000f1a:	6213      	str	r3, [r2, #32]
 8000f1c:	4b5e      	ldr	r3, [pc, #376]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	4a5d      	ldr	r2, [pc, #372]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6213      	str	r3, [r2, #32]
 8000f28:	e00b      	b.n	8000f42 <HAL_RCC_OscConfig+0x36e>
 8000f2a:	4b5b      	ldr	r3, [pc, #364]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	4a5a      	ldr	r2, [pc, #360]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f30:	f023 0301 	bic.w	r3, r3, #1
 8000f34:	6213      	str	r3, [r2, #32]
 8000f36:	4b58      	ldr	r3, [pc, #352]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	4a57      	ldr	r2, [pc, #348]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f3c:	f023 0304 	bic.w	r3, r3, #4
 8000f40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d015      	beq.n	8000f76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f4a:	f7ff fd55 	bl	80009f8 <HAL_GetTick>
 8000f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f50:	e00a      	b.n	8000f68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f52:	f7ff fd51 	bl	80009f8 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d901      	bls.n	8000f68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e0b1      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f68:	4b4b      	ldr	r3, [pc, #300]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f6a:	6a1b      	ldr	r3, [r3, #32]
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d0ee      	beq.n	8000f52 <HAL_RCC_OscConfig+0x37e>
 8000f74:	e014      	b.n	8000fa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f76:	f7ff fd3f 	bl	80009f8 <HAL_GetTick>
 8000f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f7c:	e00a      	b.n	8000f94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f7e:	f7ff fd3b 	bl	80009f8 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d901      	bls.n	8000f94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e09b      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f94:	4b40      	ldr	r3, [pc, #256]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f96:	6a1b      	ldr	r3, [r3, #32]
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1ee      	bne.n	8000f7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d105      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fa6:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a3b      	ldr	r2, [pc, #236]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 8087 	beq.w	80010ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fbc:	4b36      	ldr	r3, [pc, #216]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 030c 	and.w	r3, r3, #12
 8000fc4:	2b08      	cmp	r3, #8
 8000fc6:	d061      	beq.n	800108c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d146      	bne.n	800105e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd0:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <HAL_RCC_OscConfig+0x4cc>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fd0f 	bl	80009f8 <HAL_GetTick>
 8000fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fde:	f7ff fd0b 	bl	80009f8 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e06d      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1f0      	bne.n	8000fde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001004:	d108      	bne.n	8001018 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001006:	4b24      	ldr	r3, [pc, #144]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	4921      	ldr	r1, [pc, #132]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8001014:	4313      	orrs	r3, r2
 8001016:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a19      	ldr	r1, [r3, #32]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	430b      	orrs	r3, r1
 800102a:	491b      	ldr	r1, [pc, #108]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	4313      	orrs	r3, r2
 800102e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <HAL_RCC_OscConfig+0x4cc>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001036:	f7ff fcdf 	bl	80009f8 <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800103e:	f7ff fcdb 	bl	80009f8 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e03d      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0f0      	beq.n	800103e <HAL_RCC_OscConfig+0x46a>
 800105c:	e035      	b.n	80010ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <HAL_RCC_OscConfig+0x4cc>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fcc8 	bl	80009f8 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800106c:	f7ff fcc4 	bl	80009f8 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e026      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f0      	bne.n	800106c <HAL_RCC_OscConfig+0x498>
 800108a:	e01e      	b.n	80010ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69db      	ldr	r3, [r3, #28]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d107      	bne.n	80010a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e019      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
 8001098:	40021000 	.word	0x40021000
 800109c:	40007000 	.word	0x40007000
 80010a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_RCC_OscConfig+0x500>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d106      	bne.n	80010c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d001      	beq.n	80010ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40021000 	.word	0x40021000

080010d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0d0      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010ec:	4b6a      	ldr	r3, [pc, #424]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d910      	bls.n	800111c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010fa:	4b67      	ldr	r3, [pc, #412]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f023 0207 	bic.w	r2, r3, #7
 8001102:	4965      	ldr	r1, [pc, #404]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	4313      	orrs	r3, r2
 8001108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800110a:	4b63      	ldr	r3, [pc, #396]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d001      	beq.n	800111c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e0b8      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d020      	beq.n	800116a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001134:	4b59      	ldr	r3, [pc, #356]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	4a58      	ldr	r2, [pc, #352]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800113e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800114c:	4b53      	ldr	r3, [pc, #332]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	4a52      	ldr	r2, [pc, #328]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001152:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001156:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001158:	4b50      	ldr	r3, [pc, #320]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	494d      	ldr	r1, [pc, #308]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001166:	4313      	orrs	r3, r2
 8001168:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d040      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d107      	bne.n	800118e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	4b47      	ldr	r3, [pc, #284]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d115      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e07f      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b02      	cmp	r3, #2
 8001194:	d107      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001196:	4b41      	ldr	r3, [pc, #260]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d109      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e073      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a6:	4b3d      	ldr	r3, [pc, #244]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e06b      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011b6:	4b39      	ldr	r3, [pc, #228]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f023 0203 	bic.w	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4936      	ldr	r1, [pc, #216]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011c8:	f7ff fc16 	bl	80009f8 <HAL_GetTick>
 80011cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ce:	e00a      	b.n	80011e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d0:	f7ff fc12 	bl	80009f8 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	f241 3288 	movw	r2, #5000	; 0x1388
 80011de:	4293      	cmp	r3, r2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e053      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e6:	4b2d      	ldr	r3, [pc, #180]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 020c 	and.w	r2, r3, #12
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d1eb      	bne.n	80011d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d210      	bcs.n	8001228 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001206:	4b24      	ldr	r3, [pc, #144]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f023 0207 	bic.w	r2, r3, #7
 800120e:	4922      	ldr	r1, [pc, #136]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	4313      	orrs	r3, r2
 8001214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	429a      	cmp	r2, r3
 8001222:	d001      	beq.n	8001228 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e032      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d008      	beq.n	8001246 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001234:	4b19      	ldr	r3, [pc, #100]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	4916      	ldr	r1, [pc, #88]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	4313      	orrs	r3, r2
 8001244:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	2b00      	cmp	r3, #0
 8001250:	d009      	beq.n	8001266 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	490e      	ldr	r1, [pc, #56]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	4313      	orrs	r3, r2
 8001264:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001266:	f000 f821 	bl	80012ac <HAL_RCC_GetSysClockFreq>
 800126a:	4602      	mov	r2, r0
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	490a      	ldr	r1, [pc, #40]	; (80012a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001278:	5ccb      	ldrb	r3, [r1, r3]
 800127a:	fa22 f303 	lsr.w	r3, r2, r3
 800127e:	4a09      	ldr	r2, [pc, #36]	; (80012a4 <HAL_RCC_ClockConfig+0x1cc>)
 8001280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_RCC_ClockConfig+0x1d0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fb74 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40022000 	.word	0x40022000
 800129c:	40021000 	.word	0x40021000
 80012a0:	080022c4 	.word	0x080022c4
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000004 	.word	0x20000004

080012ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <HAL_RCC_GetSysClockFreq+0x94>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d002      	beq.n	80012dc <HAL_RCC_GetSysClockFreq+0x30>
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d003      	beq.n	80012e2 <HAL_RCC_GetSysClockFreq+0x36>
 80012da:	e027      	b.n	800132c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_RCC_GetSysClockFreq+0x98>)
 80012de:	613b      	str	r3, [r7, #16]
      break;
 80012e0:	e027      	b.n	8001332 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	0c9b      	lsrs	r3, r3, #18
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	4a17      	ldr	r2, [pc, #92]	; (8001348 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012ec:	5cd3      	ldrb	r3, [r2, r3]
 80012ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d010      	beq.n	800131c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_RCC_GetSysClockFreq+0x94>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	0c5b      	lsrs	r3, r3, #17
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	4a11      	ldr	r2, [pc, #68]	; (800134c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001306:	5cd3      	ldrb	r3, [r2, r3]
 8001308:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <HAL_RCC_GetSysClockFreq+0x98>)
 800130e:	fb03 f202 	mul.w	r2, r3, r2
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	fbb2 f3f3 	udiv	r3, r2, r3
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	e004      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	613b      	str	r3, [r7, #16]
      break;
 800132a:	e002      	b.n	8001332 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_RCC_GetSysClockFreq+0x98>)
 800132e:	613b      	str	r3, [r7, #16]
      break;
 8001330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001332:	693b      	ldr	r3, [r7, #16]
}
 8001334:	4618      	mov	r0, r3
 8001336:	371c      	adds	r7, #28
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	007a1200 	.word	0x007a1200
 8001348:	080022dc 	.word	0x080022dc
 800134c:	080022ec 	.word	0x080022ec
 8001350:	003d0900 	.word	0x003d0900

08001354 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <RCC_Delay+0x34>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0a      	ldr	r2, [pc, #40]	; (800138c <RCC_Delay+0x38>)
 8001362:	fba2 2303 	umull	r2, r3, r2, r3
 8001366:	0a5b      	lsrs	r3, r3, #9
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	fb02 f303 	mul.w	r3, r2, r3
 800136e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001370:	bf00      	nop
  }
  while (Delay --);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1e5a      	subs	r2, r3, #1
 8001376:	60fa      	str	r2, [r7, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f9      	bne.n	8001370 <RCC_Delay+0x1c>
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	20000000 	.word	0x20000000
 800138c:	10624dd3 	.word	0x10624dd3

08001390 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001390:	b490      	push	{r4, r7}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	461a      	mov	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	0e1b      	lsrs	r3, r3, #24
 80013a4:	4413      	add	r3, r2
 80013a6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80013a8:	6822      	ldr	r2, [r4, #0]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	fa93 f3a3 	rbit	r3, r3
 80013b4:	613b      	str	r3, [r7, #16]
  return result;
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	fab3 f383 	clz	r3, r3
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	210f      	movs	r1, #15
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	401a      	ands	r2, r3
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa93 f3a3 	rbit	r3, r3
 80013d4:	61bb      	str	r3, [r7, #24]
  return result;
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	fab3 f383 	clz	r3, r3
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	4313      	orrs	r3, r2
 80013e8:	6023      	str	r3, [r4, #0]
}
 80013ea:	bf00      	nop
 80013ec:	3720      	adds	r7, #32
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc90      	pop	{r4, r7}
 80013f2:	4770      	bx	lr

080013f4 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80013f4:	b490      	push	{r4, r7}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	461a      	mov	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	0e1b      	lsrs	r3, r3, #24
 8001408:	4413      	add	r3, r2
 800140a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800140c:	6822      	ldr	r2, [r4, #0]
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	fa93 f3a3 	rbit	r3, r3
 8001418:	613b      	str	r3, [r7, #16]
  return result;
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	fab3 f383 	clz	r3, r3
 8001420:	b2db      	uxtb	r3, r3
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	2103      	movs	r1, #3
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	401a      	ands	r2, r3
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	fa93 f3a3 	rbit	r3, r3
 8001438:	61bb      	str	r3, [r7, #24]
  return result;
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	fab3 f383 	clz	r3, r3
 8001440:	b2db      	uxtb	r3, r3
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	4313      	orrs	r3, r2
 800144c:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 800144e:	bf00      	nop
 8001450:	3720      	adds	r7, #32
 8001452:	46bd      	mov	sp, r7
 8001454:	bc90      	pop	{r4, r7}
 8001456:	4770      	bx	lr

08001458 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8001458:	b490      	push	{r4, r7}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	461a      	mov	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	0e1b      	lsrs	r3, r3, #24
 800146c:	4413      	add	r3, r2
 800146e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001470:	6822      	ldr	r2, [r4, #0]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	fa93 f3a3 	rbit	r3, r3
 800147c:	613b      	str	r3, [r7, #16]
  return result;
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	fab3 f383 	clz	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	2104      	movs	r1, #4
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	401a      	ands	r2, r3
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa93 f3a3 	rbit	r3, r3
 800149c:	61bb      	str	r3, [r7, #24]
  return result;
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	fab3 f383 	clz	r3, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 80014b2:	bf00      	nop
 80014b4:	3720      	adds	r7, #32
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc90      	pop	{r4, r7}
 80014ba:	4770      	bx	lr

080014bc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	43db      	mvns	r3, r3
 80014d2:	401a      	ands	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	fa93 f3a3 	rbit	r3, r3
 80014e0:	613b      	str	r3, [r7, #16]
  return result;
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	4619      	mov	r1, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	408b      	lsls	r3, r1
 80014f0:	431a      	orrs	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	60da      	str	r2, [r3, #12]
}
 80014f6:	bf00      	nop
 80014f8:	371c      	adds	r7, #28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	0c1b      	lsrs	r3, r3, #16
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	fa93 f3a3 	rbit	r3, r3
 800151e:	60fb      	str	r3, [r7, #12]
  return result;
 8001520:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001522:	fab3 f383 	clz	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800152a:	e044      	b.n	80015b6 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800152c:	2201      	movs	r2, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	409a      	lsls	r2, r3
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	4013      	ands	r3, r2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d03a      	beq.n	80015b0 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	2b07      	cmp	r3, #7
 800153e:	d806      	bhi.n	800154e <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8001540:	f240 1201 	movw	r2, #257	; 0x101
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	61bb      	str	r3, [r7, #24]
 800154c:	e008      	b.n	8001560 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3b08      	subs	r3, #8
 8001552:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800155e:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b08      	cmp	r3, #8
 8001566:	d106      	bne.n	8001576 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	461a      	mov	r2, r3
 800156e:	69b9      	ldr	r1, [r7, #24]
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ffa3 	bl	80014bc <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	461a      	mov	r2, r3
 800157c:	69b9      	ldr	r1, [r7, #24]
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ff06 	bl	8001390 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d003      	beq.n	8001594 <LL_GPIO_Init+0x94>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b09      	cmp	r3, #9
 8001592:	d10d      	bne.n	80015b0 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	461a      	mov	r2, r3
 800159a:	69b9      	ldr	r1, [r7, #24]
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff29 	bl	80013f4 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	461a      	mov	r2, r3
 80015a8:	69b9      	ldr	r1, [r7, #24]
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ff54 	bl	8001458 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	3301      	adds	r3, #1
 80015b4:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	fa22 f303 	lsr.w	r3, r2, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1b4      	bne.n	800152c <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <LL_RCC_GetSysClkSource+0x14>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 030c 	and.w	r3, r3, #12
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	40021000 	.word	0x40021000

080015e4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <LL_RCC_GetAHBPrescaler+0x14>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	40021000 	.word	0x40021000

080015fc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	40021000 	.word	0x40021000

08001614 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <LL_RCC_GetAPB2Prescaler+0x14>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	40021000 	.word	0x40021000

0800162c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <LL_RCC_PLL_GetMainSource+0x14>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	40021000 	.word	0x40021000

08001644 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	40021000 	.word	0x40021000

0800165c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <LL_RCC_PLL_GetPrediv+0x18>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	0c5b      	lsrs	r3, r3, #17
 8001666:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000

08001678 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001680:	f000 f820 	bl	80016c4 <RCC_GetSystemClockFreq>
 8001684:	4602      	mov	r2, r0
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f83e 	bl	8001710 <RCC_GetHCLKClockFreq>
 8001694:	4602      	mov	r2, r0
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f84c 	bl	800173c <RCC_GetPCLK1ClockFreq>
 80016a4:	4602      	mov	r2, r0
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f858 	bl	8001764 <RCC_GetPCLK2ClockFreq>
 80016b4:	4602      	mov	r2, r0
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60da      	str	r2, [r3, #12]
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80016ce:	f7ff ff7d 	bl	80015cc <LL_RCC_GetSysClkSource>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d00c      	beq.n	80016f2 <RCC_GetSystemClockFreq+0x2e>
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d80e      	bhi.n	80016fa <RCC_GetSystemClockFreq+0x36>
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <RCC_GetSystemClockFreq+0x22>
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d003      	beq.n	80016ec <RCC_GetSystemClockFreq+0x28>
 80016e4:	e009      	b.n	80016fa <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <RCC_GetSystemClockFreq+0x48>)
 80016e8:	607b      	str	r3, [r7, #4]
      break;
 80016ea:	e009      	b.n	8001700 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <RCC_GetSystemClockFreq+0x48>)
 80016ee:	607b      	str	r3, [r7, #4]
      break;
 80016f0:	e006      	b.n	8001700 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80016f2:	f000 f84b 	bl	800178c <RCC_PLL_GetFreqDomain_SYS>
 80016f6:	6078      	str	r0, [r7, #4]
      break;
 80016f8:	e002      	b.n	8001700 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <RCC_GetSystemClockFreq+0x48>)
 80016fc:	607b      	str	r3, [r7, #4]
      break;
 80016fe:	bf00      	nop
  }

  return frequency;
 8001700:	687b      	ldr	r3, [r7, #4]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	007a1200 	.word	0x007a1200

08001710 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001718:	f7ff ff64 	bl	80015e4 <LL_RCC_GetAHBPrescaler>
 800171c:	4603      	mov	r3, r0
 800171e:	091b      	lsrs	r3, r3, #4
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <RCC_GetHCLKClockFreq+0x28>)
 8001726:	5cd3      	ldrb	r3, [r2, r3]
 8001728:	461a      	mov	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	40d3      	lsrs	r3, r2
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	080022c4 	.word	0x080022c4

0800173c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001744:	f7ff ff5a 	bl	80015fc <LL_RCC_GetAPB1Prescaler>
 8001748:	4603      	mov	r3, r0
 800174a:	0a1b      	lsrs	r3, r3, #8
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <RCC_GetPCLK1ClockFreq+0x24>)
 800174e:	5cd3      	ldrb	r3, [r2, r3]
 8001750:	461a      	mov	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	40d3      	lsrs	r3, r2
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	080022d4 	.word	0x080022d4

08001764 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800176c:	f7ff ff52 	bl	8001614 <LL_RCC_GetAPB2Prescaler>
 8001770:	4603      	mov	r3, r0
 8001772:	0adb      	lsrs	r3, r3, #11
 8001774:	4a04      	ldr	r2, [pc, #16]	; (8001788 <RCC_GetPCLK2ClockFreq+0x24>)
 8001776:	5cd3      	ldrb	r3, [r2, r3]
 8001778:	461a      	mov	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	40d3      	lsrs	r3, r2
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	080022d4 	.word	0x080022d4

0800178c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	2300      	movs	r3, #0
 8001798:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800179a:	f7ff ff47 	bl	800162c <LL_RCC_PLL_GetMainSource>
 800179e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d004      	beq.n	80017b0 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ac:	d003      	beq.n	80017b6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80017ae:	e00b      	b.n	80017c8 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80017b0:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80017b2:	607b      	str	r3, [r7, #4]
      break;
 80017b4:	e00b      	b.n	80017ce <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80017b6:	f7ff ff51 	bl	800165c <LL_RCC_PLL_GetPrediv>
 80017ba:	4603      	mov	r3, r0
 80017bc:	3301      	adds	r3, #1
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80017c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c4:	607b      	str	r3, [r7, #4]
      break;
 80017c6:	e002      	b.n	80017ce <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80017ca:	607b      	str	r3, [r7, #4]
      break;
 80017cc:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80017ce:	f7ff ff39 	bl	8001644 <LL_RCC_PLL_GetMultiplicator>
 80017d2:	4603      	mov	r3, r0
 80017d4:	0c9b      	lsrs	r3, r3, #18
 80017d6:	3302      	adds	r3, #2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	fb02 f303 	mul.w	r3, r2, r3
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	003d0900 	.word	0x003d0900
 80017ec:	007a1200 	.word	0x007a1200

080017f0 <LL_USART_IsEnabled>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001804:	bf0c      	ite	eq
 8001806:	2301      	moveq	r3, #1
 8001808:	2300      	movne	r3, #0
 800180a:	b2db      	uxtb	r3, r3
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <LL_USART_SetStopBitsLength>:
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	611a      	str	r2, [r3, #16]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <LL_USART_SetHWFlowCtrl>:
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	615a      	str	r2, [r3, #20]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
	...

08001860 <LL_USART_SetBaudRate>:
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	009a      	lsls	r2, r3, #2
 8001876:	441a      	add	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001880:	4a25      	ldr	r2, [pc, #148]	; (8001918 <LL_USART_SetBaudRate+0xb8>)
 8001882:	fba2 2303 	umull	r2, r3, r2, r3
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	b29b      	uxth	r3, r3
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	b299      	uxth	r1, r3
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	009a      	lsls	r2, r3, #2
 8001898:	441a      	add	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	fbb2 f2f3 	udiv	r2, r2, r3
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <LL_USART_SetBaudRate+0xb8>)
 80018a4:	fba3 0302 	umull	r0, r3, r3, r2
 80018a8:	095b      	lsrs	r3, r3, #5
 80018aa:	2064      	movs	r0, #100	; 0x64
 80018ac:	fb00 f303 	mul.w	r3, r0, r3
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	011b      	lsls	r3, r3, #4
 80018b4:	3332      	adds	r3, #50	; 0x32
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <LL_USART_SetBaudRate+0xb8>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	095b      	lsrs	r3, r3, #5
 80018be:	b29b      	uxth	r3, r3
 80018c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	440b      	add	r3, r1
 80018c8:	b299      	uxth	r1, r3
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	009a      	lsls	r2, r3, #2
 80018d4:	441a      	add	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	fbb2 f2f3 	udiv	r2, r2, r3
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <LL_USART_SetBaudRate+0xb8>)
 80018e0:	fba3 0302 	umull	r0, r3, r3, r2
 80018e4:	095b      	lsrs	r3, r3, #5
 80018e6:	2064      	movs	r0, #100	; 0x64
 80018e8:	fb00 f303 	mul.w	r3, r0, r3
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	3332      	adds	r3, #50	; 0x32
 80018f2:	4a09      	ldr	r2, [pc, #36]	; (8001918 <LL_USART_SetBaudRate+0xb8>)
 80018f4:	fba2 2303 	umull	r2, r3, r2, r3
 80018f8:	095b      	lsrs	r3, r3, #5
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	b29b      	uxth	r3, r3
 8001902:	440b      	add	r3, r1
 8001904:	b29b      	uxth	r3, r3
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	609a      	str	r2, [r3, #8]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	51eb851f 	.word	0x51eb851f

0800191c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ff5e 	bl	80017f0 <LL_USART_IsEnabled>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d145      	bne.n	80019c6 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001942:	f023 030c 	bic.w	r3, r3, #12
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	6851      	ldr	r1, [r2, #4]
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	68d2      	ldr	r2, [r2, #12]
 800194e:	4311      	orrs	r1, r2
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	6912      	ldr	r2, [r2, #16]
 8001954:	430a      	orrs	r2, r1
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4619      	mov	r1, r3
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ff57 	bl	8001816 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	4619      	mov	r1, r3
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ff63 	bl	800183a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001974:	f107 0308 	add.w	r3, r7, #8
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fe7d 	bl	8001678 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a13      	ldr	r2, [pc, #76]	; (80019d0 <LL_USART_Init+0xb4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d102      	bne.n	800198c <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	61bb      	str	r3, [r7, #24]
 800198a:	e00c      	b.n	80019a6 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a11      	ldr	r2, [pc, #68]	; (80019d4 <LL_USART_Init+0xb8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d102      	bne.n	800199a <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	61bb      	str	r3, [r7, #24]
 8001998:	e005      	b.n	80019a6 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <LL_USART_Init+0xbc>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d101      	bne.n	80019a6 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00c      	beq.n	80019c6 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d008      	beq.n	80019c6 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 80019b4:	2300      	movs	r3, #0
 80019b6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	69b9      	ldr	r1, [r7, #24]
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff4d 	bl	8001860 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80019c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3720      	adds	r7, #32
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40013800 	.word	0x40013800
 80019d4:	40004400 	.word	0x40004400
 80019d8:	40004800 	.word	0x40004800

080019dc <Kernel_event_flag_init>:
#include "event.h"

static uint32_t sEventFlag;

void Kernel_event_flag_init(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
	sEventFlag = 0;
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <Kernel_event_flag_init+0x14>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000094 	.word	0x20000094

080019f4 <Kernel_event_flag_set>:

void Kernel_event_flag_set(KernelEventFlag_t event)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
	sEventFlag |= (uint32_t)event;
 80019fe:	79fa      	ldrb	r2, [r7, #7]
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <Kernel_event_flag_set+0x20>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	4a03      	ldr	r2, [pc, #12]	; (8001a14 <Kernel_event_flag_set+0x20>)
 8001a08:	6013      	str	r3, [r2, #0]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	20000094 	.word	0x20000094

08001a18 <Kernel_event_flag_clear>:

void Kernel_event_flag_clear(KernelEventFlag_t event)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
	sEventFlag &= ~((uint32_t)event);
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	43da      	mvns	r2, r3
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <Kernel_event_flag_clear+0x24>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	4a03      	ldr	r2, [pc, #12]	; (8001a3c <Kernel_event_flag_clear+0x24>)
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000094 	.word	0x20000094

08001a40 <Kernel_event_flag_check>:

bool Kernel_event_flag_check(KernelEventFlag_t event)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
	if(sEventFlag & (uint32_t)event){
 8001a4a:	79fa      	ldrb	r2, [r7, #7]
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <Kernel_event_flag_check+0x2c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <Kernel_event_flag_check+0x22>
		Kernel_event_flag_clear(event);
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ffdd 	bl	8001a18 <Kernel_event_flag_clear>
		return true;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <Kernel_event_flag_check+0x24>
	}

	return false;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000094 	.word	0x20000094

08001a70 <Kernel_start>:
#include "kernel.h"
#include "task.h"
#include "msg.h"

void Kernel_start(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	Kernel_task_start();
 8001a74:	f000 fac6 	bl	8002004 <Kernel_task_start>
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <Kernel_yield>:

void Kernel_yield(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
	Kernel_task_scheduler();
 8001a80:	f000 fa84 	bl	8001f8c <Kernel_task_scheduler>
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <Kernel_send_events>:

void Kernel_send_events(uint32_t event_list)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < 32; i++){
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	e01a      	b.n	8001acc <Kernel_send_events+0x44>
		if((event_list >> i) & 1){
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00f      	beq.n	8001ac6 <Kernel_send_events+0x3e>
			KernelEventFlag_t sending_event = KernelEventFlag_Empty;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	72fb      	strb	r3, [r7, #11]
			//sending_event = (KernelEventFlag_t)SET_BIT(sending_event, i);
			sending_event |= (1 << i);
 8001aaa:	2201      	movs	r2, #1
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	b25a      	sxtb	r2, r3
 8001ab4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	b25b      	sxtb	r3, r3
 8001abc:	72fb      	strb	r3, [r7, #11]
			Kernel_event_flag_set(sending_event);
 8001abe:	7afb      	ldrb	r3, [r7, #11]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff97 	bl	80019f4 <Kernel_event_flag_set>
	for(uint32_t i = 0; i < 32; i++){
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b1f      	cmp	r3, #31
 8001ad0:	d9e1      	bls.n	8001a96 <Kernel_send_events+0xe>
		}
	}
}
 8001ad2:	bf00      	nop
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <Kernel_wait_events>:

KernelEventFlag_t Kernel_wait_events(uint32_t waiting_list)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < 32; i++){
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	e01f      	b.n	8001b2a <Kernel_wait_events+0x4e>
		if((waiting_list >> i) & 1){
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	fa22 f303 	lsr.w	r3, r2, r3
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d014      	beq.n	8001b24 <Kernel_wait_events+0x48>
			KernelEventFlag_t waiting_event = KernelEventFlag_Empty;
 8001afa:	2300      	movs	r3, #0
 8001afc:	72fb      	strb	r3, [r7, #11]
			//waiting_event = (KernelEventFlag_t)SET_BIT(waiting_event, i);
			waiting_event |= (1 << i);
 8001afe:	2201      	movs	r2, #1
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	b25a      	sxtb	r2, r3
 8001b08:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	b25b      	sxtb	r3, r3
 8001b10:	72fb      	strb	r3, [r7, #11]

			if(Kernel_event_flag_check(waiting_event)){
 8001b12:	7afb      	ldrb	r3, [r7, #11]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff93 	bl	8001a40 <Kernel_event_flag_check>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <Kernel_wait_events+0x48>
				return waiting_event;
 8001b20:	7afb      	ldrb	r3, [r7, #11]
 8001b22:	e006      	b.n	8001b32 <Kernel_wait_events+0x56>
	for(uint32_t i = 0; i < 32; i++){
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	3301      	adds	r3, #1
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2b1f      	cmp	r3, #31
 8001b2e:	d9dc      	bls.n	8001aea <Kernel_wait_events+0xe>
			}
		}
	}

	return KernelEventFlag_Empty;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <Kernel_send_msg>:

bool Kernel_send_msg(KernelMsgQ_t Qname, void* data, uint32_t count)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b088      	sub	sp, #32
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	73fb      	strb	r3, [r7, #15]
	uint8_t* d = (uint8_t*)data;
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	61fb      	str	r3, [r7, #28]

	for(uint32_t i = 0; i < count; i++){
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61bb      	str	r3, [r7, #24]
 8001b50:	e025      	b.n	8001b9e <Kernel_send_msg+0x64>
		if(false == Kernel_msgQ_enqueue(Qname, *d)){
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	781a      	ldrb	r2, [r3, #0]
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f8d6 	bl	8001d0c <Kernel_msgQ_enqueue>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f083 0301 	eor.w	r3, r3, #1
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d012      	beq.n	8001b92 <Kernel_send_msg+0x58>
			for(uint32_t j = 0; j < i; j++){
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	e009      	b.n	8001b86 <Kernel_send_msg+0x4c>
				uint8_t rollback;
				Kernel_msgQ_dequeue(Qname, &rollback);
 8001b72:	f107 0213 	add.w	r2, r7, #19
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f920 	bl	8001dc0 <Kernel_msgQ_dequeue>
			for(uint32_t j = 0; j < i; j++){
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	3301      	adds	r3, #1
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d3f1      	bcc.n	8001b72 <Kernel_send_msg+0x38>
			}
			return false;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e00a      	b.n	8001ba8 <Kernel_send_msg+0x6e>
		}
		d++;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3301      	adds	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
	for(uint32_t i = 0; i < count; i++){
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d3d5      	bcc.n	8001b52 <Kernel_send_msg+0x18>
	}

	return true;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3720      	adds	r7, #32
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <Kernel_recv_msg>:

uint32_t Kernel_recv_msg(KernelMsgQ_t Qname, void* out_data, uint32_t count)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	73fb      	strb	r3, [r7, #15]
	uint8_t* d = (uint8_t*)out_data;
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	617b      	str	r3, [r7, #20]

	for(uint32_t i = 0; i < count; i++){
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	e012      	b.n	8001bee <Kernel_recv_msg+0x3e>
		if(false == Kernel_msgQ_dequeue(Qname, d)){
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	6979      	ldr	r1, [r7, #20]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 f8f7 	bl	8001dc0 <Kernel_msgQ_dequeue>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f083 0301 	eor.w	r3, r3, #1
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <Kernel_recv_msg+0x32>
			return i;
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	e00a      	b.n	8001bf8 <Kernel_recv_msg+0x48>
		}
		d++;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3301      	adds	r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
	for(uint32_t i = 0; i < count; i++){
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	3301      	adds	r3, #1
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d3e8      	bcc.n	8001bc8 <Kernel_recv_msg+0x18>
	}

	return count;
 8001bf6:	687b      	ldr	r3, [r7, #4]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <Kernel_msgQ_init>:
#include "msg.h"

KernelCirQ_t sMsgQ[KernelMsgQ_Num];

void Kernel_msgQ_init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < KernelMsgQ_Num; i++){
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	e023      	b.n	8001c54 <Kernel_msgQ_init+0x54>
		sMsgQ[i].front = 0;
 8001c0c:	4915      	ldr	r1, [pc, #84]	; (8001c64 <Kernel_msgQ_init+0x64>)
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	019b      	lsls	r3, r3, #6
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	440b      	add	r3, r1
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
		sMsgQ[i].rear = 0;
 8001c1e:	4911      	ldr	r1, [pc, #68]	; (8001c64 <Kernel_msgQ_init+0x64>)
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	019b      	lsls	r3, r3, #6
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	440b      	add	r3, r1
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
		//memclr(sMsgQ[i].Queue, MSG_Q_SIZE_BYTE);
		memset(sMsgQ[i].Queue, 0, MSG_Q_SIZE_BYTE);
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	019b      	lsls	r3, r3, #6
 8001c38:	4413      	add	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	3308      	adds	r3, #8
 8001c3e:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <Kernel_msgQ_init+0x64>)
 8001c40:	4413      	add	r3, r2
 8001c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 fa23 	bl	8002094 <memset>
	for(uint32_t i = 0; i < KernelMsgQ_Num; i++){
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3301      	adds	r3, #1
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d9d8      	bls.n	8001c0c <Kernel_msgQ_init+0xc>
	}
}
 8001c5a:	bf00      	nop
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000098 	.word	0x20000098

08001c68 <Kernel_msgQ_is_empty>:

bool Kernel_msgQ_is_empty(KernelMsgQ_t Qname)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
	if(Qname >= KernelMsgQ_Num){
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <Kernel_msgQ_is_empty+0x14>
		return false;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e015      	b.n	8001ca8 <Kernel_msgQ_is_empty+0x40>
	}

	if(sMsgQ[Qname].front == sMsgQ[Qname].rear){
 8001c7c:	79fa      	ldrb	r2, [r7, #7]
 8001c7e:	490d      	ldr	r1, [pc, #52]	; (8001cb4 <Kernel_msgQ_is_empty+0x4c>)
 8001c80:	4613      	mov	r3, r2
 8001c82:	019b      	lsls	r3, r3, #6
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	6819      	ldr	r1, [r3, #0]
 8001c8c:	79fa      	ldrb	r2, [r7, #7]
 8001c8e:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <Kernel_msgQ_is_empty+0x4c>)
 8001c90:	4613      	mov	r3, r2
 8001c92:	019b      	lsls	r3, r3, #6
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4403      	add	r3, r0
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4299      	cmp	r1, r3
 8001ca0:	d101      	bne.n	8001ca6 <Kernel_msgQ_is_empty+0x3e>
		return true;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <Kernel_msgQ_is_empty+0x40>
	}

	return false;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000098 	.word	0x20000098

08001cb8 <Kernel_msgQ_is_full>:

bool Kernel_msgQ_is_full(KernelMsgQ_t Qname)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
	if(Qname >= KernelMsgQ_Num){
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <Kernel_msgQ_is_full+0x14>
		return false;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	e018      	b.n	8001cfe <Kernel_msgQ_is_full+0x46>
	}

	if(((sMsgQ[Qname].rear + 1) % MSG_Q_SIZE_BYTE) == sMsgQ[Qname].front){
 8001ccc:	79fa      	ldrb	r2, [r7, #7]
 8001cce:	490e      	ldr	r1, [pc, #56]	; (8001d08 <Kernel_msgQ_is_full+0x50>)
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	019b      	lsls	r3, r3, #6
 8001cd4:	4413      	add	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	440b      	add	r3, r1
 8001cda:	3304      	adds	r3, #4
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8001ce4:	79fa      	ldrb	r2, [r7, #7]
 8001ce6:	4808      	ldr	r0, [pc, #32]	; (8001d08 <Kernel_msgQ_is_full+0x50>)
 8001ce8:	4613      	mov	r3, r2
 8001cea:	019b      	lsls	r3, r3, #6
 8001cec:	4413      	add	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4403      	add	r3, r0
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4299      	cmp	r1, r3
 8001cf6:	d101      	bne.n	8001cfc <Kernel_msgQ_is_full+0x44>
		return true;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <Kernel_msgQ_is_full+0x46>
	}

	return false;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	20000098 	.word	0x20000098

08001d0c <Kernel_msgQ_enqueue>:

bool Kernel_msgQ_enqueue(KernelMsgQ_t Qname, uint8_t data)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	460a      	mov	r2, r1
 8001d16:	71fb      	strb	r3, [r7, #7]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	71bb      	strb	r3, [r7, #6]
	if(Qname >= KernelMsgQ_Num){
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <Kernel_msgQ_enqueue+0x1a>
		return false;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e045      	b.n	8001db2 <Kernel_msgQ_enqueue+0xa6>
	}

	if(Kernel_msgQ_is_full(Qname)){
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ffc5 	bl	8001cb8 <Kernel_msgQ_is_full>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <Kernel_msgQ_enqueue+0x2c>
		return false;
 8001d34:	2300      	movs	r3, #0
 8001d36:	e03c      	b.n	8001db2 <Kernel_msgQ_enqueue+0xa6>
	}

	sMsgQ[Qname].rear++;
 8001d38:	79fa      	ldrb	r2, [r7, #7]
 8001d3a:	4920      	ldr	r1, [pc, #128]	; (8001dbc <Kernel_msgQ_enqueue+0xb0>)
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	019b      	lsls	r3, r3, #6
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	440b      	add	r3, r1
 8001d46:	3304      	adds	r3, #4
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	1c59      	adds	r1, r3, #1
 8001d4c:	481b      	ldr	r0, [pc, #108]	; (8001dbc <Kernel_msgQ_enqueue+0xb0>)
 8001d4e:	4613      	mov	r3, r2
 8001d50:	019b      	lsls	r3, r3, #6
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4403      	add	r3, r0
 8001d58:	3304      	adds	r3, #4
 8001d5a:	6019      	str	r1, [r3, #0]
	sMsgQ[Qname].rear %= MSG_Q_SIZE_BYTE;
 8001d5c:	79fa      	ldrb	r2, [r7, #7]
 8001d5e:	4917      	ldr	r1, [pc, #92]	; (8001dbc <Kernel_msgQ_enqueue+0xb0>)
 8001d60:	4613      	mov	r3, r2
 8001d62:	019b      	lsls	r3, r3, #6
 8001d64:	4413      	add	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	440b      	add	r3, r1
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	79fa      	ldrb	r2, [r7, #7]
 8001d70:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8001d74:	4811      	ldr	r0, [pc, #68]	; (8001dbc <Kernel_msgQ_enqueue+0xb0>)
 8001d76:	4613      	mov	r3, r2
 8001d78:	019b      	lsls	r3, r3, #6
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4403      	add	r3, r0
 8001d80:	3304      	adds	r3, #4
 8001d82:	6019      	str	r1, [r3, #0]

	uint32_t idx = sMsgQ[Qname].rear;
 8001d84:	79fa      	ldrb	r2, [r7, #7]
 8001d86:	490d      	ldr	r1, [pc, #52]	; (8001dbc <Kernel_msgQ_enqueue+0xb0>)
 8001d88:	4613      	mov	r3, r2
 8001d8a:	019b      	lsls	r3, r3, #6
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	440b      	add	r3, r1
 8001d92:	3304      	adds	r3, #4
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	60fb      	str	r3, [r7, #12]
	sMsgQ[Qname].Queue[idx] = data;
 8001d98:	79fa      	ldrb	r2, [r7, #7]
 8001d9a:	4908      	ldr	r1, [pc, #32]	; (8001dbc <Kernel_msgQ_enqueue+0xb0>)
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	019b      	lsls	r3, r3, #6
 8001da0:	4413      	add	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	18ca      	adds	r2, r1, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4413      	add	r3, r2
 8001daa:	3308      	adds	r3, #8
 8001dac:	79ba      	ldrb	r2, [r7, #6]
 8001dae:	701a      	strb	r2, [r3, #0]

	return true;
 8001db0:	2301      	movs	r3, #1
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000098 	.word	0x20000098

08001dc0 <Kernel_msgQ_dequeue>:

bool Kernel_msgQ_dequeue(KernelMsgQ_t Qname, uint8_t* out_data)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	71fb      	strb	r3, [r7, #7]
	if(Qname >= KernelMsgQ_Num){
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <Kernel_msgQ_dequeue+0x16>
		return false;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e041      	b.n	8001e5a <Kernel_msgQ_dequeue+0x9a>
	}

	if(Kernel_msgQ_is_empty(Qname)){
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff45 	bl	8001c68 <Kernel_msgQ_is_empty>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <Kernel_msgQ_dequeue+0x28>
		return false;
 8001de4:	2300      	movs	r3, #0
 8001de6:	e038      	b.n	8001e5a <Kernel_msgQ_dequeue+0x9a>
	}

	sMsgQ[Qname].front++;
 8001de8:	79fa      	ldrb	r2, [r7, #7]
 8001dea:	491e      	ldr	r1, [pc, #120]	; (8001e64 <Kernel_msgQ_dequeue+0xa4>)
 8001dec:	4613      	mov	r3, r2
 8001dee:	019b      	lsls	r3, r3, #6
 8001df0:	4413      	add	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	440b      	add	r3, r1
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	1c59      	adds	r1, r3, #1
 8001dfa:	481a      	ldr	r0, [pc, #104]	; (8001e64 <Kernel_msgQ_dequeue+0xa4>)
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	019b      	lsls	r3, r3, #6
 8001e00:	4413      	add	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4403      	add	r3, r0
 8001e06:	6019      	str	r1, [r3, #0]
	sMsgQ[Qname].front %= MSG_Q_SIZE_BYTE;
 8001e08:	79fa      	ldrb	r2, [r7, #7]
 8001e0a:	4916      	ldr	r1, [pc, #88]	; (8001e64 <Kernel_msgQ_dequeue+0xa4>)
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	019b      	lsls	r3, r3, #6
 8001e10:	4413      	add	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	440b      	add	r3, r1
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	79fa      	ldrb	r2, [r7, #7]
 8001e1a:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8001e1e:	4811      	ldr	r0, [pc, #68]	; (8001e64 <Kernel_msgQ_dequeue+0xa4>)
 8001e20:	4613      	mov	r3, r2
 8001e22:	019b      	lsls	r3, r3, #6
 8001e24:	4413      	add	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4403      	add	r3, r0
 8001e2a:	6019      	str	r1, [r3, #0]

	uint32_t idx = sMsgQ[Qname].front;
 8001e2c:	79fa      	ldrb	r2, [r7, #7]
 8001e2e:	490d      	ldr	r1, [pc, #52]	; (8001e64 <Kernel_msgQ_dequeue+0xa4>)
 8001e30:	4613      	mov	r3, r2
 8001e32:	019b      	lsls	r3, r3, #6
 8001e34:	4413      	add	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	440b      	add	r3, r1
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60fb      	str	r3, [r7, #12]
	*out_data = sMsgQ[Qname].Queue[idx];
 8001e3e:	79fa      	ldrb	r2, [r7, #7]
 8001e40:	4908      	ldr	r1, [pc, #32]	; (8001e64 <Kernel_msgQ_dequeue+0xa4>)
 8001e42:	4613      	mov	r3, r2
 8001e44:	019b      	lsls	r3, r3, #6
 8001e46:	4413      	add	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	18ca      	adds	r2, r1, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	3308      	adds	r3, #8
 8001e52:	781a      	ldrb	r2, [r3, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	701a      	strb	r2, [r3, #0]

	return true;
 8001e58:	2301      	movs	r3, #1
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000098 	.word	0x20000098

08001e68 <Kernel_task_init>:
static __attribute__ ((naked)) void Kernel_task_context_switching(void);
static __attribute__ ((naked)) void Save_context(void);
static __attribute__ ((naked)) void Restore_context(void);

void Kernel_task_init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
	sAllocated_tcb_index = 0;
 8001e6e:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <Kernel_task_init+0x88>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
	sCurrent_tcb_index = 0;
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <Kernel_task_init+0x8c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]

	for(uint32_t i = 0; i < MAX_TASK_NUM; i++){
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	e02e      	b.n	8001ede <Kernel_task_init+0x76>
		sTask_list[i].stack_base = (uint8_t*)malloc(USR_TASK_STACK_SIZE);//(TASK_STACK_START + (i * USR_TASK_STACK_SIZE));
 8001e80:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e84:	f000 f8fe 	bl	8002084 <malloc>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4a1a      	ldr	r2, [pc, #104]	; (8001ef8 <Kernel_task_init+0x90>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4413      	add	r3, r2
 8001e94:	6059      	str	r1, [r3, #4]
		sTask_list[i].sp = (uint32_t)sTask_list[i].stack_base + USR_TASK_STACK_SIZE - 4;
 8001e96:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <Kernel_task_init+0x90>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f503 727f 	add.w	r2, r3, #1020	; 0x3fc
 8001ea4:	4914      	ldr	r1, [pc, #80]	; (8001ef8 <Kernel_task_init+0x90>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

		sTask_list[i].sp -= sizeof(KernelTaskContext_t);
 8001eac:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <Kernel_task_init+0x90>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001eb4:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 8001eb8:	490f      	ldr	r1, [pc, #60]	; (8001ef8 <Kernel_task_init+0x90>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		KernelTaskContext_t* ctx = (KernelTaskContext_t*)sTask_list[i].sp;
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <Kernel_task_init+0x90>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001ec8:	603b      	str	r3, [r7, #0]
		ctx->pc = 0;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	639a      	str	r2, [r3, #56]	; 0x38
		ctx->psr = 0x01000000;//ARM_MODE_BIT_SYS;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ed6:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 0; i < MAX_TASK_NUM; i++){
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3301      	adds	r3, #1
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d9cd      	bls.n	8001e80 <Kernel_task_init+0x18>
	}
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200006d0 	.word	0x200006d0
 8001ef4:	200006d4 	.word	0x200006d4
 8001ef8:	200006b0 	.word	0x200006b0

08001efc <Kernel_task_create>:

uint32_t Kernel_task_create(KernelTaskFunc_t startFunc)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	KernelTcb_t* new_tcb = &sTask_list[sAllocated_tcb_index++];
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <Kernel_task_create+0x44>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	490d      	ldr	r1, [pc, #52]	; (8001f40 <Kernel_task_create+0x44>)
 8001f0c:	600a      	str	r2, [r1, #0]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4a0c      	ldr	r2, [pc, #48]	; (8001f44 <Kernel_task_create+0x48>)
 8001f12:	4413      	add	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]

	if(sAllocated_tcb_index > MAX_TASK_NUM){
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <Kernel_task_create+0x44>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d902      	bls.n	8001f24 <Kernel_task_create+0x28>
		return NOT_ENOUGH_TASK_NUM;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	e008      	b.n	8001f36 <Kernel_task_create+0x3a>
	}

	KernelTaskContext_t* ctx = (KernelTaskContext_t*)new_tcb->sp;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60bb      	str	r3, [r7, #8]
	ctx->pc = (uint32_t)startFunc;
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	639a      	str	r2, [r3, #56]	; 0x38

	return (sAllocated_tcb_index - 1);
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <Kernel_task_create+0x44>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	3b01      	subs	r3, #1
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr
 8001f40:	200006d0 	.word	0x200006d0
 8001f44:	200006b0 	.word	0x200006b0

08001f48 <Scheduler_round_robin_algorithm>:

static KernelTcb_t* Scheduler_round_robin_algorithm(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
	sCurrent_tcb_index++;
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <Scheduler_round_robin_algorithm+0x38>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3301      	adds	r3, #1
 8001f52:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <Scheduler_round_robin_algorithm+0x38>)
 8001f54:	6013      	str	r3, [r2, #0]
	sCurrent_tcb_index %= sAllocated_tcb_index;
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <Scheduler_round_robin_algorithm+0x38>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <Scheduler_round_robin_algorithm+0x3c>)
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001f62:	fb01 f202 	mul.w	r2, r1, r2
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <Scheduler_round_robin_algorithm+0x38>)
 8001f6a:	6013      	str	r3, [r2, #0]

	return &sTask_list[sCurrent_tcb_index];
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <Scheduler_round_robin_algorithm+0x38>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <Scheduler_round_robin_algorithm+0x40>)
 8001f74:	4413      	add	r3, r2
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	200006d4 	.word	0x200006d4
 8001f84:	200006d0 	.word	0x200006d0
 8001f88:	200006b0 	.word	0x200006b0

08001f8c <Kernel_task_scheduler>:

void Kernel_task_scheduler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	sCurrent_tcb = &sTask_list[sCurrent_tcb_index];
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <Kernel_task_scheduler+0x24>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <Kernel_task_scheduler+0x28>)
 8001f98:	4413      	add	r3, r2
 8001f9a:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <Kernel_task_scheduler+0x2c>)
 8001f9c:	6013      	str	r3, [r2, #0]
	sNext_tcb = Scheduler_round_robin_algorithm();
 8001f9e:	f7ff ffd3 	bl	8001f48 <Scheduler_round_robin_algorithm>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <Kernel_task_scheduler+0x30>)
 8001fa6:	6013      	str	r3, [r2, #0]

	Kernel_task_context_switching();
 8001fa8:	f000 f80a 	bl	8001fc0 <Kernel_task_context_switching>
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200006d4 	.word	0x200006d4
 8001fb4:	200006b0 	.word	0x200006b0
 8001fb8:	200006c8 	.word	0x200006c8
 8001fbc:	200006cc 	.word	0x200006cc

08001fc0 <Kernel_task_context_switching>:

static __attribute__ ((naked)) void Kernel_task_context_switching(void)
{
	__asm__ ("B Save_context");
 8001fc0:	f000 b804 	b.w	8001fcc <Save_context>
	__asm__ ("B Restore_context");
 8001fc4:	f000 b810 	b.w	8001fe8 <Restore_context>
}
 8001fc8:	bf00      	nop
	...

08001fcc <Save_context>:

static __attribute__ ((naked)) void Save_context(void)
{
	__asm__ ("PUSH {lr}");
 8001fcc:	b500      	push	{lr}
	__asm__ ("PUSH {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}");
 8001fce:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	__asm__ ("MRS   r0, psr");
 8001fd2:	f3ef 8003 	mrs	r0, PSR
	__asm__ ("PUSH {r0}");
 8001fd6:	b401      	push	{r0}
	__asm__ ("LDR   r0, =sCurrent_tcb");
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <Save_context+0x18>)
	__asm__ ("LDR   r0, [r0]");
 8001fda:	6800      	ldr	r0, [r0, #0]
	__asm__ ("MRS   r1, msp");
 8001fdc:	f3ef 8108 	mrs	r1, MSP
	__asm__ ("STR   r1, [r0]");
 8001fe0:	6001      	str	r1, [r0, #0]
}
 8001fe2:	bf00      	nop
 8001fe4:	200006c8 	.word	0x200006c8

08001fe8 <Restore_context>:

static __attribute__ ((naked)) void Restore_context(void)
{
	__asm__ ("LDR   r0, =sNext_tcb");
 8001fe8:	4805      	ldr	r0, [pc, #20]	; (8002000 <Restore_context+0x18>)
	__asm__ ("LDR   r0, [r0]");
 8001fea:	6800      	ldr	r0, [r0, #0]
	__asm__ ("LDR   r1, [r0]");
 8001fec:	6801      	ldr	r1, [r0, #0]
	__asm__ ("MSR   msp, r1");
 8001fee:	f381 8808 	msr	MSP, r1
	__asm__ ("POP  {r0}");
 8001ff2:	bc01      	pop	{r0}
	__asm__ ("MSR   psr, r0");
 8001ff4:	f380 8803 	msr	PSR, r0
	__asm__ ("POP  {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}");
 8001ff8:	e8bd 1fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	__asm__ ("POP  {pc}");
 8001ffc:	bd00      	pop	{pc}
}
 8001ffe:	bf00      	nop
 8002000:	200006cc 	.word	0x200006cc

08002004 <Kernel_task_start>:

void Kernel_task_start(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
	sNext_tcb = &sTask_list[sCurrent_tcb_index];
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <Kernel_task_start+0x20>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4a06      	ldr	r2, [pc, #24]	; (8002028 <Kernel_task_start+0x24>)
 8002010:	4413      	add	r3, r2
 8002012:	4a06      	ldr	r2, [pc, #24]	; (800202c <Kernel_task_start+0x28>)
 8002014:	6013      	str	r3, [r2, #0]

	__asm__ ("B Restore_context");
 8002016:	f7ff bfe7 	b.w	8001fe8 <Restore_context>
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	200006d4 	.word	0x200006d4
 8002028:	200006b0 	.word	0x200006b0
 800202c:	200006cc 	.word	0x200006cc

08002030 <__errno>:
 8002030:	4b01      	ldr	r3, [pc, #4]	; (8002038 <__errno+0x8>)
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	2000000c 	.word	0x2000000c

0800203c <__libc_init_array>:
 800203c:	b570      	push	{r4, r5, r6, lr}
 800203e:	2600      	movs	r6, #0
 8002040:	4d0c      	ldr	r5, [pc, #48]	; (8002074 <__libc_init_array+0x38>)
 8002042:	4c0d      	ldr	r4, [pc, #52]	; (8002078 <__libc_init_array+0x3c>)
 8002044:	1b64      	subs	r4, r4, r5
 8002046:	10a4      	asrs	r4, r4, #2
 8002048:	42a6      	cmp	r6, r4
 800204a:	d109      	bne.n	8002060 <__libc_init_array+0x24>
 800204c:	f000 f8dc 	bl	8002208 <_init>
 8002050:	2600      	movs	r6, #0
 8002052:	4d0a      	ldr	r5, [pc, #40]	; (800207c <__libc_init_array+0x40>)
 8002054:	4c0a      	ldr	r4, [pc, #40]	; (8002080 <__libc_init_array+0x44>)
 8002056:	1b64      	subs	r4, r4, r5
 8002058:	10a4      	asrs	r4, r4, #2
 800205a:	42a6      	cmp	r6, r4
 800205c:	d105      	bne.n	800206a <__libc_init_array+0x2e>
 800205e:	bd70      	pop	{r4, r5, r6, pc}
 8002060:	f855 3b04 	ldr.w	r3, [r5], #4
 8002064:	4798      	blx	r3
 8002066:	3601      	adds	r6, #1
 8002068:	e7ee      	b.n	8002048 <__libc_init_array+0xc>
 800206a:	f855 3b04 	ldr.w	r3, [r5], #4
 800206e:	4798      	blx	r3
 8002070:	3601      	adds	r6, #1
 8002072:	e7f2      	b.n	800205a <__libc_init_array+0x1e>
 8002074:	080022f0 	.word	0x080022f0
 8002078:	080022f0 	.word	0x080022f0
 800207c:	080022f0 	.word	0x080022f0
 8002080:	080022f4 	.word	0x080022f4

08002084 <malloc>:
 8002084:	4b02      	ldr	r3, [pc, #8]	; (8002090 <malloc+0xc>)
 8002086:	4601      	mov	r1, r0
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	f000 b82b 	b.w	80020e4 <_malloc_r>
 800208e:	bf00      	nop
 8002090:	2000000c 	.word	0x2000000c

08002094 <memset>:
 8002094:	4603      	mov	r3, r0
 8002096:	4402      	add	r2, r0
 8002098:	4293      	cmp	r3, r2
 800209a:	d100      	bne.n	800209e <memset+0xa>
 800209c:	4770      	bx	lr
 800209e:	f803 1b01 	strb.w	r1, [r3], #1
 80020a2:	e7f9      	b.n	8002098 <memset+0x4>

080020a4 <sbrk_aligned>:
 80020a4:	b570      	push	{r4, r5, r6, lr}
 80020a6:	4e0e      	ldr	r6, [pc, #56]	; (80020e0 <sbrk_aligned+0x3c>)
 80020a8:	460c      	mov	r4, r1
 80020aa:	6831      	ldr	r1, [r6, #0]
 80020ac:	4605      	mov	r5, r0
 80020ae:	b911      	cbnz	r1, 80020b6 <sbrk_aligned+0x12>
 80020b0:	f000 f88c 	bl	80021cc <_sbrk_r>
 80020b4:	6030      	str	r0, [r6, #0]
 80020b6:	4621      	mov	r1, r4
 80020b8:	4628      	mov	r0, r5
 80020ba:	f000 f887 	bl	80021cc <_sbrk_r>
 80020be:	1c43      	adds	r3, r0, #1
 80020c0:	d00a      	beq.n	80020d8 <sbrk_aligned+0x34>
 80020c2:	1cc4      	adds	r4, r0, #3
 80020c4:	f024 0403 	bic.w	r4, r4, #3
 80020c8:	42a0      	cmp	r0, r4
 80020ca:	d007      	beq.n	80020dc <sbrk_aligned+0x38>
 80020cc:	1a21      	subs	r1, r4, r0
 80020ce:	4628      	mov	r0, r5
 80020d0:	f000 f87c 	bl	80021cc <_sbrk_r>
 80020d4:	3001      	adds	r0, #1
 80020d6:	d101      	bne.n	80020dc <sbrk_aligned+0x38>
 80020d8:	f04f 34ff 	mov.w	r4, #4294967295
 80020dc:	4620      	mov	r0, r4
 80020de:	bd70      	pop	{r4, r5, r6, pc}
 80020e0:	200006dc 	.word	0x200006dc

080020e4 <_malloc_r>:
 80020e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020e8:	1ccd      	adds	r5, r1, #3
 80020ea:	f025 0503 	bic.w	r5, r5, #3
 80020ee:	3508      	adds	r5, #8
 80020f0:	2d0c      	cmp	r5, #12
 80020f2:	bf38      	it	cc
 80020f4:	250c      	movcc	r5, #12
 80020f6:	2d00      	cmp	r5, #0
 80020f8:	4607      	mov	r7, r0
 80020fa:	db01      	blt.n	8002100 <_malloc_r+0x1c>
 80020fc:	42a9      	cmp	r1, r5
 80020fe:	d905      	bls.n	800210c <_malloc_r+0x28>
 8002100:	230c      	movs	r3, #12
 8002102:	2600      	movs	r6, #0
 8002104:	603b      	str	r3, [r7, #0]
 8002106:	4630      	mov	r0, r6
 8002108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800210c:	4e2e      	ldr	r6, [pc, #184]	; (80021c8 <_malloc_r+0xe4>)
 800210e:	f000 f86d 	bl	80021ec <__malloc_lock>
 8002112:	6833      	ldr	r3, [r6, #0]
 8002114:	461c      	mov	r4, r3
 8002116:	bb34      	cbnz	r4, 8002166 <_malloc_r+0x82>
 8002118:	4629      	mov	r1, r5
 800211a:	4638      	mov	r0, r7
 800211c:	f7ff ffc2 	bl	80020a4 <sbrk_aligned>
 8002120:	1c43      	adds	r3, r0, #1
 8002122:	4604      	mov	r4, r0
 8002124:	d14d      	bne.n	80021c2 <_malloc_r+0xde>
 8002126:	6834      	ldr	r4, [r6, #0]
 8002128:	4626      	mov	r6, r4
 800212a:	2e00      	cmp	r6, #0
 800212c:	d140      	bne.n	80021b0 <_malloc_r+0xcc>
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	4631      	mov	r1, r6
 8002132:	4638      	mov	r0, r7
 8002134:	eb04 0803 	add.w	r8, r4, r3
 8002138:	f000 f848 	bl	80021cc <_sbrk_r>
 800213c:	4580      	cmp	r8, r0
 800213e:	d13a      	bne.n	80021b6 <_malloc_r+0xd2>
 8002140:	6821      	ldr	r1, [r4, #0]
 8002142:	3503      	adds	r5, #3
 8002144:	1a6d      	subs	r5, r5, r1
 8002146:	f025 0503 	bic.w	r5, r5, #3
 800214a:	3508      	adds	r5, #8
 800214c:	2d0c      	cmp	r5, #12
 800214e:	bf38      	it	cc
 8002150:	250c      	movcc	r5, #12
 8002152:	4638      	mov	r0, r7
 8002154:	4629      	mov	r1, r5
 8002156:	f7ff ffa5 	bl	80020a4 <sbrk_aligned>
 800215a:	3001      	adds	r0, #1
 800215c:	d02b      	beq.n	80021b6 <_malloc_r+0xd2>
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	442b      	add	r3, r5
 8002162:	6023      	str	r3, [r4, #0]
 8002164:	e00e      	b.n	8002184 <_malloc_r+0xa0>
 8002166:	6822      	ldr	r2, [r4, #0]
 8002168:	1b52      	subs	r2, r2, r5
 800216a:	d41e      	bmi.n	80021aa <_malloc_r+0xc6>
 800216c:	2a0b      	cmp	r2, #11
 800216e:	d916      	bls.n	800219e <_malloc_r+0xba>
 8002170:	1961      	adds	r1, r4, r5
 8002172:	42a3      	cmp	r3, r4
 8002174:	6025      	str	r5, [r4, #0]
 8002176:	bf18      	it	ne
 8002178:	6059      	strne	r1, [r3, #4]
 800217a:	6863      	ldr	r3, [r4, #4]
 800217c:	bf08      	it	eq
 800217e:	6031      	streq	r1, [r6, #0]
 8002180:	5162      	str	r2, [r4, r5]
 8002182:	604b      	str	r3, [r1, #4]
 8002184:	4638      	mov	r0, r7
 8002186:	f104 060b 	add.w	r6, r4, #11
 800218a:	f000 f835 	bl	80021f8 <__malloc_unlock>
 800218e:	f026 0607 	bic.w	r6, r6, #7
 8002192:	1d23      	adds	r3, r4, #4
 8002194:	1af2      	subs	r2, r6, r3
 8002196:	d0b6      	beq.n	8002106 <_malloc_r+0x22>
 8002198:	1b9b      	subs	r3, r3, r6
 800219a:	50a3      	str	r3, [r4, r2]
 800219c:	e7b3      	b.n	8002106 <_malloc_r+0x22>
 800219e:	6862      	ldr	r2, [r4, #4]
 80021a0:	42a3      	cmp	r3, r4
 80021a2:	bf0c      	ite	eq
 80021a4:	6032      	streq	r2, [r6, #0]
 80021a6:	605a      	strne	r2, [r3, #4]
 80021a8:	e7ec      	b.n	8002184 <_malloc_r+0xa0>
 80021aa:	4623      	mov	r3, r4
 80021ac:	6864      	ldr	r4, [r4, #4]
 80021ae:	e7b2      	b.n	8002116 <_malloc_r+0x32>
 80021b0:	4634      	mov	r4, r6
 80021b2:	6876      	ldr	r6, [r6, #4]
 80021b4:	e7b9      	b.n	800212a <_malloc_r+0x46>
 80021b6:	230c      	movs	r3, #12
 80021b8:	4638      	mov	r0, r7
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	f000 f81c 	bl	80021f8 <__malloc_unlock>
 80021c0:	e7a1      	b.n	8002106 <_malloc_r+0x22>
 80021c2:	6025      	str	r5, [r4, #0]
 80021c4:	e7de      	b.n	8002184 <_malloc_r+0xa0>
 80021c6:	bf00      	nop
 80021c8:	200006d8 	.word	0x200006d8

080021cc <_sbrk_r>:
 80021cc:	b538      	push	{r3, r4, r5, lr}
 80021ce:	2300      	movs	r3, #0
 80021d0:	4d05      	ldr	r5, [pc, #20]	; (80021e8 <_sbrk_r+0x1c>)
 80021d2:	4604      	mov	r4, r0
 80021d4:	4608      	mov	r0, r1
 80021d6:	602b      	str	r3, [r5, #0]
 80021d8:	f7fe f9dc 	bl	8000594 <_sbrk>
 80021dc:	1c43      	adds	r3, r0, #1
 80021de:	d102      	bne.n	80021e6 <_sbrk_r+0x1a>
 80021e0:	682b      	ldr	r3, [r5, #0]
 80021e2:	b103      	cbz	r3, 80021e6 <_sbrk_r+0x1a>
 80021e4:	6023      	str	r3, [r4, #0]
 80021e6:	bd38      	pop	{r3, r4, r5, pc}
 80021e8:	200006e0 	.word	0x200006e0

080021ec <__malloc_lock>:
 80021ec:	4801      	ldr	r0, [pc, #4]	; (80021f4 <__malloc_lock+0x8>)
 80021ee:	f000 b809 	b.w	8002204 <__retarget_lock_acquire_recursive>
 80021f2:	bf00      	nop
 80021f4:	200006e4 	.word	0x200006e4

080021f8 <__malloc_unlock>:
 80021f8:	4801      	ldr	r0, [pc, #4]	; (8002200 <__malloc_unlock+0x8>)
 80021fa:	f000 b804 	b.w	8002206 <__retarget_lock_release_recursive>
 80021fe:	bf00      	nop
 8002200:	200006e4 	.word	0x200006e4

08002204 <__retarget_lock_acquire_recursive>:
 8002204:	4770      	bx	lr

08002206 <__retarget_lock_release_recursive>:
 8002206:	4770      	bx	lr

08002208 <_init>:
 8002208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800220a:	bf00      	nop
 800220c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800220e:	bc08      	pop	{r3}
 8002210:	469e      	mov	lr, r3
 8002212:	4770      	bx	lr

08002214 <_fini>:
 8002214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002216:	bf00      	nop
 8002218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800221a:	bc08      	pop	{r3}
 800221c:	469e      	mov	lr, r3
 800221e:	4770      	bx	lr
