
STM32F103_simpleRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ac4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08001bd0  08001bd0  00011bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c90  08001c90  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001c90  08001c90  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c90  08001c90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c90  08001c90  00011c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c94  08001c94  00011c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000070  08001d08  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08001d08  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000480e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001833  00000000  00000000  000248a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  000260e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000598  00000000  00000000  00026770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e30  00000000  00000000  00026d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000080b5  00000000  00000000  0003eb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084fac  00000000  00000000  00046bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cbb99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018c0  00000000  00000000  000cbbec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001bb8 	.word	0x08001bb8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001bb8 	.word	0x08001bb8

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b0e      	ldr	r3, [pc, #56]	; (800018c <MX_GPIO_Init+0x40>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a0d      	ldr	r2, [pc, #52]	; (800018c <MX_GPIO_Init+0x40>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b0b      	ldr	r3, [pc, #44]	; (800018c <MX_GPIO_Init+0x40>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b08      	ldr	r3, [pc, #32]	; (800018c <MX_GPIO_Init+0x40>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a07      	ldr	r2, [pc, #28]	; (800018c <MX_GPIO_Init+0x40>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b05      	ldr	r3, [pc, #20]	; (800018c <MX_GPIO_Init+0x40>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	603b      	str	r3, [r7, #0]
 8000180:	683b      	ldr	r3, [r7, #0]

}
 8000182:	bf00      	nop
 8000184:	370c      	adds	r7, #12
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	40021000 	.word	0x40021000

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000194:	f000 faea 	bl	800076c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000198:	f000 f80c 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019c:	f7ff ffd6 	bl	800014c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001a0:	f000 fa28 	bl	80005f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  vPrintString("simpleRTOS starting ... \r\n");
 80001a4:	4802      	ldr	r0, [pc, #8]	; (80001b0 <main+0x20>)
 80001a6:	f000 faa5 	bl	80006f4 <vPrintString>
  Kernel_init();
 80001aa:	f000 f849 	bl	8000240 <Kernel_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ae:	e7fe      	b.n	80001ae <main+0x1e>
 80001b0:	08001bd0 	.word	0x08001bd0

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b090      	sub	sp, #64	; 0x40
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	2228      	movs	r2, #40	; 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f001 fc3e 	bl	8001a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]
 80001d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001d6:	2301      	movs	r3, #1
 80001d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e4:	2301      	movs	r3, #1
 80001e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e8:	2302      	movs	r3, #2
 80001ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f8:	f107 0318 	add.w	r3, r7, #24
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 fbfb 	bl	80009f8 <HAL_RCC_OscConfig>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000208:	f000 f870 	bl	80002ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020c:	230f      	movs	r3, #15
 800020e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000210:	2302      	movs	r3, #2
 8000212:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000214:	2300      	movs	r3, #0
 8000216:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800021c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2102      	movs	r1, #2
 8000226:	4618      	mov	r0, r3
 8000228:	f000 fe68 	bl	8000efc <HAL_RCC_ClockConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000232:	f000 f85b 	bl	80002ec <Error_Handler>
  }
}
 8000236:	bf00      	nop
 8000238:	3740      	adds	r7, #64	; 0x40
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <Kernel_init>:

/* USER CODE BEGIN 4 */
static void Kernel_init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
	uint32_t taskId;

	Kernel_task_init();
 8000246:	f001 fae7 	bl	8001818 <Kernel_task_init>

	taskId = Kernel_task_create(User_task0);
 800024a:	4813      	ldr	r0, [pc, #76]	; (8000298 <Kernel_init+0x58>)
 800024c:	f001 fb2e 	bl	80018ac <Kernel_task_create>
 8000250:	6078      	str	r0, [r7, #4]
	if(NOT_ENOUGH_TASK_NUM == taskId){
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000258:	d102      	bne.n	8000260 <Kernel_init+0x20>
		vPrintString("Task0 creation fail \r\n");
 800025a:	4810      	ldr	r0, [pc, #64]	; (800029c <Kernel_init+0x5c>)
 800025c:	f000 fa4a 	bl	80006f4 <vPrintString>
	}

	taskId = Kernel_task_create(User_task1);
 8000260:	480f      	ldr	r0, [pc, #60]	; (80002a0 <Kernel_init+0x60>)
 8000262:	f001 fb23 	bl	80018ac <Kernel_task_create>
 8000266:	6078      	str	r0, [r7, #4]
	if(NOT_ENOUGH_TASK_NUM == taskId){
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800026e:	d102      	bne.n	8000276 <Kernel_init+0x36>
		vPrintString("Task1 creation fail \r\n");
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <Kernel_init+0x64>)
 8000272:	f000 fa3f 	bl	80006f4 <vPrintString>
	}

	taskId = Kernel_task_create(User_task2);
 8000276:	480c      	ldr	r0, [pc, #48]	; (80002a8 <Kernel_init+0x68>)
 8000278:	f001 fb18 	bl	80018ac <Kernel_task_create>
 800027c:	6078      	str	r0, [r7, #4]
	if(NOT_ENOUGH_TASK_NUM == taskId){
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000284:	d102      	bne.n	800028c <Kernel_init+0x4c>
		vPrintString("Task2 creation fail \r\n");
 8000286:	4809      	ldr	r0, [pc, #36]	; (80002ac <Kernel_init+0x6c>)
 8000288:	f000 fa34 	bl	80006f4 <vPrintString>
	}

	Kernel_start();
 800028c:	f001 fab8 	bl	8001800 <Kernel_start>
}
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	080002b1 	.word	0x080002b1
 800029c:	08001bec 	.word	0x08001bec
 80002a0:	080002c5 	.word	0x080002c5
 80002a4:	08001c04 	.word	0x08001c04
 80002a8:	080002d9 	.word	0x080002d9
 80002ac:	08001c1c 	.word	0x08001c1c

080002b0 <User_task0>:

void User_task0(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	while(true){
		vPrintString("User task #0 \r\n");
 80002b4:	4802      	ldr	r0, [pc, #8]	; (80002c0 <User_task0+0x10>)
 80002b6:	f000 fa1d 	bl	80006f4 <vPrintString>
		Kernel_yield();
 80002ba:	f001 faa7 	bl	800180c <Kernel_yield>
		vPrintString("User task #0 \r\n");
 80002be:	e7f9      	b.n	80002b4 <User_task0+0x4>
 80002c0:	08001c34 	.word	0x08001c34

080002c4 <User_task1>:
	}
}

void User_task1(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	while(true){
		vPrintString("User task #1 \r\n");
 80002c8:	4802      	ldr	r0, [pc, #8]	; (80002d4 <User_task1+0x10>)
 80002ca:	f000 fa13 	bl	80006f4 <vPrintString>
		Kernel_yield();
 80002ce:	f001 fa9d 	bl	800180c <Kernel_yield>
		vPrintString("User task #1 \r\n");
 80002d2:	e7f9      	b.n	80002c8 <User_task1+0x4>
 80002d4:	08001c44 	.word	0x08001c44

080002d8 <User_task2>:
	}
}

void User_task2(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	while(true){
		vPrintString("User task #2 \r\n");
 80002dc:	4802      	ldr	r0, [pc, #8]	; (80002e8 <User_task2+0x10>)
 80002de:	f000 fa09 	bl	80006f4 <vPrintString>
		Kernel_yield();
 80002e2:	f001 fa93 	bl	800180c <Kernel_yield>
		vPrintString("User task #2 \r\n");
 80002e6:	e7f9      	b.n	80002dc <User_task2+0x4>
 80002e8:	08001c54 	.word	0x08001c54

080002ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f0:	b672      	cpsid	i
}
 80002f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002f4:	e7fe      	b.n	80002f4 <Error_Handler+0x8>
	...

080002f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002fe:	4b15      	ldr	r3, [pc, #84]	; (8000354 <HAL_MspInit+0x5c>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	4a14      	ldr	r2, [pc, #80]	; (8000354 <HAL_MspInit+0x5c>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	6193      	str	r3, [r2, #24]
 800030a:	4b12      	ldr	r3, [pc, #72]	; (8000354 <HAL_MspInit+0x5c>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	60bb      	str	r3, [r7, #8]
 8000314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000316:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <HAL_MspInit+0x5c>)
 8000318:	69db      	ldr	r3, [r3, #28]
 800031a:	4a0e      	ldr	r2, [pc, #56]	; (8000354 <HAL_MspInit+0x5c>)
 800031c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000320:	61d3      	str	r3, [r2, #28]
 8000322:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <HAL_MspInit+0x5c>)
 8000324:	69db      	ldr	r3, [r3, #28]
 8000326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800032e:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <HAL_MspInit+0x60>)
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000342:	60fb      	str	r3, [r7, #12]
 8000344:	4a04      	ldr	r2, [pc, #16]	; (8000358 <HAL_MspInit+0x60>)
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800034a:	bf00      	nop
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	40021000 	.word	0x40021000
 8000358:	40010000 	.word	0x40010000

0800035c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000360:	e7fe      	b.n	8000360 <NMI_Handler+0x4>

08000362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000366:	e7fe      	b.n	8000366 <HardFault_Handler+0x4>

08000368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800036c:	e7fe      	b.n	800036c <MemManage_Handler+0x4>

0800036e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000372:	e7fe      	b.n	8000372 <BusFault_Handler+0x4>

08000374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000378:	e7fe      	b.n	8000378 <UsageFault_Handler+0x4>

0800037a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	bc80      	pop	{r7}
 8000384:	4770      	bx	lr

08000386 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr

08000392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000396:	bf00      	nop
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr

0800039e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800039e:	b580      	push	{r7, lr}
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003a2:	f000 fa29 	bl	80007f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}

080003aa <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
	...

080003b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b086      	sub	sp, #24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003c0:	4a14      	ldr	r2, [pc, #80]	; (8000414 <_sbrk+0x5c>)
 80003c2:	4b15      	ldr	r3, [pc, #84]	; (8000418 <_sbrk+0x60>)
 80003c4:	1ad3      	subs	r3, r2, r3
 80003c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003cc:	4b13      	ldr	r3, [pc, #76]	; (800041c <_sbrk+0x64>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d102      	bne.n	80003da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <_sbrk+0x64>)
 80003d6:	4a12      	ldr	r2, [pc, #72]	; (8000420 <_sbrk+0x68>)
 80003d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003da:	4b10      	ldr	r3, [pc, #64]	; (800041c <_sbrk+0x64>)
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4413      	add	r3, r2
 80003e2:	693a      	ldr	r2, [r7, #16]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d207      	bcs.n	80003f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003e8:	f001 fafa 	bl	80019e0 <__errno>
 80003ec:	4603      	mov	r3, r0
 80003ee:	220c      	movs	r2, #12
 80003f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003f2:	f04f 33ff 	mov.w	r3, #4294967295
 80003f6:	e009      	b.n	800040c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <_sbrk+0x64>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003fe:	4b07      	ldr	r3, [pc, #28]	; (800041c <_sbrk+0x64>)
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4413      	add	r3, r2
 8000406:	4a05      	ldr	r2, [pc, #20]	; (800041c <_sbrk+0x64>)
 8000408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800040a:	68fb      	ldr	r3, [r7, #12]
}
 800040c:	4618      	mov	r0, r3
 800040e:	3718      	adds	r7, #24
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20005000 	.word	0x20005000
 8000418:	00000400 	.word	0x00000400
 800041c:	2000008c 	.word	0x2000008c
 8000420:	200000d0 	.word	0x200000d0

08000424 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr

08000430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000434:	4b04      	ldr	r3, [pc, #16]	; (8000448 <__NVIC_GetPriorityGrouping+0x18>)
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	0a1b      	lsrs	r3, r3, #8
 800043a:	f003 0307 	and.w	r3, r3, #7
}
 800043e:	4618      	mov	r0, r3
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	e000ed00 	.word	0xe000ed00

0800044c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800045a:	2b00      	cmp	r3, #0
 800045c:	db0b      	blt.n	8000476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	f003 021f 	and.w	r2, r3, #31
 8000464:	4906      	ldr	r1, [pc, #24]	; (8000480 <__NVIC_EnableIRQ+0x34>)
 8000466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800046a:	095b      	lsrs	r3, r3, #5
 800046c:	2001      	movs	r0, #1
 800046e:	fa00 f202 	lsl.w	r2, r0, r2
 8000472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	e000e100 	.word	0xe000e100

08000484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	6039      	str	r1, [r7, #0]
 800048e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000494:	2b00      	cmp	r3, #0
 8000496:	db0a      	blt.n	80004ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	b2da      	uxtb	r2, r3
 800049c:	490c      	ldr	r1, [pc, #48]	; (80004d0 <__NVIC_SetPriority+0x4c>)
 800049e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a2:	0112      	lsls	r2, r2, #4
 80004a4:	b2d2      	uxtb	r2, r2
 80004a6:	440b      	add	r3, r1
 80004a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004ac:	e00a      	b.n	80004c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	b2da      	uxtb	r2, r3
 80004b2:	4908      	ldr	r1, [pc, #32]	; (80004d4 <__NVIC_SetPriority+0x50>)
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	f003 030f 	and.w	r3, r3, #15
 80004ba:	3b04      	subs	r3, #4
 80004bc:	0112      	lsls	r2, r2, #4
 80004be:	b2d2      	uxtb	r2, r2
 80004c0:	440b      	add	r3, r1
 80004c2:	761a      	strb	r2, [r3, #24]
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	e000e100 	.word	0xe000e100
 80004d4:	e000ed00 	.word	0xe000ed00

080004d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004d8:	b480      	push	{r7}
 80004da:	b089      	sub	sp, #36	; 0x24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	f003 0307 	and.w	r3, r3, #7
 80004ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004ec:	69fb      	ldr	r3, [r7, #28]
 80004ee:	f1c3 0307 	rsb	r3, r3, #7
 80004f2:	2b04      	cmp	r3, #4
 80004f4:	bf28      	it	cs
 80004f6:	2304      	movcs	r3, #4
 80004f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004fa:	69fb      	ldr	r3, [r7, #28]
 80004fc:	3304      	adds	r3, #4
 80004fe:	2b06      	cmp	r3, #6
 8000500:	d902      	bls.n	8000508 <NVIC_EncodePriority+0x30>
 8000502:	69fb      	ldr	r3, [r7, #28]
 8000504:	3b03      	subs	r3, #3
 8000506:	e000      	b.n	800050a <NVIC_EncodePriority+0x32>
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800050c:	f04f 32ff 	mov.w	r2, #4294967295
 8000510:	69bb      	ldr	r3, [r7, #24]
 8000512:	fa02 f303 	lsl.w	r3, r2, r3
 8000516:	43da      	mvns	r2, r3
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	401a      	ands	r2, r3
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000520:	f04f 31ff 	mov.w	r1, #4294967295
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	fa01 f303 	lsl.w	r3, r1, r3
 800052a:	43d9      	mvns	r1, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000530:	4313      	orrs	r3, r2
         );
}
 8000532:	4618      	mov	r0, r3
 8000534:	3724      	adds	r7, #36	; 0x24
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	60da      	str	r2, [r3, #12]
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	691b      	ldr	r3, [r3, #16]
 8000566:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	615a      	str	r2, [r3, #20]
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000594:	2b80      	cmp	r3, #128	; 0x80
 8000596:	bf0c      	ite	eq
 8000598:	2301      	moveq	r3, #1
 800059a:	2300      	movne	r3, #0
 800059c:	b2db      	uxtb	r3, r3
}
 800059e:	4618      	mov	r0, r3
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	460b      	mov	r3, r1
 80005b2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80005b4:	78fa      	ldrb	r2, [r7, #3]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	605a      	str	r2, [r3, #4]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005ce:	699a      	ldr	r2, [r3, #24]
 80005d0:	4907      	ldr	r1, [pc, #28]	; (80005f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005da:	699a      	ldr	r2, [r3, #24]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4013      	ands	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005e2:	68fb      	ldr	r3, [r7, #12]
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000

080005f4 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	; 0x30
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]
 800060a:	615a      	str	r2, [r3, #20]
 800060c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800061c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000620:	f7ff ffd0 	bl	80005c4 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000624:	2004      	movs	r0, #4
 8000626:	f7ff ffcd 	bl	80005c4 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800062a:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <MX_USART1_UART_Init+0xc0>)
 800062c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800062e:	2309      	movs	r3, #9
 8000630:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	463b      	mov	r3, r7
 800063c:	4619      	mov	r1, r3
 800063e:	481e      	ldr	r0, [pc, #120]	; (80006b8 <MX_USART1_UART_Init+0xc4>)
 8000640:	f000 fe70 	bl	8001324 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_USART1_UART_Init+0xc8>)
 8000646:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000648:	2304      	movs	r3, #4
 800064a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064c:	463b      	mov	r3, r7
 800064e:	4619      	mov	r1, r3
 8000650:	4819      	ldr	r0, [pc, #100]	; (80006b8 <MX_USART1_UART_Init+0xc4>)
 8000652:	f000 fe67 	bl	8001324 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000656:	f7ff feeb 	bl	8000430 <__NVIC_GetPriorityGrouping>
 800065a:	4603      	mov	r3, r0
 800065c:	2200      	movs	r2, #0
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff39 	bl	80004d8 <NVIC_EncodePriority>
 8000666:	4603      	mov	r3, r0
 8000668:	4619      	mov	r1, r3
 800066a:	2025      	movs	r0, #37	; 0x25
 800066c:	f7ff ff0a 	bl	8000484 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000670:	2025      	movs	r0, #37	; 0x25
 8000672:	f7ff feeb 	bl	800044c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000676:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800067a:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000688:	230c      	movs	r3, #12
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000690:	2300      	movs	r3, #0
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	4809      	ldr	r0, [pc, #36]	; (80006c0 <MX_USART1_UART_Init+0xcc>)
 800069c:	f001 f850 	bl	8001740 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80006a0:	4807      	ldr	r0, [pc, #28]	; (80006c0 <MX_USART1_UART_Init+0xcc>)
 80006a2:	f7ff ff5a 	bl	800055a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80006a6:	4806      	ldr	r0, [pc, #24]	; (80006c0 <MX_USART1_UART_Init+0xcc>)
 80006a8:	f7ff ff48 	bl	800053c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	3730      	adds	r7, #48	; 0x30
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	04020002 	.word	0x04020002
 80006b8:	40010800 	.word	0x40010800
 80006bc:	04040004 	.word	0x04040004
 80006c0:	40013800 	.word	0x40013800

080006c4 <vPrintChar>:

/* USER CODE BEGIN 1 */
void vPrintChar(const char cCharacter)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
	while( !LL_USART_IsActiveFlag_TXE(USART1) );
 80006ce:	bf00      	nop
 80006d0:	4807      	ldr	r0, [pc, #28]	; (80006f0 <vPrintChar+0x2c>)
 80006d2:	f7ff ff57 	bl	8000584 <LL_USART_IsActiveFlag_TXE>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d0f9      	beq.n	80006d0 <vPrintChar+0xc>
	LL_USART_TransmitData8(USART1, (uint8_t)cCharacter);
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	4619      	mov	r1, r3
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <vPrintChar+0x2c>)
 80006e2:	f7ff ff61 	bl	80005a8 <LL_USART_TransmitData8>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40013800 	.word	0x40013800

080006f4 <vPrintString>:

void vPrintString(const char* pcString)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	while( *pcString != '\0' ){
 80006fc:	e007      	b.n	800070e <vPrintString+0x1a>
		vPrintChar(*pcString);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ffde 	bl	80006c4 <vPrintChar>
		pcString++;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3301      	adds	r3, #1
 800070c:	607b      	str	r3, [r7, #4]
	while( *pcString != '\0' ){
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1f3      	bne.n	80006fe <vPrintString+0xa>
	}
}
 8000716:	bf00      	nop
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000720:	f7ff fe80 	bl	8000424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000724:	480b      	ldr	r0, [pc, #44]	; (8000754 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000726:	490c      	ldr	r1, [pc, #48]	; (8000758 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000728:	4a0c      	ldr	r2, [pc, #48]	; (800075c <LoopFillZerobss+0x16>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800072c:	e002      	b.n	8000734 <LoopCopyDataInit>

0800072e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000732:	3304      	adds	r3, #4

08000734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000738:	d3f9      	bcc.n	800072e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073a:	4a09      	ldr	r2, [pc, #36]	; (8000760 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800073c:	4c09      	ldr	r4, [pc, #36]	; (8000764 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000740:	e001      	b.n	8000746 <LoopFillZerobss>

08000742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000744:	3204      	adds	r2, #4

08000746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000748:	d3fb      	bcc.n	8000742 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800074a:	f001 f94f 	bl	80019ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800074e:	f7ff fd1f 	bl	8000190 <main>
  bx lr
 8000752:	4770      	bx	lr
  ldr r0, =_sdata
 8000754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000758:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800075c:	08001c98 	.word	0x08001c98
  ldr r2, =_sbss
 8000760:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000764:	200000cc 	.word	0x200000cc

08000768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC1_2_IRQHandler>
	...

0800076c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <HAL_Init+0x28>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a07      	ldr	r2, [pc, #28]	; (8000794 <HAL_Init+0x28>)
 8000776:	f043 0310 	orr.w	r3, r3, #16
 800077a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800077c:	2003      	movs	r0, #3
 800077e:	f000 f907 	bl	8000990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000782:	200f      	movs	r0, #15
 8000784:	f000 f808 	bl	8000798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000788:	f7ff fdb6 	bl	80002f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40022000 	.word	0x40022000

08000798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_InitTick+0x54>)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_InitTick+0x58>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	4619      	mov	r1, r3
 80007aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80007b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f911 	bl	80009de <HAL_SYSTICK_Config>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e00e      	b.n	80007e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b0f      	cmp	r3, #15
 80007ca:	d80a      	bhi.n	80007e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007cc:	2200      	movs	r2, #0
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	f04f 30ff 	mov.w	r0, #4294967295
 80007d4:	f000 f8e7 	bl	80009a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d8:	4a06      	ldr	r2, [pc, #24]	; (80007f4 <HAL_InitTick+0x5c>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007de:	2300      	movs	r3, #0
 80007e0:	e000      	b.n	80007e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000000 	.word	0x20000000
 80007f0:	20000008 	.word	0x20000008
 80007f4:	20000004 	.word	0x20000004

080007f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_IncTick+0x1c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <HAL_IncTick+0x20>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4413      	add	r3, r2
 8000808:	4a03      	ldr	r2, [pc, #12]	; (8000818 <HAL_IncTick+0x20>)
 800080a:	6013      	str	r3, [r2, #0]
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	20000008 	.word	0x20000008
 8000818:	20000090 	.word	0x20000090

0800081c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return uwTick;
 8000820:	4b02      	ldr	r3, [pc, #8]	; (800082c <HAL_GetTick+0x10>)
 8000822:	681b      	ldr	r3, [r3, #0]
}
 8000824:	4618      	mov	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	20000090 	.word	0x20000090

08000830 <__NVIC_SetPriorityGrouping>:
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <__NVIC_SetPriorityGrouping+0x44>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800084c:	4013      	ands	r3, r2
 800084e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800085c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000862:	4a04      	ldr	r2, [pc, #16]	; (8000874 <__NVIC_SetPriorityGrouping+0x44>)
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	60d3      	str	r3, [r2, #12]
}
 8000868:	bf00      	nop
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <__NVIC_GetPriorityGrouping>:
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <__NVIC_GetPriorityGrouping+0x18>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	f003 0307 	and.w	r3, r3, #7
}
 8000886:	4618      	mov	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <__NVIC_SetPriority>:
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	db0a      	blt.n	80008be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	490c      	ldr	r1, [pc, #48]	; (80008e0 <__NVIC_SetPriority+0x4c>)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	0112      	lsls	r2, r2, #4
 80008b4:	b2d2      	uxtb	r2, r2
 80008b6:	440b      	add	r3, r1
 80008b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80008bc:	e00a      	b.n	80008d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4908      	ldr	r1, [pc, #32]	; (80008e4 <__NVIC_SetPriority+0x50>)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	f003 030f 	and.w	r3, r3, #15
 80008ca:	3b04      	subs	r3, #4
 80008cc:	0112      	lsls	r2, r2, #4
 80008ce:	b2d2      	uxtb	r2, r2
 80008d0:	440b      	add	r3, r1
 80008d2:	761a      	strb	r2, [r3, #24]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000e100 	.word	0xe000e100
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <NVIC_EncodePriority>:
{
 80008e8:	b480      	push	{r7}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	f1c3 0307 	rsb	r3, r3, #7
 8000902:	2b04      	cmp	r3, #4
 8000904:	bf28      	it	cs
 8000906:	2304      	movcs	r3, #4
 8000908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3304      	adds	r3, #4
 800090e:	2b06      	cmp	r3, #6
 8000910:	d902      	bls.n	8000918 <NVIC_EncodePriority+0x30>
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3b03      	subs	r3, #3
 8000916:	e000      	b.n	800091a <NVIC_EncodePriority+0x32>
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800091c:	f04f 32ff 	mov.w	r2, #4294967295
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43da      	mvns	r2, r3
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	401a      	ands	r2, r3
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000930:	f04f 31ff 	mov.w	r1, #4294967295
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	fa01 f303 	lsl.w	r3, r1, r3
 800093a:	43d9      	mvns	r1, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000940:	4313      	orrs	r3, r2
}
 8000942:	4618      	mov	r0, r3
 8000944:	3724      	adds	r7, #36	; 0x24
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3b01      	subs	r3, #1
 8000958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800095c:	d301      	bcc.n	8000962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095e:	2301      	movs	r3, #1
 8000960:	e00f      	b.n	8000982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <SysTick_Config+0x40>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096a:	210f      	movs	r1, #15
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f7ff ff90 	bl	8000894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <SysTick_Config+0x40>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <SysTick_Config+0x40>)
 800097c:	2207      	movs	r2, #7
 800097e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	e000e010 	.word	0xe000e010

08000990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ff49 	bl	8000830 <__NVIC_SetPriorityGrouping>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	4603      	mov	r3, r0
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b8:	f7ff ff5e 	bl	8000878 <__NVIC_GetPriorityGrouping>
 80009bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	68b9      	ldr	r1, [r7, #8]
 80009c2:	6978      	ldr	r0, [r7, #20]
 80009c4:	f7ff ff90 	bl	80008e8 <NVIC_EncodePriority>
 80009c8:	4602      	mov	r2, r0
 80009ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff5f 	bl	8000894 <__NVIC_SetPriority>
}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ffb0 	bl	800094c <SysTick_Config>
 80009ec:	4603      	mov	r3, r0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d101      	bne.n	8000a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e272      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	f000 8087 	beq.w	8000b26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a18:	4b92      	ldr	r3, [pc, #584]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 030c 	and.w	r3, r3, #12
 8000a20:	2b04      	cmp	r3, #4
 8000a22:	d00c      	beq.n	8000a3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a24:	4b8f      	ldr	r3, [pc, #572]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f003 030c 	and.w	r3, r3, #12
 8000a2c:	2b08      	cmp	r3, #8
 8000a2e:	d112      	bne.n	8000a56 <HAL_RCC_OscConfig+0x5e>
 8000a30:	4b8c      	ldr	r3, [pc, #560]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a3c:	d10b      	bne.n	8000a56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a3e:	4b89      	ldr	r3, [pc, #548]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d06c      	beq.n	8000b24 <HAL_RCC_OscConfig+0x12c>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d168      	bne.n	8000b24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e24c      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a5e:	d106      	bne.n	8000a6e <HAL_RCC_OscConfig+0x76>
 8000a60:	4b80      	ldr	r3, [pc, #512]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a7f      	ldr	r2, [pc, #508]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	e02e      	b.n	8000acc <HAL_RCC_OscConfig+0xd4>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d10c      	bne.n	8000a90 <HAL_RCC_OscConfig+0x98>
 8000a76:	4b7b      	ldr	r3, [pc, #492]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a7a      	ldr	r2, [pc, #488]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	4b78      	ldr	r3, [pc, #480]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a77      	ldr	r2, [pc, #476]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a8c:	6013      	str	r3, [r2, #0]
 8000a8e:	e01d      	b.n	8000acc <HAL_RCC_OscConfig+0xd4>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a98:	d10c      	bne.n	8000ab4 <HAL_RCC_OscConfig+0xbc>
 8000a9a:	4b72      	ldr	r3, [pc, #456]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a71      	ldr	r2, [pc, #452]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aa4:	6013      	str	r3, [r2, #0]
 8000aa6:	4b6f      	ldr	r3, [pc, #444]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a6e      	ldr	r2, [pc, #440]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ab0:	6013      	str	r3, [r2, #0]
 8000ab2:	e00b      	b.n	8000acc <HAL_RCC_OscConfig+0xd4>
 8000ab4:	4b6b      	ldr	r3, [pc, #428]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a6a      	ldr	r2, [pc, #424]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	4b68      	ldr	r3, [pc, #416]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a67      	ldr	r2, [pc, #412]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d013      	beq.n	8000afc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ad4:	f7ff fea2 	bl	800081c <HAL_GetTick>
 8000ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ada:	e008      	b.n	8000aee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000adc:	f7ff fe9e 	bl	800081c <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	2b64      	cmp	r3, #100	; 0x64
 8000ae8:	d901      	bls.n	8000aee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000aea:	2303      	movs	r3, #3
 8000aec:	e200      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aee:	4b5d      	ldr	r3, [pc, #372]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0f0      	beq.n	8000adc <HAL_RCC_OscConfig+0xe4>
 8000afa:	e014      	b.n	8000b26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000afc:	f7ff fe8e 	bl	800081c <HAL_GetTick>
 8000b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b02:	e008      	b.n	8000b16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b04:	f7ff fe8a 	bl	800081c <HAL_GetTick>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	2b64      	cmp	r3, #100	; 0x64
 8000b10:	d901      	bls.n	8000b16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b12:	2303      	movs	r3, #3
 8000b14:	e1ec      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b16:	4b53      	ldr	r3, [pc, #332]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d1f0      	bne.n	8000b04 <HAL_RCC_OscConfig+0x10c>
 8000b22:	e000      	b.n	8000b26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d063      	beq.n	8000bfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b32:	4b4c      	ldr	r3, [pc, #304]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f003 030c 	and.w	r3, r3, #12
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d00b      	beq.n	8000b56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b3e:	4b49      	ldr	r3, [pc, #292]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 030c 	and.w	r3, r3, #12
 8000b46:	2b08      	cmp	r3, #8
 8000b48:	d11c      	bne.n	8000b84 <HAL_RCC_OscConfig+0x18c>
 8000b4a:	4b46      	ldr	r3, [pc, #280]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d116      	bne.n	8000b84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b56:	4b43      	ldr	r3, [pc, #268]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d005      	beq.n	8000b6e <HAL_RCC_OscConfig+0x176>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	691b      	ldr	r3, [r3, #16]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d001      	beq.n	8000b6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e1c0      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b6e:	4b3d      	ldr	r3, [pc, #244]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	00db      	lsls	r3, r3, #3
 8000b7c:	4939      	ldr	r1, [pc, #228]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b82:	e03a      	b.n	8000bfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d020      	beq.n	8000bce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b8c:	4b36      	ldr	r3, [pc, #216]	; (8000c68 <HAL_RCC_OscConfig+0x270>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b92:	f7ff fe43 	bl	800081c <HAL_GetTick>
 8000b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b98:	e008      	b.n	8000bac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b9a:	f7ff fe3f 	bl	800081c <HAL_GetTick>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d901      	bls.n	8000bac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	e1a1      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bac:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d0f0      	beq.n	8000b9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	4927      	ldr	r1, [pc, #156]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	600b      	str	r3, [r1, #0]
 8000bcc:	e015      	b.n	8000bfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bce:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <HAL_RCC_OscConfig+0x270>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd4:	f7ff fe22 	bl	800081c <HAL_GetTick>
 8000bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bda:	e008      	b.n	8000bee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bdc:	f7ff fe1e 	bl	800081c <HAL_GetTick>
 8000be0:	4602      	mov	r2, r0
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d901      	bls.n	8000bee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000bea:	2303      	movs	r3, #3
 8000bec:	e180      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1f0      	bne.n	8000bdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d03a      	beq.n	8000c7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d019      	beq.n	8000c42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <HAL_RCC_OscConfig+0x274>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c14:	f7ff fe02 	bl	800081c <HAL_GetTick>
 8000c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c1a:	e008      	b.n	8000c2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c1c:	f7ff fdfe 	bl	800081c <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d901      	bls.n	8000c2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e160      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <HAL_RCC_OscConfig+0x26c>)
 8000c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d0f0      	beq.n	8000c1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f000 fa9c 	bl	8001178 <RCC_Delay>
 8000c40:	e01c      	b.n	8000c7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <HAL_RCC_OscConfig+0x274>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c48:	f7ff fde8 	bl	800081c <HAL_GetTick>
 8000c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c4e:	e00f      	b.n	8000c70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c50:	f7ff fde4 	bl	800081c <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d908      	bls.n	8000c70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	e146      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4f8>
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000
 8000c68:	42420000 	.word	0x42420000
 8000c6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c70:	4b92      	ldr	r3, [pc, #584]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c74:	f003 0302 	and.w	r3, r3, #2
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1e9      	bne.n	8000c50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	f000 80a6 	beq.w	8000dd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c8e:	4b8b      	ldr	r3, [pc, #556]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10d      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b88      	ldr	r3, [pc, #544]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	4a87      	ldr	r2, [pc, #540]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	61d3      	str	r3, [r2, #28]
 8000ca6:	4b85      	ldr	r3, [pc, #532]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cb6:	4b82      	ldr	r3, [pc, #520]	; (8000ec0 <HAL_RCC_OscConfig+0x4c8>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d118      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cc2:	4b7f      	ldr	r3, [pc, #508]	; (8000ec0 <HAL_RCC_OscConfig+0x4c8>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a7e      	ldr	r2, [pc, #504]	; (8000ec0 <HAL_RCC_OscConfig+0x4c8>)
 8000cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cce:	f7ff fda5 	bl	800081c <HAL_GetTick>
 8000cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd4:	e008      	b.n	8000ce8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cd6:	f7ff fda1 	bl	800081c <HAL_GetTick>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	2b64      	cmp	r3, #100	; 0x64
 8000ce2:	d901      	bls.n	8000ce8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e103      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ce8:	4b75      	ldr	r3, [pc, #468]	; (8000ec0 <HAL_RCC_OscConfig+0x4c8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d0f0      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d106      	bne.n	8000d0a <HAL_RCC_OscConfig+0x312>
 8000cfc:	4b6f      	ldr	r3, [pc, #444]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000cfe:	6a1b      	ldr	r3, [r3, #32]
 8000d00:	4a6e      	ldr	r2, [pc, #440]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6213      	str	r3, [r2, #32]
 8000d08:	e02d      	b.n	8000d66 <HAL_RCC_OscConfig+0x36e>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10c      	bne.n	8000d2c <HAL_RCC_OscConfig+0x334>
 8000d12:	4b6a      	ldr	r3, [pc, #424]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000d14:	6a1b      	ldr	r3, [r3, #32]
 8000d16:	4a69      	ldr	r2, [pc, #420]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000d18:	f023 0301 	bic.w	r3, r3, #1
 8000d1c:	6213      	str	r3, [r2, #32]
 8000d1e:	4b67      	ldr	r3, [pc, #412]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000d20:	6a1b      	ldr	r3, [r3, #32]
 8000d22:	4a66      	ldr	r2, [pc, #408]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000d24:	f023 0304 	bic.w	r3, r3, #4
 8000d28:	6213      	str	r3, [r2, #32]
 8000d2a:	e01c      	b.n	8000d66 <HAL_RCC_OscConfig+0x36e>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	2b05      	cmp	r3, #5
 8000d32:	d10c      	bne.n	8000d4e <HAL_RCC_OscConfig+0x356>
 8000d34:	4b61      	ldr	r3, [pc, #388]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000d36:	6a1b      	ldr	r3, [r3, #32]
 8000d38:	4a60      	ldr	r2, [pc, #384]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	6213      	str	r3, [r2, #32]
 8000d40:	4b5e      	ldr	r3, [pc, #376]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000d42:	6a1b      	ldr	r3, [r3, #32]
 8000d44:	4a5d      	ldr	r2, [pc, #372]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6213      	str	r3, [r2, #32]
 8000d4c:	e00b      	b.n	8000d66 <HAL_RCC_OscConfig+0x36e>
 8000d4e:	4b5b      	ldr	r3, [pc, #364]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000d50:	6a1b      	ldr	r3, [r3, #32]
 8000d52:	4a5a      	ldr	r2, [pc, #360]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000d54:	f023 0301 	bic.w	r3, r3, #1
 8000d58:	6213      	str	r3, [r2, #32]
 8000d5a:	4b58      	ldr	r3, [pc, #352]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000d5c:	6a1b      	ldr	r3, [r3, #32]
 8000d5e:	4a57      	ldr	r2, [pc, #348]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000d60:	f023 0304 	bic.w	r3, r3, #4
 8000d64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d015      	beq.n	8000d9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d6e:	f7ff fd55 	bl	800081c <HAL_GetTick>
 8000d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d74:	e00a      	b.n	8000d8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d76:	f7ff fd51 	bl	800081c <HAL_GetTick>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d901      	bls.n	8000d8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e0b1      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d8c:	4b4b      	ldr	r3, [pc, #300]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000d8e:	6a1b      	ldr	r3, [r3, #32]
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0ee      	beq.n	8000d76 <HAL_RCC_OscConfig+0x37e>
 8000d98:	e014      	b.n	8000dc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d9a:	f7ff fd3f 	bl	800081c <HAL_GetTick>
 8000d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000da0:	e00a      	b.n	8000db8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000da2:	f7ff fd3b 	bl	800081c <HAL_GetTick>
 8000da6:	4602      	mov	r2, r0
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d901      	bls.n	8000db8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000db4:	2303      	movs	r3, #3
 8000db6:	e09b      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000db8:	4b40      	ldr	r3, [pc, #256]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000dba:	6a1b      	ldr	r3, [r3, #32]
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1ee      	bne.n	8000da2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000dc4:	7dfb      	ldrb	r3, [r7, #23]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d105      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dca:	4b3c      	ldr	r3, [pc, #240]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	4a3b      	ldr	r2, [pc, #236]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 8087 	beq.w	8000eee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000de0:	4b36      	ldr	r3, [pc, #216]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 030c 	and.w	r3, r3, #12
 8000de8:	2b08      	cmp	r3, #8
 8000dea:	d061      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69db      	ldr	r3, [r3, #28]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d146      	bne.n	8000e82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000df4:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <HAL_RCC_OscConfig+0x4cc>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dfa:	f7ff fd0f 	bl	800081c <HAL_GetTick>
 8000dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e00:	e008      	b.n	8000e14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e02:	f7ff fd0b 	bl	800081c <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d901      	bls.n	8000e14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	e06d      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e14:	4b29      	ldr	r3, [pc, #164]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1f0      	bne.n	8000e02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a1b      	ldr	r3, [r3, #32]
 8000e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e28:	d108      	bne.n	8000e3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e2a:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	4921      	ldr	r1, [pc, #132]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e3c:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a19      	ldr	r1, [r3, #32]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	491b      	ldr	r1, [pc, #108]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000e50:	4313      	orrs	r3, r2
 8000e52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <HAL_RCC_OscConfig+0x4cc>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fcdf 	bl	800081c <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e62:	f7ff fcdb 	bl	800081c <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e03d      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f0      	beq.n	8000e62 <HAL_RCC_OscConfig+0x46a>
 8000e80:	e035      	b.n	8000eee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <HAL_RCC_OscConfig+0x4cc>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e88:	f7ff fcc8 	bl	800081c <HAL_GetTick>
 8000e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e8e:	e008      	b.n	8000ea2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e90:	f7ff fcc4 	bl	800081c <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d901      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e026      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_RCC_OscConfig+0x4c4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1f0      	bne.n	8000e90 <HAL_RCC_OscConfig+0x498>
 8000eae:	e01e      	b.n	8000eee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69db      	ldr	r3, [r3, #28]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d107      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e019      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4f8>
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40007000 	.word	0x40007000
 8000ec4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_RCC_OscConfig+0x500>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d106      	bne.n	8000eea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d001      	beq.n	8000eee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e000      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40021000 	.word	0x40021000

08000efc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e0d0      	b.n	80010b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f10:	4b6a      	ldr	r3, [pc, #424]	; (80010bc <HAL_RCC_ClockConfig+0x1c0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0307 	and.w	r3, r3, #7
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d910      	bls.n	8000f40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f1e:	4b67      	ldr	r3, [pc, #412]	; (80010bc <HAL_RCC_ClockConfig+0x1c0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f023 0207 	bic.w	r2, r3, #7
 8000f26:	4965      	ldr	r1, [pc, #404]	; (80010bc <HAL_RCC_ClockConfig+0x1c0>)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f2e:	4b63      	ldr	r3, [pc, #396]	; (80010bc <HAL_RCC_ClockConfig+0x1c0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d001      	beq.n	8000f40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e0b8      	b.n	80010b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d020      	beq.n	8000f8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d005      	beq.n	8000f64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f58:	4b59      	ldr	r3, [pc, #356]	; (80010c0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	4a58      	ldr	r2, [pc, #352]	; (80010c0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0308 	and.w	r3, r3, #8
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f70:	4b53      	ldr	r3, [pc, #332]	; (80010c0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	4a52      	ldr	r2, [pc, #328]	; (80010c0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f7c:	4b50      	ldr	r3, [pc, #320]	; (80010c0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	494d      	ldr	r1, [pc, #308]	; (80010c0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d040      	beq.n	800101c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d107      	bne.n	8000fb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa2:	4b47      	ldr	r3, [pc, #284]	; (80010c0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d115      	bne.n	8000fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e07f      	b.n	80010b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d107      	bne.n	8000fca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fba:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d109      	bne.n	8000fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e073      	b.n	80010b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fca:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e06b      	b.n	80010b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fda:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f023 0203 	bic.w	r2, r3, #3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	4936      	ldr	r1, [pc, #216]	; (80010c0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fec:	f7ff fc16 	bl	800081c <HAL_GetTick>
 8000ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ff2:	e00a      	b.n	800100a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ff4:	f7ff fc12 	bl	800081c <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001002:	4293      	cmp	r3, r2
 8001004:	d901      	bls.n	800100a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e053      	b.n	80010b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800100a:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <HAL_RCC_ClockConfig+0x1c4>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 020c 	and.w	r2, r3, #12
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	429a      	cmp	r2, r3
 800101a:	d1eb      	bne.n	8000ff4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800101c:	4b27      	ldr	r3, [pc, #156]	; (80010bc <HAL_RCC_ClockConfig+0x1c0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	429a      	cmp	r2, r3
 8001028:	d210      	bcs.n	800104c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800102a:	4b24      	ldr	r3, [pc, #144]	; (80010bc <HAL_RCC_ClockConfig+0x1c0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f023 0207 	bic.w	r2, r3, #7
 8001032:	4922      	ldr	r1, [pc, #136]	; (80010bc <HAL_RCC_ClockConfig+0x1c0>)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	4313      	orrs	r3, r2
 8001038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800103a:	4b20      	ldr	r3, [pc, #128]	; (80010bc <HAL_RCC_ClockConfig+0x1c0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d001      	beq.n	800104c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e032      	b.n	80010b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	2b00      	cmp	r3, #0
 8001056:	d008      	beq.n	800106a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_RCC_ClockConfig+0x1c4>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	4916      	ldr	r1, [pc, #88]	; (80010c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001066:	4313      	orrs	r3, r2
 8001068:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	2b00      	cmp	r3, #0
 8001074:	d009      	beq.n	800108a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	490e      	ldr	r1, [pc, #56]	; (80010c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001086:	4313      	orrs	r3, r2
 8001088:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800108a:	f000 f821 	bl	80010d0 <HAL_RCC_GetSysClockFreq>
 800108e:	4602      	mov	r2, r0
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	091b      	lsrs	r3, r3, #4
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	490a      	ldr	r1, [pc, #40]	; (80010c4 <HAL_RCC_ClockConfig+0x1c8>)
 800109c:	5ccb      	ldrb	r3, [r1, r3]
 800109e:	fa22 f303 	lsr.w	r3, r2, r3
 80010a2:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <HAL_RCC_ClockConfig+0x1cc>)
 80010a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_RCC_ClockConfig+0x1d0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fb74 	bl	8000798 <HAL_InitTick>

  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40022000 	.word	0x40022000
 80010c0:	40021000 	.word	0x40021000
 80010c4:	08001c64 	.word	0x08001c64
 80010c8:	20000000 	.word	0x20000000
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <HAL_RCC_GetSysClockFreq+0x94>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 030c 	and.w	r3, r3, #12
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d002      	beq.n	8001100 <HAL_RCC_GetSysClockFreq+0x30>
 80010fa:	2b08      	cmp	r3, #8
 80010fc:	d003      	beq.n	8001106 <HAL_RCC_GetSysClockFreq+0x36>
 80010fe:	e027      	b.n	8001150 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001100:	4b19      	ldr	r3, [pc, #100]	; (8001168 <HAL_RCC_GetSysClockFreq+0x98>)
 8001102:	613b      	str	r3, [r7, #16]
      break;
 8001104:	e027      	b.n	8001156 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	0c9b      	lsrs	r3, r3, #18
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	4a17      	ldr	r2, [pc, #92]	; (800116c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001110:	5cd3      	ldrb	r3, [r2, r3]
 8001112:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d010      	beq.n	8001140 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_RCC_GetSysClockFreq+0x94>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	0c5b      	lsrs	r3, r3, #17
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	4a11      	ldr	r2, [pc, #68]	; (8001170 <HAL_RCC_GetSysClockFreq+0xa0>)
 800112a:	5cd3      	ldrb	r3, [r2, r3]
 800112c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <HAL_RCC_GetSysClockFreq+0x98>)
 8001132:	fb03 f202 	mul.w	r2, r3, r2
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	fbb2 f3f3 	udiv	r3, r2, r3
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	e004      	b.n	800114a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a0c      	ldr	r2, [pc, #48]	; (8001174 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001144:	fb02 f303 	mul.w	r3, r2, r3
 8001148:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	613b      	str	r3, [r7, #16]
      break;
 800114e:	e002      	b.n	8001156 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_RCC_GetSysClockFreq+0x98>)
 8001152:	613b      	str	r3, [r7, #16]
      break;
 8001154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001156:	693b      	ldr	r3, [r7, #16]
}
 8001158:	4618      	mov	r0, r3
 800115a:	371c      	adds	r7, #28
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	007a1200 	.word	0x007a1200
 800116c:	08001c7c 	.word	0x08001c7c
 8001170:	08001c8c 	.word	0x08001c8c
 8001174:	003d0900 	.word	0x003d0900

08001178 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <RCC_Delay+0x34>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <RCC_Delay+0x38>)
 8001186:	fba2 2303 	umull	r2, r3, r2, r3
 800118a:	0a5b      	lsrs	r3, r3, #9
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	fb02 f303 	mul.w	r3, r2, r3
 8001192:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001194:	bf00      	nop
  }
  while (Delay --);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	60fa      	str	r2, [r7, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1f9      	bne.n	8001194 <RCC_Delay+0x1c>
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	20000000 	.word	0x20000000
 80011b0:	10624dd3 	.word	0x10624dd3

080011b4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80011b4:	b490      	push	{r4, r7}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	461a      	mov	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	0e1b      	lsrs	r3, r3, #24
 80011c8:	4413      	add	r3, r2
 80011ca:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80011cc:	6822      	ldr	r2, [r4, #0]
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	fa93 f3a3 	rbit	r3, r3
 80011d8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	fab3 f383 	clz	r3, r3
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	210f      	movs	r1, #15
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	401a      	ands	r2, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa93 f3a3 	rbit	r3, r3
 80011f8:	61bb      	str	r3, [r7, #24]
  return result;
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	fab3 f383 	clz	r3, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	4313      	orrs	r3, r2
 800120c:	6023      	str	r3, [r4, #0]
}
 800120e:	bf00      	nop
 8001210:	3720      	adds	r7, #32
 8001212:	46bd      	mov	sp, r7
 8001214:	bc90      	pop	{r4, r7}
 8001216:	4770      	bx	lr

08001218 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001218:	b490      	push	{r4, r7}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	461a      	mov	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	0e1b      	lsrs	r3, r3, #24
 800122c:	4413      	add	r3, r2
 800122e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001230:	6822      	ldr	r2, [r4, #0]
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	fa93 f3a3 	rbit	r3, r3
 800123c:	613b      	str	r3, [r7, #16]
  return result;
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	fab3 f383 	clz	r3, r3
 8001244:	b2db      	uxtb	r3, r3
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	2103      	movs	r1, #3
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	401a      	ands	r2, r3
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa93 f3a3 	rbit	r3, r3
 800125c:	61bb      	str	r3, [r7, #24]
  return result;
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	fab3 f383 	clz	r3, r3
 8001264:	b2db      	uxtb	r3, r3
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8001272:	bf00      	nop
 8001274:	3720      	adds	r7, #32
 8001276:	46bd      	mov	sp, r7
 8001278:	bc90      	pop	{r4, r7}
 800127a:	4770      	bx	lr

0800127c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 800127c:	b490      	push	{r4, r7}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	461a      	mov	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	0e1b      	lsrs	r3, r3, #24
 8001290:	4413      	add	r3, r2
 8001292:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001294:	6822      	ldr	r2, [r4, #0]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	fa93 f3a3 	rbit	r3, r3
 80012a0:	613b      	str	r3, [r7, #16]
  return result;
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	fab3 f383 	clz	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	2104      	movs	r1, #4
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	401a      	ands	r2, r3
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa93 f3a3 	rbit	r3, r3
 80012c0:	61bb      	str	r3, [r7, #24]
  return result;
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	fab3 f383 	clz	r3, r3
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	4313      	orrs	r3, r2
 80012d4:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 80012d6:	bf00      	nop
 80012d8:	3720      	adds	r7, #32
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc90      	pop	{r4, r7}
 80012de:	4770      	bx	lr

080012e0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	0a1b      	lsrs	r3, r3, #8
 80012f4:	43db      	mvns	r3, r3
 80012f6:	401a      	ands	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	0a1b      	lsrs	r3, r3, #8
 80012fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	fa93 f3a3 	rbit	r3, r3
 8001304:	613b      	str	r3, [r7, #16]
  return result;
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	fab3 f383 	clz	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4619      	mov	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	408b      	lsls	r3, r1
 8001314:	431a      	orrs	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	60da      	str	r2, [r3, #12]
}
 800131a:	bf00      	nop
 800131c:	371c      	adds	r7, #28
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	0c1b      	lsrs	r3, r3, #16
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	fa93 f3a3 	rbit	r3, r3
 8001342:	60fb      	str	r3, [r7, #12]
  return result;
 8001344:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001346:	fab3 f383 	clz	r3, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800134e:	e044      	b.n	80013da <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8001350:	2201      	movs	r2, #1
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	409a      	lsls	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	4013      	ands	r3, r2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d03a      	beq.n	80013d4 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	2b07      	cmp	r3, #7
 8001362:	d806      	bhi.n	8001372 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8001364:	f240 1201 	movw	r2, #257	; 0x101
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	61bb      	str	r3, [r7, #24]
 8001370:	e008      	b.n	8001384 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3b08      	subs	r3, #8
 8001376:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001382:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b08      	cmp	r3, #8
 800138a:	d106      	bne.n	800139a <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	461a      	mov	r2, r3
 8001392:	69b9      	ldr	r1, [r7, #24]
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ffa3 	bl	80012e0 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	461a      	mov	r2, r3
 80013a0:	69b9      	ldr	r1, [r7, #24]
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ff06 	bl	80011b4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d003      	beq.n	80013b8 <LL_GPIO_Init+0x94>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b09      	cmp	r3, #9
 80013b6:	d10d      	bne.n	80013d4 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	461a      	mov	r2, r3
 80013be:	69b9      	ldr	r1, [r7, #24]
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff29 	bl	8001218 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	461a      	mov	r2, r3
 80013cc:	69b9      	ldr	r1, [r7, #24]
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ff54 	bl	800127c <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	3301      	adds	r3, #1
 80013d8:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	fa22 f303 	lsr.w	r3, r2, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1b4      	bne.n	8001350 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <LL_RCC_GetSysClkSource+0x14>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 030c 	and.w	r3, r3, #12
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	40021000 	.word	0x40021000

08001408 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <LL_RCC_GetAHBPrescaler+0x14>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	40021000 	.word	0x40021000

08001420 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	40021000 	.word	0x40021000

08001438 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <LL_RCC_GetAPB2Prescaler+0x14>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	40021000 	.word	0x40021000

08001450 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <LL_RCC_PLL_GetMainSource+0x14>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	40021000 	.word	0x40021000

08001468 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <LL_RCC_PLL_GetMultiplicator+0x14>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	40021000 	.word	0x40021000

08001480 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <LL_RCC_PLL_GetPrediv+0x18>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	0c5b      	lsrs	r3, r3, #17
 800148a:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000

0800149c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80014a4:	f000 f820 	bl	80014e8 <RCC_GetSystemClockFreq>
 80014a8:	4602      	mov	r2, r0
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f83e 	bl	8001534 <RCC_GetHCLKClockFreq>
 80014b8:	4602      	mov	r2, r0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f84c 	bl	8001560 <RCC_GetPCLK1ClockFreq>
 80014c8:	4602      	mov	r2, r0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 f858 	bl	8001588 <RCC_GetPCLK2ClockFreq>
 80014d8:	4602      	mov	r2, r0
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	60da      	str	r2, [r3, #12]
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80014f2:	f7ff ff7d 	bl	80013f0 <LL_RCC_GetSysClkSource>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b08      	cmp	r3, #8
 80014fa:	d00c      	beq.n	8001516 <RCC_GetSystemClockFreq+0x2e>
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d80e      	bhi.n	800151e <RCC_GetSystemClockFreq+0x36>
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <RCC_GetSystemClockFreq+0x22>
 8001504:	2b04      	cmp	r3, #4
 8001506:	d003      	beq.n	8001510 <RCC_GetSystemClockFreq+0x28>
 8001508:	e009      	b.n	800151e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <RCC_GetSystemClockFreq+0x48>)
 800150c:	607b      	str	r3, [r7, #4]
      break;
 800150e:	e009      	b.n	8001524 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <RCC_GetSystemClockFreq+0x48>)
 8001512:	607b      	str	r3, [r7, #4]
      break;
 8001514:	e006      	b.n	8001524 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001516:	f000 f84b 	bl	80015b0 <RCC_PLL_GetFreqDomain_SYS>
 800151a:	6078      	str	r0, [r7, #4]
      break;
 800151c:	e002      	b.n	8001524 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800151e:	4b04      	ldr	r3, [pc, #16]	; (8001530 <RCC_GetSystemClockFreq+0x48>)
 8001520:	607b      	str	r3, [r7, #4]
      break;
 8001522:	bf00      	nop
  }

  return frequency;
 8001524:	687b      	ldr	r3, [r7, #4]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	007a1200 	.word	0x007a1200

08001534 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800153c:	f7ff ff64 	bl	8001408 <LL_RCC_GetAHBPrescaler>
 8001540:	4603      	mov	r3, r0
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	f003 030f 	and.w	r3, r3, #15
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <RCC_GetHCLKClockFreq+0x28>)
 800154a:	5cd3      	ldrb	r3, [r2, r3]
 800154c:	461a      	mov	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	40d3      	lsrs	r3, r2
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	08001c64 	.word	0x08001c64

08001560 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001568:	f7ff ff5a 	bl	8001420 <LL_RCC_GetAPB1Prescaler>
 800156c:	4603      	mov	r3, r0
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <RCC_GetPCLK1ClockFreq+0x24>)
 8001572:	5cd3      	ldrb	r3, [r2, r3]
 8001574:	461a      	mov	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	40d3      	lsrs	r3, r2
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	08001c74 	.word	0x08001c74

08001588 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001590:	f7ff ff52 	bl	8001438 <LL_RCC_GetAPB2Prescaler>
 8001594:	4603      	mov	r3, r0
 8001596:	0adb      	lsrs	r3, r3, #11
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <RCC_GetPCLK2ClockFreq+0x24>)
 800159a:	5cd3      	ldrb	r3, [r2, r3]
 800159c:	461a      	mov	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	40d3      	lsrs	r3, r2
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	08001c74 	.word	0x08001c74

080015b0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	2300      	movs	r3, #0
 80015bc:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80015be:	f7ff ff47 	bl	8001450 <LL_RCC_PLL_GetMainSource>
 80015c2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d004      	beq.n	80015d4 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d0:	d003      	beq.n	80015da <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80015d2:	e00b      	b.n	80015ec <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80015d6:	607b      	str	r3, [r7, #4]
      break;
 80015d8:	e00b      	b.n	80015f2 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80015da:	f7ff ff51 	bl	8001480 <LL_RCC_PLL_GetPrediv>
 80015de:	4603      	mov	r3, r0
 80015e0:	3301      	adds	r3, #1
 80015e2:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80015e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e8:	607b      	str	r3, [r7, #4]
      break;
 80015ea:	e002      	b.n	80015f2 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80015ec:	4b07      	ldr	r3, [pc, #28]	; (800160c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80015ee:	607b      	str	r3, [r7, #4]
      break;
 80015f0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80015f2:	f7ff ff39 	bl	8001468 <LL_RCC_PLL_GetMultiplicator>
 80015f6:	4603      	mov	r3, r0
 80015f8:	0c9b      	lsrs	r3, r3, #18
 80015fa:	3302      	adds	r3, #2
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	003d0900 	.word	0x003d0900
 8001610:	007a1200 	.word	0x007a1200

08001614 <LL_USART_IsEnabled>:
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001628:	bf0c      	ite	eq
 800162a:	2301      	moveq	r3, #1
 800162c:	2300      	movne	r3, #0
 800162e:	b2db      	uxtb	r3, r3
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr

0800163a <LL_USART_SetStopBitsLength>:
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	611a      	str	r2, [r3, #16]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <LL_USART_SetHWFlowCtrl>:
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	615a      	str	r2, [r3, #20]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
	...

08001684 <LL_USART_SetBaudRate>:
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	009a      	lsls	r2, r3, #2
 800169a:	441a      	add	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	4a25      	ldr	r2, [pc, #148]	; (800173c <LL_USART_SetBaudRate+0xb8>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	011b      	lsls	r3, r3, #4
 80016b0:	b299      	uxth	r1, r3
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	009a      	lsls	r2, r3, #2
 80016bc:	441a      	add	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <LL_USART_SetBaudRate+0xb8>)
 80016c8:	fba3 0302 	umull	r0, r3, r3, r2
 80016cc:	095b      	lsrs	r3, r3, #5
 80016ce:	2064      	movs	r0, #100	; 0x64
 80016d0:	fb00 f303 	mul.w	r3, r0, r3
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	011b      	lsls	r3, r3, #4
 80016d8:	3332      	adds	r3, #50	; 0x32
 80016da:	4a18      	ldr	r2, [pc, #96]	; (800173c <LL_USART_SetBaudRate+0xb8>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	095b      	lsrs	r3, r3, #5
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	440b      	add	r3, r1
 80016ec:	b299      	uxth	r1, r3
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	009a      	lsls	r2, r3, #2
 80016f8:	441a      	add	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <LL_USART_SetBaudRate+0xb8>)
 8001704:	fba3 0302 	umull	r0, r3, r3, r2
 8001708:	095b      	lsrs	r3, r3, #5
 800170a:	2064      	movs	r0, #100	; 0x64
 800170c:	fb00 f303 	mul.w	r3, r0, r3
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	011b      	lsls	r3, r3, #4
 8001714:	3332      	adds	r3, #50	; 0x32
 8001716:	4a09      	ldr	r2, [pc, #36]	; (800173c <LL_USART_SetBaudRate+0xb8>)
 8001718:	fba2 2303 	umull	r2, r3, r2, r3
 800171c:	095b      	lsrs	r3, r3, #5
 800171e:	b29b      	uxth	r3, r3
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	b29b      	uxth	r3, r3
 8001726:	440b      	add	r3, r1
 8001728:	b29b      	uxth	r3, r3
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	609a      	str	r2, [r3, #8]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	51eb851f 	.word	0x51eb851f

08001740 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ff5e 	bl	8001614 <LL_USART_IsEnabled>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d145      	bne.n	80017ea <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001766:	f023 030c 	bic.w	r3, r3, #12
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	6851      	ldr	r1, [r2, #4]
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	68d2      	ldr	r2, [r2, #12]
 8001772:	4311      	orrs	r1, r2
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	6912      	ldr	r2, [r2, #16]
 8001778:	430a      	orrs	r2, r1
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4619      	mov	r1, r3
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ff57 	bl	800163a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	4619      	mov	r1, r3
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff ff63 	bl	800165e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001798:	f107 0308 	add.w	r3, r7, #8
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fe7d 	bl	800149c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <LL_USART_Init+0xb4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d102      	bne.n	80017b0 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	61bb      	str	r3, [r7, #24]
 80017ae:	e00c      	b.n	80017ca <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a11      	ldr	r2, [pc, #68]	; (80017f8 <LL_USART_Init+0xb8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d102      	bne.n	80017be <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	61bb      	str	r3, [r7, #24]
 80017bc:	e005      	b.n	80017ca <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a0e      	ldr	r2, [pc, #56]	; (80017fc <LL_USART_Init+0xbc>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d101      	bne.n	80017ca <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00c      	beq.n	80017ea <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d008      	beq.n	80017ea <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 80017d8:	2300      	movs	r3, #0
 80017da:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	69b9      	ldr	r1, [r7, #24]
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ff4d 	bl	8001684 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80017ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40013800 	.word	0x40013800
 80017f8:	40004400 	.word	0x40004400
 80017fc:	40004800 	.word	0x40004800

08001800 <Kernel_start>:
#include "main.h"
#include "kernel.h"
#include "task.h"

void Kernel_start(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	Kernel_task_start();
 8001804:	f000 f8d6 	bl	80019b4 <Kernel_task_start>
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <Kernel_yield>:

void Kernel_yield(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	Kernel_task_scheduler();
 8001810:	f000 f894 	bl	800193c <Kernel_task_scheduler>
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}

08001818 <Kernel_task_init>:
static __attribute__ ((naked)) void Kernel_task_context_switching(void);
static __attribute__ ((naked)) void Save_context(void);
static __attribute__ ((naked)) void Restore_context(void);

void Kernel_task_init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
	sAllocated_tcb_index = 0;
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <Kernel_task_init+0x88>)
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
	sCurrent_tcb_index = 0;
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <Kernel_task_init+0x8c>)
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]

	for(uint32_t i = 0; i < MAX_TASK_NUM; i++){
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	e02e      	b.n	800188e <Kernel_task_init+0x76>
		sTask_list[i].stack_base = (uint8_t*)malloc(USR_TASK_STACK_SIZE);//(TASK_STACK_START + (i * USR_TASK_STACK_SIZE));
 8001830:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001834:	f000 f8fe 	bl	8001a34 <malloc>
 8001838:	4603      	mov	r3, r0
 800183a:	4619      	mov	r1, r3
 800183c:	4a1a      	ldr	r2, [pc, #104]	; (80018a8 <Kernel_task_init+0x90>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4413      	add	r3, r2
 8001844:	6059      	str	r1, [r3, #4]
		sTask_list[i].sp = (uint32_t)sTask_list[i].stack_base + USR_TASK_STACK_SIZE - 4;
 8001846:	4a18      	ldr	r2, [pc, #96]	; (80018a8 <Kernel_task_init+0x90>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4413      	add	r3, r2
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f503 727f 	add.w	r2, r3, #1020	; 0x3fc
 8001854:	4914      	ldr	r1, [pc, #80]	; (80018a8 <Kernel_task_init+0x90>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

		sTask_list[i].sp -= sizeof(KernelTaskContext_t);
 800185c:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <Kernel_task_init+0x90>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001864:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 8001868:	490f      	ldr	r1, [pc, #60]	; (80018a8 <Kernel_task_init+0x90>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		KernelTaskContext_t* ctx = (KernelTaskContext_t*)sTask_list[i].sp;
 8001870:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <Kernel_task_init+0x90>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001878:	603b      	str	r3, [r7, #0]
		ctx->pc = 0;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2200      	movs	r2, #0
 800187e:	639a      	str	r2, [r3, #56]	; 0x38
		ctx->psr = 0x01000000;//ARM_MODE_BIT_SYS;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001886:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 0; i < MAX_TASK_NUM; i++){
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3301      	adds	r3, #1
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d9cd      	bls.n	8001830 <Kernel_task_init+0x18>
	}
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200000b4 	.word	0x200000b4
 80018a4:	200000b8 	.word	0x200000b8
 80018a8:	20000094 	.word	0x20000094

080018ac <Kernel_task_create>:

uint32_t Kernel_task_create(KernelTaskFunc_t startFunc)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	KernelTcb_t* new_tcb = &sTask_list[sAllocated_tcb_index++];
 80018b4:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <Kernel_task_create+0x44>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	490d      	ldr	r1, [pc, #52]	; (80018f0 <Kernel_task_create+0x44>)
 80018bc:	600a      	str	r2, [r1, #0]
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4a0c      	ldr	r2, [pc, #48]	; (80018f4 <Kernel_task_create+0x48>)
 80018c2:	4413      	add	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]

	if(sAllocated_tcb_index > MAX_TASK_NUM){
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <Kernel_task_create+0x44>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d902      	bls.n	80018d4 <Kernel_task_create+0x28>
		return NOT_ENOUGH_TASK_NUM;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	e008      	b.n	80018e6 <Kernel_task_create+0x3a>
	}

	KernelTaskContext_t* ctx = (KernelTaskContext_t*)new_tcb->sp;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	60bb      	str	r3, [r7, #8]
	ctx->pc = (uint32_t)startFunc;
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	639a      	str	r2, [r3, #56]	; 0x38

	return (sAllocated_tcb_index - 1);
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <Kernel_task_create+0x44>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3b01      	subs	r3, #1
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	200000b4 	.word	0x200000b4
 80018f4:	20000094 	.word	0x20000094

080018f8 <Scheduler_round_robin_algorithm>:

static KernelTcb_t* Scheduler_round_robin_algorithm(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
	sCurrent_tcb_index++;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <Scheduler_round_robin_algorithm+0x38>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <Scheduler_round_robin_algorithm+0x38>)
 8001904:	6013      	str	r3, [r2, #0]
	sCurrent_tcb_index %= sAllocated_tcb_index;
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <Scheduler_round_robin_algorithm+0x38>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <Scheduler_round_robin_algorithm+0x3c>)
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001912:	fb01 f202 	mul.w	r2, r1, r2
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	4a05      	ldr	r2, [pc, #20]	; (8001930 <Scheduler_round_robin_algorithm+0x38>)
 800191a:	6013      	str	r3, [r2, #0]

	return &sTask_list[sCurrent_tcb_index];
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <Scheduler_round_robin_algorithm+0x38>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <Scheduler_round_robin_algorithm+0x40>)
 8001924:	4413      	add	r3, r2
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	200000b8 	.word	0x200000b8
 8001934:	200000b4 	.word	0x200000b4
 8001938:	20000094 	.word	0x20000094

0800193c <Kernel_task_scheduler>:

void Kernel_task_scheduler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
	sCurrent_tcb = &sTask_list[sCurrent_tcb_index];
 8001940:	4b07      	ldr	r3, [pc, #28]	; (8001960 <Kernel_task_scheduler+0x24>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4a07      	ldr	r2, [pc, #28]	; (8001964 <Kernel_task_scheduler+0x28>)
 8001948:	4413      	add	r3, r2
 800194a:	4a07      	ldr	r2, [pc, #28]	; (8001968 <Kernel_task_scheduler+0x2c>)
 800194c:	6013      	str	r3, [r2, #0]
	sNext_tcb = Scheduler_round_robin_algorithm();
 800194e:	f7ff ffd3 	bl	80018f8 <Scheduler_round_robin_algorithm>
 8001952:	4603      	mov	r3, r0
 8001954:	4a05      	ldr	r2, [pc, #20]	; (800196c <Kernel_task_scheduler+0x30>)
 8001956:	6013      	str	r3, [r2, #0]

	Kernel_task_context_switching();
 8001958:	f000 f80a 	bl	8001970 <Kernel_task_context_switching>
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200000b8 	.word	0x200000b8
 8001964:	20000094 	.word	0x20000094
 8001968:	200000ac 	.word	0x200000ac
 800196c:	200000b0 	.word	0x200000b0

08001970 <Kernel_task_context_switching>:

static __attribute__ ((naked)) void Kernel_task_context_switching(void)
{
	__asm__ ("B Save_context");
 8001970:	f000 b804 	b.w	800197c <Save_context>
	__asm__ ("B Restore_context");
 8001974:	f000 b810 	b.w	8001998 <Restore_context>
}
 8001978:	bf00      	nop
	...

0800197c <Save_context>:

static __attribute__ ((naked)) void Save_context(void)
{
	__asm__ ("PUSH {lr}");
 800197c:	b500      	push	{lr}
	__asm__ ("PUSH {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}");
 800197e:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	__asm__ ("MRS   r0, psr");
 8001982:	f3ef 8003 	mrs	r0, PSR
	__asm__ ("PUSH {r0}");
 8001986:	b401      	push	{r0}
	__asm__ ("LDR   r0, =sCurrent_tcb");
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <Save_context+0x18>)
	__asm__ ("LDR   r0, [r0]");
 800198a:	6800      	ldr	r0, [r0, #0]
	__asm__ ("MRS   r1, msp");
 800198c:	f3ef 8108 	mrs	r1, MSP
	__asm__ ("STR   r1, [r0]");
 8001990:	6001      	str	r1, [r0, #0]
}
 8001992:	bf00      	nop
 8001994:	200000ac 	.word	0x200000ac

08001998 <Restore_context>:

static __attribute__ ((naked)) void Restore_context(void)
{
	__asm__ ("LDR   r0, =sNext_tcb");
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <Restore_context+0x18>)
	__asm__ ("LDR   r0, [r0]");
 800199a:	6800      	ldr	r0, [r0, #0]
	__asm__ ("LDR   r1, [r0]");
 800199c:	6801      	ldr	r1, [r0, #0]
	__asm__ ("MSR   msp, r1");
 800199e:	f381 8808 	msr	MSP, r1
	__asm__ ("POP  {r0}");
 80019a2:	bc01      	pop	{r0}
	__asm__ ("MSR   psr, r0");
 80019a4:	f380 8803 	msr	PSR, r0
	__asm__ ("POP  {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}");
 80019a8:	e8bd 1fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	__asm__ ("POP  {pc}");
 80019ac:	bd00      	pop	{pc}
}
 80019ae:	bf00      	nop
 80019b0:	200000b0 	.word	0x200000b0

080019b4 <Kernel_task_start>:

void Kernel_task_start(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
	sNext_tcb = &sTask_list[sCurrent_tcb_index];
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <Kernel_task_start+0x20>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <Kernel_task_start+0x24>)
 80019c0:	4413      	add	r3, r2
 80019c2:	4a06      	ldr	r2, [pc, #24]	; (80019dc <Kernel_task_start+0x28>)
 80019c4:	6013      	str	r3, [r2, #0]

	__asm__ ("B Restore_context");
 80019c6:	f7ff bfe7 	b.w	8001998 <Restore_context>
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	200000b8 	.word	0x200000b8
 80019d8:	20000094 	.word	0x20000094
 80019dc:	200000b0 	.word	0x200000b0

080019e0 <__errno>:
 80019e0:	4b01      	ldr	r3, [pc, #4]	; (80019e8 <__errno+0x8>)
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	2000000c 	.word	0x2000000c

080019ec <__libc_init_array>:
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	2600      	movs	r6, #0
 80019f0:	4d0c      	ldr	r5, [pc, #48]	; (8001a24 <__libc_init_array+0x38>)
 80019f2:	4c0d      	ldr	r4, [pc, #52]	; (8001a28 <__libc_init_array+0x3c>)
 80019f4:	1b64      	subs	r4, r4, r5
 80019f6:	10a4      	asrs	r4, r4, #2
 80019f8:	42a6      	cmp	r6, r4
 80019fa:	d109      	bne.n	8001a10 <__libc_init_array+0x24>
 80019fc:	f000 f8dc 	bl	8001bb8 <_init>
 8001a00:	2600      	movs	r6, #0
 8001a02:	4d0a      	ldr	r5, [pc, #40]	; (8001a2c <__libc_init_array+0x40>)
 8001a04:	4c0a      	ldr	r4, [pc, #40]	; (8001a30 <__libc_init_array+0x44>)
 8001a06:	1b64      	subs	r4, r4, r5
 8001a08:	10a4      	asrs	r4, r4, #2
 8001a0a:	42a6      	cmp	r6, r4
 8001a0c:	d105      	bne.n	8001a1a <__libc_init_array+0x2e>
 8001a0e:	bd70      	pop	{r4, r5, r6, pc}
 8001a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a14:	4798      	blx	r3
 8001a16:	3601      	adds	r6, #1
 8001a18:	e7ee      	b.n	80019f8 <__libc_init_array+0xc>
 8001a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a1e:	4798      	blx	r3
 8001a20:	3601      	adds	r6, #1
 8001a22:	e7f2      	b.n	8001a0a <__libc_init_array+0x1e>
 8001a24:	08001c90 	.word	0x08001c90
 8001a28:	08001c90 	.word	0x08001c90
 8001a2c:	08001c90 	.word	0x08001c90
 8001a30:	08001c94 	.word	0x08001c94

08001a34 <malloc>:
 8001a34:	4b02      	ldr	r3, [pc, #8]	; (8001a40 <malloc+0xc>)
 8001a36:	4601      	mov	r1, r0
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	f000 b82b 	b.w	8001a94 <_malloc_r>
 8001a3e:	bf00      	nop
 8001a40:	2000000c 	.word	0x2000000c

08001a44 <memset>:
 8001a44:	4603      	mov	r3, r0
 8001a46:	4402      	add	r2, r0
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <memset+0xa>
 8001a4c:	4770      	bx	lr
 8001a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8001a52:	e7f9      	b.n	8001a48 <memset+0x4>

08001a54 <sbrk_aligned>:
 8001a54:	b570      	push	{r4, r5, r6, lr}
 8001a56:	4e0e      	ldr	r6, [pc, #56]	; (8001a90 <sbrk_aligned+0x3c>)
 8001a58:	460c      	mov	r4, r1
 8001a5a:	6831      	ldr	r1, [r6, #0]
 8001a5c:	4605      	mov	r5, r0
 8001a5e:	b911      	cbnz	r1, 8001a66 <sbrk_aligned+0x12>
 8001a60:	f000 f88c 	bl	8001b7c <_sbrk_r>
 8001a64:	6030      	str	r0, [r6, #0]
 8001a66:	4621      	mov	r1, r4
 8001a68:	4628      	mov	r0, r5
 8001a6a:	f000 f887 	bl	8001b7c <_sbrk_r>
 8001a6e:	1c43      	adds	r3, r0, #1
 8001a70:	d00a      	beq.n	8001a88 <sbrk_aligned+0x34>
 8001a72:	1cc4      	adds	r4, r0, #3
 8001a74:	f024 0403 	bic.w	r4, r4, #3
 8001a78:	42a0      	cmp	r0, r4
 8001a7a:	d007      	beq.n	8001a8c <sbrk_aligned+0x38>
 8001a7c:	1a21      	subs	r1, r4, r0
 8001a7e:	4628      	mov	r0, r5
 8001a80:	f000 f87c 	bl	8001b7c <_sbrk_r>
 8001a84:	3001      	adds	r0, #1
 8001a86:	d101      	bne.n	8001a8c <sbrk_aligned+0x38>
 8001a88:	f04f 34ff 	mov.w	r4, #4294967295
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	bd70      	pop	{r4, r5, r6, pc}
 8001a90:	200000c0 	.word	0x200000c0

08001a94 <_malloc_r>:
 8001a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a98:	1ccd      	adds	r5, r1, #3
 8001a9a:	f025 0503 	bic.w	r5, r5, #3
 8001a9e:	3508      	adds	r5, #8
 8001aa0:	2d0c      	cmp	r5, #12
 8001aa2:	bf38      	it	cc
 8001aa4:	250c      	movcc	r5, #12
 8001aa6:	2d00      	cmp	r5, #0
 8001aa8:	4607      	mov	r7, r0
 8001aaa:	db01      	blt.n	8001ab0 <_malloc_r+0x1c>
 8001aac:	42a9      	cmp	r1, r5
 8001aae:	d905      	bls.n	8001abc <_malloc_r+0x28>
 8001ab0:	230c      	movs	r3, #12
 8001ab2:	2600      	movs	r6, #0
 8001ab4:	603b      	str	r3, [r7, #0]
 8001ab6:	4630      	mov	r0, r6
 8001ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001abc:	4e2e      	ldr	r6, [pc, #184]	; (8001b78 <_malloc_r+0xe4>)
 8001abe:	f000 f86d 	bl	8001b9c <__malloc_lock>
 8001ac2:	6833      	ldr	r3, [r6, #0]
 8001ac4:	461c      	mov	r4, r3
 8001ac6:	bb34      	cbnz	r4, 8001b16 <_malloc_r+0x82>
 8001ac8:	4629      	mov	r1, r5
 8001aca:	4638      	mov	r0, r7
 8001acc:	f7ff ffc2 	bl	8001a54 <sbrk_aligned>
 8001ad0:	1c43      	adds	r3, r0, #1
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	d14d      	bne.n	8001b72 <_malloc_r+0xde>
 8001ad6:	6834      	ldr	r4, [r6, #0]
 8001ad8:	4626      	mov	r6, r4
 8001ada:	2e00      	cmp	r6, #0
 8001adc:	d140      	bne.n	8001b60 <_malloc_r+0xcc>
 8001ade:	6823      	ldr	r3, [r4, #0]
 8001ae0:	4631      	mov	r1, r6
 8001ae2:	4638      	mov	r0, r7
 8001ae4:	eb04 0803 	add.w	r8, r4, r3
 8001ae8:	f000 f848 	bl	8001b7c <_sbrk_r>
 8001aec:	4580      	cmp	r8, r0
 8001aee:	d13a      	bne.n	8001b66 <_malloc_r+0xd2>
 8001af0:	6821      	ldr	r1, [r4, #0]
 8001af2:	3503      	adds	r5, #3
 8001af4:	1a6d      	subs	r5, r5, r1
 8001af6:	f025 0503 	bic.w	r5, r5, #3
 8001afa:	3508      	adds	r5, #8
 8001afc:	2d0c      	cmp	r5, #12
 8001afe:	bf38      	it	cc
 8001b00:	250c      	movcc	r5, #12
 8001b02:	4638      	mov	r0, r7
 8001b04:	4629      	mov	r1, r5
 8001b06:	f7ff ffa5 	bl	8001a54 <sbrk_aligned>
 8001b0a:	3001      	adds	r0, #1
 8001b0c:	d02b      	beq.n	8001b66 <_malloc_r+0xd2>
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	442b      	add	r3, r5
 8001b12:	6023      	str	r3, [r4, #0]
 8001b14:	e00e      	b.n	8001b34 <_malloc_r+0xa0>
 8001b16:	6822      	ldr	r2, [r4, #0]
 8001b18:	1b52      	subs	r2, r2, r5
 8001b1a:	d41e      	bmi.n	8001b5a <_malloc_r+0xc6>
 8001b1c:	2a0b      	cmp	r2, #11
 8001b1e:	d916      	bls.n	8001b4e <_malloc_r+0xba>
 8001b20:	1961      	adds	r1, r4, r5
 8001b22:	42a3      	cmp	r3, r4
 8001b24:	6025      	str	r5, [r4, #0]
 8001b26:	bf18      	it	ne
 8001b28:	6059      	strne	r1, [r3, #4]
 8001b2a:	6863      	ldr	r3, [r4, #4]
 8001b2c:	bf08      	it	eq
 8001b2e:	6031      	streq	r1, [r6, #0]
 8001b30:	5162      	str	r2, [r4, r5]
 8001b32:	604b      	str	r3, [r1, #4]
 8001b34:	4638      	mov	r0, r7
 8001b36:	f104 060b 	add.w	r6, r4, #11
 8001b3a:	f000 f835 	bl	8001ba8 <__malloc_unlock>
 8001b3e:	f026 0607 	bic.w	r6, r6, #7
 8001b42:	1d23      	adds	r3, r4, #4
 8001b44:	1af2      	subs	r2, r6, r3
 8001b46:	d0b6      	beq.n	8001ab6 <_malloc_r+0x22>
 8001b48:	1b9b      	subs	r3, r3, r6
 8001b4a:	50a3      	str	r3, [r4, r2]
 8001b4c:	e7b3      	b.n	8001ab6 <_malloc_r+0x22>
 8001b4e:	6862      	ldr	r2, [r4, #4]
 8001b50:	42a3      	cmp	r3, r4
 8001b52:	bf0c      	ite	eq
 8001b54:	6032      	streq	r2, [r6, #0]
 8001b56:	605a      	strne	r2, [r3, #4]
 8001b58:	e7ec      	b.n	8001b34 <_malloc_r+0xa0>
 8001b5a:	4623      	mov	r3, r4
 8001b5c:	6864      	ldr	r4, [r4, #4]
 8001b5e:	e7b2      	b.n	8001ac6 <_malloc_r+0x32>
 8001b60:	4634      	mov	r4, r6
 8001b62:	6876      	ldr	r6, [r6, #4]
 8001b64:	e7b9      	b.n	8001ada <_malloc_r+0x46>
 8001b66:	230c      	movs	r3, #12
 8001b68:	4638      	mov	r0, r7
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	f000 f81c 	bl	8001ba8 <__malloc_unlock>
 8001b70:	e7a1      	b.n	8001ab6 <_malloc_r+0x22>
 8001b72:	6025      	str	r5, [r4, #0]
 8001b74:	e7de      	b.n	8001b34 <_malloc_r+0xa0>
 8001b76:	bf00      	nop
 8001b78:	200000bc 	.word	0x200000bc

08001b7c <_sbrk_r>:
 8001b7c:	b538      	push	{r3, r4, r5, lr}
 8001b7e:	2300      	movs	r3, #0
 8001b80:	4d05      	ldr	r5, [pc, #20]	; (8001b98 <_sbrk_r+0x1c>)
 8001b82:	4604      	mov	r4, r0
 8001b84:	4608      	mov	r0, r1
 8001b86:	602b      	str	r3, [r5, #0]
 8001b88:	f7fe fc16 	bl	80003b8 <_sbrk>
 8001b8c:	1c43      	adds	r3, r0, #1
 8001b8e:	d102      	bne.n	8001b96 <_sbrk_r+0x1a>
 8001b90:	682b      	ldr	r3, [r5, #0]
 8001b92:	b103      	cbz	r3, 8001b96 <_sbrk_r+0x1a>
 8001b94:	6023      	str	r3, [r4, #0]
 8001b96:	bd38      	pop	{r3, r4, r5, pc}
 8001b98:	200000c4 	.word	0x200000c4

08001b9c <__malloc_lock>:
 8001b9c:	4801      	ldr	r0, [pc, #4]	; (8001ba4 <__malloc_lock+0x8>)
 8001b9e:	f000 b809 	b.w	8001bb4 <__retarget_lock_acquire_recursive>
 8001ba2:	bf00      	nop
 8001ba4:	200000c8 	.word	0x200000c8

08001ba8 <__malloc_unlock>:
 8001ba8:	4801      	ldr	r0, [pc, #4]	; (8001bb0 <__malloc_unlock+0x8>)
 8001baa:	f000 b804 	b.w	8001bb6 <__retarget_lock_release_recursive>
 8001bae:	bf00      	nop
 8001bb0:	200000c8 	.word	0x200000c8

08001bb4 <__retarget_lock_acquire_recursive>:
 8001bb4:	4770      	bx	lr

08001bb6 <__retarget_lock_release_recursive>:
 8001bb6:	4770      	bx	lr

08001bb8 <_init>:
 8001bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bba:	bf00      	nop
 8001bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bbe:	bc08      	pop	{r3}
 8001bc0:	469e      	mov	lr, r3
 8001bc2:	4770      	bx	lr

08001bc4 <_fini>:
 8001bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc6:	bf00      	nop
 8001bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bca:	bc08      	pop	{r3}
 8001bcc:	469e      	mov	lr, r3
 8001bce:	4770      	bx	lr
